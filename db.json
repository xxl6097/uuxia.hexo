{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[],"Cache":[{"_id":"source/_posts/deamon.md","hash":"e398f4c1ae8faa2c07333e57d4bc853a3cd609e6","modified":1522739142831},{"_id":"source/_posts/installshadowsocks.md","hash":"95c3ed315cd9605d182d2f388f4dd3d17131e3ac","modified":1522739142841},{"_id":"source/_posts/android-ndk-so-a.md","hash":"5736a429a8909c5ce239f2ec59bbed2991fa7bd0","modified":1522739142831},{"_id":"source/_posts/buildvpn.md","hash":"4b5b463cba9c35f78aaacab7e93b7143bead4078","modified":1522739142831},{"_id":"source/_posts/gowaywenzi.md","hash":"a12a30abc826c384e3a6bcc66cb24ca4bbe8ae7e","modified":1522739142832},{"_id":"source/_posts/iosdev.md","hash":"d4c4ea79d1866d2d1bcd9059a5341fa72955f38b","modified":1522739142841},{"_id":"source/_posts/xware_centos6.md","hash":"5edfa7d4550b5c6be1f4751076df693ae4bcd2fb","modified":1522751917778},{"_id":"source/_posts/okhttphelp.md","hash":"875aff0abb236b95bacbf5b84abccfb68002a64c","modified":1522739142842},{"_id":"source/_posts/public-bind.md","hash":"5e33be35f66275c8b283da6c997c5cb387083c81","modified":1522739142842},{"_id":"source/_data/hint.json","hash":"178fe345ea95511364ed70da86186cb834947993","modified":1522739142830},{"_id":"source/_data/link.json","hash":"94294b916cba684860049de21e48a4beec8b0a38","modified":1522739142830},{"_id":"source/about/index.md","hash":"cf37b9536668e276655568ad5b3ef20f78c1ad8f","modified":1522739142978},{"_id":"source/reading/index.md","hash":"ab4ae4fad36f371f60b49973797a115423a784d4","modified":1522739142978},{"_id":"source/_data/about.json","hash":"f6b5c86c5f24959039fd82067629b7cb36af2cbe","modified":1522739142830},{"_id":"source/_data/reading.json","hash":"e8045e22b2d499a5d813320a8c2b1bccdbedd46d","modified":1522739142830},{"_id":"source/_posts/android-ndk-so-a/img1.png","hash":"457306b822a7249d8f04d6a48dc3ef2ec8ef3fa3","modified":1522739142831},{"_id":"source/_posts/ximalaya.md","hash":"f3e6cbe5b051448398a96fd868a3a908c72432fd","modified":1522739142977},{"_id":"source/_posts/public-bind/bouding.png","hash":"40b21316d9725e689c00de297e44e1ef9a8a77fa","modified":1522739142860},{"_id":"source/_posts/public-bind/failed.png","hash":"5b66b54ce7a12a2ef3381de5fc2555584842cea7","modified":1522739142862},{"_id":"source/_posts/public-bind/droplist.png","hash":"77d1f529286c6c8eb6ca7784ad3ba2e4c8861ace","modified":1522739142861},{"_id":"source/_posts/public-bind/loading.png","hash":"1a8769e46ce6c82012ab97d89df9fa650b24a5e7","modified":1522739142976},{"_id":"source/_posts/public-bind/values.png","hash":"3d2c4b32a35eb029db4186ca4c6fe0be78fb0045","modified":1522739142977},{"_id":"source/_posts/public-bind/scanning.png","hash":"4405145707bf19f93fbce6409d1b1b92ad44b2f7","modified":1522739142977},{"_id":"source/_posts/public-bind/HET-15015A20160510_open.pdf","hash":"340386409bd16722225fc91208dbd6a74724a52f","modified":1522739142860},{"_id":"source/_posts/public-bind/H&TV02_2015-10-14.pdf","hash":"26f8c4bbb23c7a9cae3c40702b613e94ffba1868","modified":1522739142852},{"_id":"public/search.xml","hash":"8c8dc8b60b4f7b85deafef7adabc3d9260917305","modified":1522752098619},{"_id":"public/about/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098626},{"_id":"public/reading/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098626},{"_id":"public/2018/04/03/xware_centos6/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098627},{"_id":"public/2016/05/11/android-ndk-so-a/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098627},{"_id":"public/2016/05/11/ximalaya/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098627},{"_id":"public/2016/05/11/public-bind/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098627},{"_id":"public/2016/05/11/installshadowsocks/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098627},{"_id":"public/2016/05/10/iosdev/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098627},{"_id":"public/2016/05/09/okhttphelp/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098627},{"_id":"public/2016/05/09/gowaywenzi/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098627},{"_id":"public/2016/05/09/buildvpn/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098627},{"_id":"public/2016/05/09/deamon/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098627},{"_id":"public/archives/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098627},{"_id":"public/archives/2016/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098627},{"_id":"public/archives/2016/05/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098627},{"_id":"public/archives/2018/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098627},{"_id":"public/archives/2018/04/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098627},{"_id":"public/categories/Service/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098627},{"_id":"public/categories/翻墙/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098627},{"_id":"public/categories/NDK/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098627},{"_id":"public/categories/vpn/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098628},{"_id":"public/categories/生活/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098628},{"_id":"public/categories/ios/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098628},{"_id":"public/categories/迅雷/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098628},{"_id":"public/categories/智能家居/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098628},{"_id":"public/categories/android/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098628},{"_id":"public/tags/Service/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098628},{"_id":"public/tags/Android/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098628},{"_id":"public/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098628},{"_id":"public/tags/shadowsocks/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098628},{"_id":"public/tags/翻墙/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098628},{"_id":"public/tags/Andorid/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098628},{"_id":"public/tags/ndk/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098628},{"_id":"public/tags/so/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098628},{"_id":"public/tags/a/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098629},{"_id":"public/tags/vpn/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098629},{"_id":"public/tags/驱蚊-life/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098629},{"_id":"public/tags/ios/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098629},{"_id":"public/tags/迅雷/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098629},{"_id":"public/tags/centos/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098629},{"_id":"public/tags/het/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098632},{"_id":"public/tags/智能家居/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098632},{"_id":"public/tags/okhttp/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098632},{"_id":"public/tags/android/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098632},{"_id":"public/tags/喜马拉雅/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522752098632},{"_id":"public/2016/05/11/public-bind/values.png","hash":"3d2c4b32a35eb029db4186ca4c6fe0be78fb0045","modified":1522752098632},{"_id":"public/2016/05/11/android-ndk-so-a/img1.png","hash":"457306b822a7249d8f04d6a48dc3ef2ec8ef3fa3","modified":1522752098632},{"_id":"public/2016/05/11/public-bind/bouding.png","hash":"40b21316d9725e689c00de297e44e1ef9a8a77fa","modified":1522752098632},{"_id":"public/2016/05/11/public-bind/failed.png","hash":"5b66b54ce7a12a2ef3381de5fc2555584842cea7","modified":1522752098632},{"_id":"public/2016/05/11/public-bind/loading.png","hash":"1a8769e46ce6c82012ab97d89df9fa650b24a5e7","modified":1522752098632},{"_id":"public/2016/05/11/public-bind/scanning.png","hash":"4405145707bf19f93fbce6409d1b1b92ad44b2f7","modified":1522752098635},{"_id":"public/2016/05/11/public-bind/droplist.png","hash":"77d1f529286c6c8eb6ca7784ad3ba2e4c8861ace","modified":1522752098635},{"_id":"public/2016/05/11/public-bind/HET-15015A20160510_open.pdf","hash":"340386409bd16722225fc91208dbd6a74724a52f","modified":1522752098672},{"_id":"public/2016/05/11/public-bind/H&TV02_2015-10-14.pdf","hash":"26f8c4bbb23c7a9cae3c40702b613e94ffba1868","modified":1522752098675}],"Category":[{"name":"Service","_id":"cjfjja6p4000264v4rf69p2yy"},{"name":"翻墙","_id":"cjfjja6p9000764v4tm7sttst"},{"name":"NDK","_id":"cjfjja6pa000a64v4217x7346"},{"name":"vpn","_id":"cjfjja6pc000f64v443iqyuk2"},{"name":"生活","_id":"cjfjja6pc000i64v44ibk9946"},{"name":"ios","_id":"cjfjja6pp001564v411l02zqr"},{"name":"迅雷","_id":"cjfjja6pu001964v40llo736e"},{"name":"智能家居","_id":"cjfjja6pv001d64v4o26a0o56"},{"name":"android","_id":"cjfjja6pw001g64v42v6n2oa7"}],"Data":[{"_id":"hint","data":{"new":{"selector":[".menu-reading",".menu-about"]}}},{"_id":"link","data":{"social":{"weibo":"http://weibo.com/","github":"https://github.com/xxl6097","rss":"/atom.xml"},"extern":{"raytaylorism主题作者的技术博客":"http://raytaylorlin.com/","Github地址（测试友情链接）":"https://github.com/xxl6097"}}},{"_id":"about","data":{"avatar":"http://uuxia.cn/image/icon.png","name":"你的大名","tag":"Web前端/Android/Java/C++/技术宅","desc":"在浮躁的世界安安静静地敲代码","skills":{"Javascript":8,"Python":6,"invisible-split-line-1":-1,"Node.js":4},"projects":[{"name":"你的项目A","image":"https://d13yacurqjgara.cloudfront.net/users/138819/screenshots/2578899/dribbble_800x600_01_1x.png","tags":["2016年","项目标签"],"description":"你的项目A的简介","link_text":"网站链接","link":"https://dribbble.com/"},{"name":"你的作品B","image":"https://d13yacurqjgara.cloudfront.net/users/4094/screenshots/2578885/time-lords-drib_1x.jpg","description":"你的作品B的简介","tags":["Github","设计"],"link_text":"Github地址","link":"https://github.com/"}],"reward":["http://uuxia.cn/image/wechat.png","http://uuxia.cn/image/alipay.png"]}},{"_id":"reading","data":{"define":{"readed":"已读","reading":"在读","wanted":"想读"},"contents":{"readed":[{"title":"众妙之门：网站UI设计之道","cover":"http://img3.douban.com/lpic/s23139051.jpg","review":"推荐非UI人士了解UI阅读。","score":"7","doubanLink":"http://book.douban.com/subject/20281463/"},{"title":"JavaScript模式","cover":"http://img5.douban.com/lpic/s11337059.jpg","review":"书很薄，但内容相当实用。","score":"8.5","doubanLink":"http://book.douban.com/subject/11506062/"},{"title":"JavaScript语言精粹","cover":"http://img3.douban.com/lpic/s11373174.jpg","review":"这是一本前端人员的基础书，强烈推荐阅读，而且越早看受益越多！","score":"9.5","doubanLink":"http://book.douban.com/subject/11874748/"}],"reading":[{"title":"网络游戏核心技术与实战","cover":"http://img4.douban.com/lpic/s27881888.jpg","review":"","score":null,"doubanLink":"http://book.douban.com/subject/25850090/"}],"wanted":[{"title":"计算机程序的构造和解释","cover":"http://img4.douban.com/lpic/s1113106.jpg","review":"","score":null,"doubanLink":"http://book.douban.com/subject/1148282/"}]}}}],"Page":[{"title":"关于","layout":"about","_content":"大家好，我是XXX。欢迎来到我的个人技术博客。\n\n这里用markdown写下你的简介，就跟平时写md一样就可以了。","source":"about/index.md","raw":"title: 关于\nlayout: about\n---\n大家好，我是XXX。欢迎来到我的个人技术博客。\n\n这里用markdown写下你的简介，就跟平时写md一样就可以了。","date":"2018-04-03T07:05:42.978Z","updated":"2018-04-03T07:05:42.978Z","path":"about/index.html","comments":1,"_id":"cjfjja6pl001264v4duxmb9ps","content":"<p>大家好，我是XXX。欢迎来到我的个人技术博客。</p>\n<p>这里用markdown写下你的简介，就跟平时写md一样就可以了。</p>\n","site":{"data":{"hint":{"new":{"selector":[".menu-reading",".menu-about"]}},"link":{"social":{"weibo":"http://weibo.com/","github":"https://github.com/xxl6097","rss":"/atom.xml"},"extern":{"raytaylorism主题作者的技术博客":"http://raytaylorlin.com/","Github地址（测试友情链接）":"https://github.com/xxl6097"}},"about":{"avatar":"http://uuxia.cn/image/icon.png","name":"你的大名","tag":"Web前端/Android/Java/C++/技术宅","desc":"在浮躁的世界安安静静地敲代码","skills":{"Javascript":8,"Python":6,"invisible-split-line-1":-1,"Node.js":4},"projects":[{"name":"你的项目A","image":"https://d13yacurqjgara.cloudfront.net/users/138819/screenshots/2578899/dribbble_800x600_01_1x.png","tags":["2016年","项目标签"],"description":"你的项目A的简介","link_text":"网站链接","link":"https://dribbble.com/"},{"name":"你的作品B","image":"https://d13yacurqjgara.cloudfront.net/users/4094/screenshots/2578885/time-lords-drib_1x.jpg","description":"你的作品B的简介","tags":["Github","设计"],"link_text":"Github地址","link":"https://github.com/"}],"reward":["http://uuxia.cn/image/wechat.png","http://uuxia.cn/image/alipay.png"]},"reading":{"define":{"readed":"已读","reading":"在读","wanted":"想读"},"contents":{"readed":[{"title":"众妙之门：网站UI设计之道","cover":"http://img3.douban.com/lpic/s23139051.jpg","review":"推荐非UI人士了解UI阅读。","score":"7","doubanLink":"http://book.douban.com/subject/20281463/"},{"title":"JavaScript模式","cover":"http://img5.douban.com/lpic/s11337059.jpg","review":"书很薄，但内容相当实用。","score":"8.5","doubanLink":"http://book.douban.com/subject/11506062/"},{"title":"JavaScript语言精粹","cover":"http://img3.douban.com/lpic/s11373174.jpg","review":"这是一本前端人员的基础书，强烈推荐阅读，而且越早看受益越多！","score":"9.5","doubanLink":"http://book.douban.com/subject/11874748/"}],"reading":[{"title":"网络游戏核心技术与实战","cover":"http://img4.douban.com/lpic/s27881888.jpg","review":"","score":null,"doubanLink":"http://book.douban.com/subject/25850090/"}],"wanted":[{"title":"计算机程序的构造和解释","cover":"http://img4.douban.com/lpic/s1113106.jpg","review":"","score":null,"doubanLink":"http://book.douban.com/subject/1148282/"}]}}}},"excerpt":"","more":"<p>大家好，我是XXX。欢迎来到我的个人技术博客。</p>\n<p>这里用markdown写下你的简介，就跟平时写md一样就可以了。</p>\n"},{"title":"读书","layout":"reading","_content":"","source":"reading/index.md","raw":"title: 读书\nlayout: reading\n---\n","date":"2018-04-03T07:05:42.978Z","updated":"2018-04-03T07:05:42.978Z","path":"reading/index.html","comments":1,"_id":"cjfjja6po001464v4dz3r25pv","content":"","site":{"data":{"hint":{"new":{"selector":[".menu-reading",".menu-about"]}},"link":{"social":{"weibo":"http://weibo.com/","github":"https://github.com/xxl6097","rss":"/atom.xml"},"extern":{"raytaylorism主题作者的技术博客":"http://raytaylorlin.com/","Github地址（测试友情链接）":"https://github.com/xxl6097"}},"about":{"avatar":"http://uuxia.cn/image/icon.png","name":"你的大名","tag":"Web前端/Android/Java/C++/技术宅","desc":"在浮躁的世界安安静静地敲代码","skills":{"Javascript":8,"Python":6,"invisible-split-line-1":-1,"Node.js":4},"projects":[{"name":"你的项目A","image":"https://d13yacurqjgara.cloudfront.net/users/138819/screenshots/2578899/dribbble_800x600_01_1x.png","tags":["2016年","项目标签"],"description":"你的项目A的简介","link_text":"网站链接","link":"https://dribbble.com/"},{"name":"你的作品B","image":"https://d13yacurqjgara.cloudfront.net/users/4094/screenshots/2578885/time-lords-drib_1x.jpg","description":"你的作品B的简介","tags":["Github","设计"],"link_text":"Github地址","link":"https://github.com/"}],"reward":["http://uuxia.cn/image/wechat.png","http://uuxia.cn/image/alipay.png"]},"reading":{"define":{"readed":"已读","reading":"在读","wanted":"想读"},"contents":{"readed":[{"title":"众妙之门：网站UI设计之道","cover":"http://img3.douban.com/lpic/s23139051.jpg","review":"推荐非UI人士了解UI阅读。","score":"7","doubanLink":"http://book.douban.com/subject/20281463/"},{"title":"JavaScript模式","cover":"http://img5.douban.com/lpic/s11337059.jpg","review":"书很薄，但内容相当实用。","score":"8.5","doubanLink":"http://book.douban.com/subject/11506062/"},{"title":"JavaScript语言精粹","cover":"http://img3.douban.com/lpic/s11373174.jpg","review":"这是一本前端人员的基础书，强烈推荐阅读，而且越早看受益越多！","score":"9.5","doubanLink":"http://book.douban.com/subject/11874748/"}],"reading":[{"title":"网络游戏核心技术与实战","cover":"http://img4.douban.com/lpic/s27881888.jpg","review":"","score":null,"doubanLink":"http://book.douban.com/subject/25850090/"}],"wanted":[{"title":"计算机程序的构造和解释","cover":"http://img4.douban.com/lpic/s1113106.jpg","review":"","score":null,"doubanLink":"http://book.douban.com/subject/1148282/"}]}}}},"excerpt":"","more":""}],"Post":[{"title":"Android孤儿进程防止清理","date":"2016-05-08T17:47:57.000Z","_content":"孤儿进程:因为父进程先退出而导致一个子进程被init进程收养的进程为孤儿进程\n<!--more-->\n孤儿进程:因为父进程先退出而导致一个子进程被init进程收养的进程为孤儿进程。\n---\n\n\n因此，可以通过创建孤儿进程，改变native进程的父进程，达到防止系统清理。\n\n关键代码实现:\n\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\nint main()\n{\n   pid_t child_pid;\n   child_pid=fork();\n   if(child_pid<0)\n   {\n     perror(\"fork error\");\n     exit(EXIT_FAILURE);\n   }\n   if(child_pid==0)//子进程处理 事务\n   {\n      while(1)\n      {\n         printf(\"hello world\\n\");\n         sleep(1);\n      }\n      return 0;\n   }else\n   {\n     printf(\"father bye byte\\n\");\n     exit(EXIT_SUCCESS);\n   }\n}\n```\n","source":"_posts/deamon.md","raw":"---\ntitle: Android孤儿进程防止清理\ndate: 2016-05-09 01:47:57\ntags: [Android,Service]\ncategories: Service\n---\n孤儿进程:因为父进程先退出而导致一个子进程被init进程收养的进程为孤儿进程\n<!--more-->\n孤儿进程:因为父进程先退出而导致一个子进程被init进程收养的进程为孤儿进程。\n---\n\n\n因此，可以通过创建孤儿进程，改变native进程的父进程，达到防止系统清理。\n\n关键代码实现:\n\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\nint main()\n{\n   pid_t child_pid;\n   child_pid=fork();\n   if(child_pid<0)\n   {\n     perror(\"fork error\");\n     exit(EXIT_FAILURE);\n   }\n   if(child_pid==0)//子进程处理 事务\n   {\n      while(1)\n      {\n         printf(\"hello world\\n\");\n         sleep(1);\n      }\n      return 0;\n   }else\n   {\n     printf(\"father bye byte\\n\");\n     exit(EXIT_SUCCESS);\n   }\n}\n```\n","slug":"deamon","published":1,"updated":"2018-04-03T07:05:42.831Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfjja6ox000064v48y819z1y","content":"<p>孤儿进程:因为父进程先退出而导致一个子进程被init进程收养的进程为孤儿进程<br><a id=\"more\"></a></p>\n<h2 id=\"孤儿进程-因为父进程先退出而导致一个子进程被init进程收养的进程为孤儿进程。\"><a href=\"#孤儿进程-因为父进程先退出而导致一个子进程被init进程收养的进程为孤儿进程。\" class=\"headerlink\" title=\"孤儿进程:因为父进程先退出而导致一个子进程被init进程收养的进程为孤儿进程。\"></a>孤儿进程:因为父进程先退出而导致一个子进程被init进程收养的进程为孤儿进程。</h2><p>因此，可以通过创建孤儿进程，改变native进程的父进程，达到防止系统清理。</p>\n<p>关键代码实现:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   pid_t child_pid;</span><br><span class=\"line\">   child_pid=fork();</span><br><span class=\"line\">   if(child_pid&lt;0)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     perror(&quot;fork error&quot;);</span><br><span class=\"line\">     exit(EXIT_FAILURE);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   if(child_pid==0)//子进程处理 事务</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      while(1)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         printf(&quot;hello world\\n&quot;);</span><br><span class=\"line\">         sleep(1);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return 0;</span><br><span class=\"line\">   &#125;else</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     printf(&quot;father bye byte\\n&quot;);</span><br><span class=\"line\">     exit(EXIT_SUCCESS);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"hint":{"new":{"selector":[".menu-reading",".menu-about"]}},"link":{"social":{"weibo":"http://weibo.com/","github":"https://github.com/xxl6097","rss":"/atom.xml"},"extern":{"raytaylorism主题作者的技术博客":"http://raytaylorlin.com/","Github地址（测试友情链接）":"https://github.com/xxl6097"}},"about":{"avatar":"http://uuxia.cn/image/icon.png","name":"你的大名","tag":"Web前端/Android/Java/C++/技术宅","desc":"在浮躁的世界安安静静地敲代码","skills":{"Javascript":8,"Python":6,"invisible-split-line-1":-1,"Node.js":4},"projects":[{"name":"你的项目A","image":"https://d13yacurqjgara.cloudfront.net/users/138819/screenshots/2578899/dribbble_800x600_01_1x.png","tags":["2016年","项目标签"],"description":"你的项目A的简介","link_text":"网站链接","link":"https://dribbble.com/"},{"name":"你的作品B","image":"https://d13yacurqjgara.cloudfront.net/users/4094/screenshots/2578885/time-lords-drib_1x.jpg","description":"你的作品B的简介","tags":["Github","设计"],"link_text":"Github地址","link":"https://github.com/"}],"reward":["http://uuxia.cn/image/wechat.png","http://uuxia.cn/image/alipay.png"]},"reading":{"define":{"readed":"已读","reading":"在读","wanted":"想读"},"contents":{"readed":[{"title":"众妙之门：网站UI设计之道","cover":"http://img3.douban.com/lpic/s23139051.jpg","review":"推荐非UI人士了解UI阅读。","score":"7","doubanLink":"http://book.douban.com/subject/20281463/"},{"title":"JavaScript模式","cover":"http://img5.douban.com/lpic/s11337059.jpg","review":"书很薄，但内容相当实用。","score":"8.5","doubanLink":"http://book.douban.com/subject/11506062/"},{"title":"JavaScript语言精粹","cover":"http://img3.douban.com/lpic/s11373174.jpg","review":"这是一本前端人员的基础书，强烈推荐阅读，而且越早看受益越多！","score":"9.5","doubanLink":"http://book.douban.com/subject/11874748/"}],"reading":[{"title":"网络游戏核心技术与实战","cover":"http://img4.douban.com/lpic/s27881888.jpg","review":"","score":null,"doubanLink":"http://book.douban.com/subject/25850090/"}],"wanted":[{"title":"计算机程序的构造和解释","cover":"http://img4.douban.com/lpic/s1113106.jpg","review":"","score":null,"doubanLink":"http://book.douban.com/subject/1148282/"}]}}}},"excerpt":"<p>孤儿进程:因为父进程先退出而导致一个子进程被init进程收养的进程为孤儿进程<br></p>","more":"<p></p>\n<h2 id=\"孤儿进程-因为父进程先退出而导致一个子进程被init进程收养的进程为孤儿进程。\"><a href=\"#孤儿进程-因为父进程先退出而导致一个子进程被init进程收养的进程为孤儿进程。\" class=\"headerlink\" title=\"孤儿进程:因为父进程先退出而导致一个子进程被init进程收养的进程为孤儿进程。\"></a>孤儿进程:因为父进程先退出而导致一个子进程被init进程收养的进程为孤儿进程。</h2><p>因此，可以通过创建孤儿进程，改变native进程的父进程，达到防止系统清理。</p>\n<p>关键代码实现:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   pid_t child_pid;</span><br><span class=\"line\">   child_pid=fork();</span><br><span class=\"line\">   if(child_pid&lt;0)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     perror(&quot;fork error&quot;);</span><br><span class=\"line\">     exit(EXIT_FAILURE);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   if(child_pid==0)//子进程处理 事务</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      while(1)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         printf(&quot;hello world\\n&quot;);</span><br><span class=\"line\">         sleep(1);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return 0;</span><br><span class=\"line\">   &#125;else</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     printf(&quot;father bye byte\\n&quot;);</span><br><span class=\"line\">     exit(EXIT_SUCCESS);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CentOS下shadowsocks-libev一键安装脚本","date":"2016-05-10T21:23:03.000Z","_content":"一键安装 libev 版的 shadowsocks 最新版本。该版本的特点是内存占用小（600k左右），低 CPU 消耗，甚至可以安装在基于 OpenWRT 的路由器上。\n友情提示：如果你有问题，请先参考这篇《[Shadowsocks Troubleshooting](https://teddysun.com/399.html)》后再问。\n<!--more-->\n## 系统要求\n系统支持：CentOS 32或64位\n内存要求：≥128M\n日期：2015年08月01日\n\n## 本脚本适用环境：\n系统支持：CentOS 32或64位\n内存要求：≥128M\n日期：2015年08月01日\n\n## 关于本脚本：\n一键安装 libev 版的 shadowsocks 最新版本。该版本的特点是内存占用小（600k左右），低 CPU 消耗，甚至可以安装在基于 OpenWRT 的路由器上。\n友情提示：如果你有问题，请先参考这篇《[Shadowsocks Troubleshooting](https://teddysun.com/399.html)》后再问。\n\n\n## 默认配置：\n服务器端口：自己设定（如不设定，默认为 8989）\n客户端端口：1080\n密码：自己设定（如不设定，默认为teddysun.com）\n\n## 客户端下载：\nhttp://sourceforge.net/projects/shadowsocksgui/files/dist/\n\n## 使用方法：\n使用root用户登录，运行以下命令：\n\n 1. 获取安装文件\n\n```\nwget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-libev.sh\n```\n\n 2. 设置执行权限\n\n```\nchmod +x shadowsocks-libev.sh\n```\n\n 3. 按照命令\n\n```\n./shadowsocks-libev.sh 2>&1 | tee shadowsocks-libev.log\n```\n***安装完成后，脚本提示如下：***\n\n```\nCongratulations, shadowsocks-libev install completed!\nYour Server IP:your_server_ip\nYour Server Port:your_server_port\nYour Password:your_password\nYour Local IP:127.0.0.1\nYour Local Port:1080\nYour Encryption Method:aes-256-cfb\n\nWelcome to visit:https://teddysun.com/357.html\nEnjoy it!\n```\n\n 4. 安装完成后即已后台启动 shadowsocks ，运行\n\n```\nps -ef | grep ss-server | grep -v ps | grep -v grep\n```\n\n 5. 使用命令\n\n> 启动：/etc/init.d/shadowsocks start\n停止：/etc/init.d/shadowsocks stop\n重启：/etc/init.d/shadowsocks restart\n查看状态：/etc/init.d/shadowsocks status\n\n 6. 卸载方法\n\n```\n./shadowsocks-libev.sh uninstall\n```\n\n 7. 更多版本 shadowsocks 安装\n\n[ShadowsocksR 版一键安装脚本（CentOS，Debian，Ubuntu）](https://shadowsocks.be/9.html)\n[Shadowsocks Python 版一键安装脚本（CentOS，Debian，Ubuntu）](https://teddysun.com/342.html)\n[Debian 下 Shadowsocks-libev 一键安装脚本](https://teddysun.com/358.html)\n[Shadowsocks-go 一键安装脚本（CentOS，Debian，Ubuntu）](https://teddysun.com/392.html)\n\n更新说明（2015 年 08 月 01 日）：\n1、新增自定义服务器端口功能（如不设定，默认为 8989）；\n更新说明（2015 年 04 月 30 日）：\n1、本脚本会始终安装最新版的 Shadowsocks；\n2、修改配置文件 /etc/shadowsocks-libev/config.json 同时启用 IPv4 与 IPv6 支持：\n```\n{\n    \"server\":[\"[::0]\",\"0.0.0.0\"],\n    \"server_port\":your_server_port,\n    \"local_address\":\"127.0.0.1\",\n    \"local_port\":1080,\n    \"password\":\"your_password\",\n    \"timeout\":600,\n    \"method\":\"aes-256-cfb\"\n}\n```\n3、Shadowsocks libev 版不能通过修改配置文件来多端口（只能开启多进程），如果你需要多端口请安装 Python 或 Go 版；\n\n特别说明：\n1、已安装旧版本的 shadowsocks 需要升级的话，需下载本脚本的最新版，运行卸载命令\n\n>./shadowsocks-libev.sh uninstall \n然后，再次执行本脚本即可安装最新版。\n\n参考链接：\nhttps://github.com/madeye/shadowsocks-libev\n","source":"_posts/installshadowsocks.md","raw":"---\ntitle: CentOS下shadowsocks-libev一键安装脚本\ndate: 2016-05-11 05:23:03\ntags: [shadowsocks,翻墙]\ncategories: 翻墙\n---\n一键安装 libev 版的 shadowsocks 最新版本。该版本的特点是内存占用小（600k左右），低 CPU 消耗，甚至可以安装在基于 OpenWRT 的路由器上。\n友情提示：如果你有问题，请先参考这篇《[Shadowsocks Troubleshooting](https://teddysun.com/399.html)》后再问。\n<!--more-->\n## 系统要求\n系统支持：CentOS 32或64位\n内存要求：≥128M\n日期：2015年08月01日\n\n## 本脚本适用环境：\n系统支持：CentOS 32或64位\n内存要求：≥128M\n日期：2015年08月01日\n\n## 关于本脚本：\n一键安装 libev 版的 shadowsocks 最新版本。该版本的特点是内存占用小（600k左右），低 CPU 消耗，甚至可以安装在基于 OpenWRT 的路由器上。\n友情提示：如果你有问题，请先参考这篇《[Shadowsocks Troubleshooting](https://teddysun.com/399.html)》后再问。\n\n\n## 默认配置：\n服务器端口：自己设定（如不设定，默认为 8989）\n客户端端口：1080\n密码：自己设定（如不设定，默认为teddysun.com）\n\n## 客户端下载：\nhttp://sourceforge.net/projects/shadowsocksgui/files/dist/\n\n## 使用方法：\n使用root用户登录，运行以下命令：\n\n 1. 获取安装文件\n\n```\nwget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-libev.sh\n```\n\n 2. 设置执行权限\n\n```\nchmod +x shadowsocks-libev.sh\n```\n\n 3. 按照命令\n\n```\n./shadowsocks-libev.sh 2>&1 | tee shadowsocks-libev.log\n```\n***安装完成后，脚本提示如下：***\n\n```\nCongratulations, shadowsocks-libev install completed!\nYour Server IP:your_server_ip\nYour Server Port:your_server_port\nYour Password:your_password\nYour Local IP:127.0.0.1\nYour Local Port:1080\nYour Encryption Method:aes-256-cfb\n\nWelcome to visit:https://teddysun.com/357.html\nEnjoy it!\n```\n\n 4. 安装完成后即已后台启动 shadowsocks ，运行\n\n```\nps -ef | grep ss-server | grep -v ps | grep -v grep\n```\n\n 5. 使用命令\n\n> 启动：/etc/init.d/shadowsocks start\n停止：/etc/init.d/shadowsocks stop\n重启：/etc/init.d/shadowsocks restart\n查看状态：/etc/init.d/shadowsocks status\n\n 6. 卸载方法\n\n```\n./shadowsocks-libev.sh uninstall\n```\n\n 7. 更多版本 shadowsocks 安装\n\n[ShadowsocksR 版一键安装脚本（CentOS，Debian，Ubuntu）](https://shadowsocks.be/9.html)\n[Shadowsocks Python 版一键安装脚本（CentOS，Debian，Ubuntu）](https://teddysun.com/342.html)\n[Debian 下 Shadowsocks-libev 一键安装脚本](https://teddysun.com/358.html)\n[Shadowsocks-go 一键安装脚本（CentOS，Debian，Ubuntu）](https://teddysun.com/392.html)\n\n更新说明（2015 年 08 月 01 日）：\n1、新增自定义服务器端口功能（如不设定，默认为 8989）；\n更新说明（2015 年 04 月 30 日）：\n1、本脚本会始终安装最新版的 Shadowsocks；\n2、修改配置文件 /etc/shadowsocks-libev/config.json 同时启用 IPv4 与 IPv6 支持：\n```\n{\n    \"server\":[\"[::0]\",\"0.0.0.0\"],\n    \"server_port\":your_server_port,\n    \"local_address\":\"127.0.0.1\",\n    \"local_port\":1080,\n    \"password\":\"your_password\",\n    \"timeout\":600,\n    \"method\":\"aes-256-cfb\"\n}\n```\n3、Shadowsocks libev 版不能通过修改配置文件来多端口（只能开启多进程），如果你需要多端口请安装 Python 或 Go 版；\n\n特别说明：\n1、已安装旧版本的 shadowsocks 需要升级的话，需下载本脚本的最新版，运行卸载命令\n\n>./shadowsocks-libev.sh uninstall \n然后，再次执行本脚本即可安装最新版。\n\n参考链接：\nhttps://github.com/madeye/shadowsocks-libev\n","slug":"installshadowsocks","published":1,"updated":"2018-04-03T07:05:42.841Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfjja6p2000164v4tzvq7l7p","content":"<p>一键安装 libev 版的 shadowsocks 最新版本。该版本的特点是内存占用小（600k左右），低 CPU 消耗，甚至可以安装在基于 OpenWRT 的路由器上。<br>友情提示：如果你有问题，请先参考这篇《<a href=\"https://teddysun.com/399.html\" target=\"_blank\" rel=\"noopener\">Shadowsocks Troubleshooting</a>》后再问。<br><a id=\"more\"></a></p>\n<h2 id=\"系统要求\"><a href=\"#系统要求\" class=\"headerlink\" title=\"系统要求\"></a>系统要求</h2><p>系统支持：CentOS 32或64位<br>内存要求：≥128M<br>日期：2015年08月01日</p>\n<h2 id=\"本脚本适用环境：\"><a href=\"#本脚本适用环境：\" class=\"headerlink\" title=\"本脚本适用环境：\"></a>本脚本适用环境：</h2><p>系统支持：CentOS 32或64位<br>内存要求：≥128M<br>日期：2015年08月01日</p>\n<h2 id=\"关于本脚本：\"><a href=\"#关于本脚本：\" class=\"headerlink\" title=\"关于本脚本：\"></a>关于本脚本：</h2><p>一键安装 libev 版的 shadowsocks 最新版本。该版本的特点是内存占用小（600k左右），低 CPU 消耗，甚至可以安装在基于 OpenWRT 的路由器上。<br>友情提示：如果你有问题，请先参考这篇《<a href=\"https://teddysun.com/399.html\" target=\"_blank\" rel=\"noopener\">Shadowsocks Troubleshooting</a>》后再问。</p>\n<h2 id=\"默认配置：\"><a href=\"#默认配置：\" class=\"headerlink\" title=\"默认配置：\"></a>默认配置：</h2><p>服务器端口：自己设定（如不设定，默认为 8989）<br>客户端端口：1080<br>密码：自己设定（如不设定，默认为teddysun.com）</p>\n<h2 id=\"客户端下载：\"><a href=\"#客户端下载：\" class=\"headerlink\" title=\"客户端下载：\"></a>客户端下载：</h2><p><a href=\"http://sourceforge.net/projects/shadowsocksgui/files/dist/\" target=\"_blank\" rel=\"noopener\">http://sourceforge.net/projects/shadowsocksgui/files/dist/</a></p>\n<h2 id=\"使用方法：\"><a href=\"#使用方法：\" class=\"headerlink\" title=\"使用方法：\"></a>使用方法：</h2><p>使用root用户登录，运行以下命令：</p>\n<ol>\n<li>获取安装文件</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-libev.sh</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>设置执行权限</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x shadowsocks-libev.sh</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>按照命令</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./shadowsocks-libev.sh 2&gt;&amp;1 | tee shadowsocks-libev.log</span><br></pre></td></tr></table></figure>\n<p><strong><em>安装完成后，脚本提示如下：</em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Congratulations, shadowsocks-libev install completed!</span><br><span class=\"line\">Your Server IP:your_server_ip</span><br><span class=\"line\">Your Server Port:your_server_port</span><br><span class=\"line\">Your Password:your_password</span><br><span class=\"line\">Your Local IP:127.0.0.1</span><br><span class=\"line\">Your Local Port:1080</span><br><span class=\"line\">Your Encryption Method:aes-256-cfb</span><br><span class=\"line\"></span><br><span class=\"line\">Welcome to visit:https://teddysun.com/357.html</span><br><span class=\"line\">Enjoy it!</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>安装完成后即已后台启动 shadowsocks ，运行</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef | grep ss-server | grep -v ps | grep -v grep</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>使用命令</li>\n</ol>\n<blockquote>\n<p>启动：/etc/init.d/shadowsocks start<br>停止：/etc/init.d/shadowsocks stop<br>重启：/etc/init.d/shadowsocks restart<br>查看状态：/etc/init.d/shadowsocks status</p>\n</blockquote>\n<ol start=\"6\">\n<li>卸载方法</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./shadowsocks-libev.sh uninstall</span><br></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>更多版本 shadowsocks 安装</li>\n</ol>\n<p><a href=\"https://shadowsocks.be/9.html\" target=\"_blank\" rel=\"noopener\">ShadowsocksR 版一键安装脚本（CentOS，Debian，Ubuntu）</a><br><a href=\"https://teddysun.com/342.html\" target=\"_blank\" rel=\"noopener\">Shadowsocks Python 版一键安装脚本（CentOS，Debian，Ubuntu）</a><br><a href=\"https://teddysun.com/358.html\" target=\"_blank\" rel=\"noopener\">Debian 下 Shadowsocks-libev 一键安装脚本</a><br><a href=\"https://teddysun.com/392.html\" target=\"_blank\" rel=\"noopener\">Shadowsocks-go 一键安装脚本（CentOS，Debian，Ubuntu）</a></p>\n<p>更新说明（2015 年 08 月 01 日）：<br>1、新增自定义服务器端口功能（如不设定，默认为 8989）；<br>更新说明（2015 年 04 月 30 日）：<br>1、本脚本会始终安装最新版的 Shadowsocks；<br>2、修改配置文件 /etc/shadowsocks-libev/config.json 同时启用 IPv4 与 IPv6 支持：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;server&quot;:[&quot;[::0]&quot;,&quot;0.0.0.0&quot;],</span><br><span class=\"line\">    &quot;server_port&quot;:your_server_port,</span><br><span class=\"line\">    &quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class=\"line\">    &quot;local_port&quot;:1080,</span><br><span class=\"line\">    &quot;password&quot;:&quot;your_password&quot;,</span><br><span class=\"line\">    &quot;timeout&quot;:600,</span><br><span class=\"line\">    &quot;method&quot;:&quot;aes-256-cfb&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>3、Shadowsocks libev 版不能通过修改配置文件来多端口（只能开启多进程），如果你需要多端口请安装 Python 或 Go 版；</p>\n<p>特别说明：<br>1、已安装旧版本的 shadowsocks 需要升级的话，需下载本脚本的最新版，运行卸载命令</p>\n<blockquote>\n<p>./shadowsocks-libev.sh uninstall<br>然后，再次执行本脚本即可安装最新版。</p>\n</blockquote>\n<p>参考链接：<br><a href=\"https://github.com/madeye/shadowsocks-libev\" target=\"_blank\" rel=\"noopener\">https://github.com/madeye/shadowsocks-libev</a></p>\n","site":{"data":{"hint":{"new":{"selector":[".menu-reading",".menu-about"]}},"link":{"social":{"weibo":"http://weibo.com/","github":"https://github.com/xxl6097","rss":"/atom.xml"},"extern":{"raytaylorism主题作者的技术博客":"http://raytaylorlin.com/","Github地址（测试友情链接）":"https://github.com/xxl6097"}},"about":{"avatar":"http://uuxia.cn/image/icon.png","name":"你的大名","tag":"Web前端/Android/Java/C++/技术宅","desc":"在浮躁的世界安安静静地敲代码","skills":{"Javascript":8,"Python":6,"invisible-split-line-1":-1,"Node.js":4},"projects":[{"name":"你的项目A","image":"https://d13yacurqjgara.cloudfront.net/users/138819/screenshots/2578899/dribbble_800x600_01_1x.png","tags":["2016年","项目标签"],"description":"你的项目A的简介","link_text":"网站链接","link":"https://dribbble.com/"},{"name":"你的作品B","image":"https://d13yacurqjgara.cloudfront.net/users/4094/screenshots/2578885/time-lords-drib_1x.jpg","description":"你的作品B的简介","tags":["Github","设计"],"link_text":"Github地址","link":"https://github.com/"}],"reward":["http://uuxia.cn/image/wechat.png","http://uuxia.cn/image/alipay.png"]},"reading":{"define":{"readed":"已读","reading":"在读","wanted":"想读"},"contents":{"readed":[{"title":"众妙之门：网站UI设计之道","cover":"http://img3.douban.com/lpic/s23139051.jpg","review":"推荐非UI人士了解UI阅读。","score":"7","doubanLink":"http://book.douban.com/subject/20281463/"},{"title":"JavaScript模式","cover":"http://img5.douban.com/lpic/s11337059.jpg","review":"书很薄，但内容相当实用。","score":"8.5","doubanLink":"http://book.douban.com/subject/11506062/"},{"title":"JavaScript语言精粹","cover":"http://img3.douban.com/lpic/s11373174.jpg","review":"这是一本前端人员的基础书，强烈推荐阅读，而且越早看受益越多！","score":"9.5","doubanLink":"http://book.douban.com/subject/11874748/"}],"reading":[{"title":"网络游戏核心技术与实战","cover":"http://img4.douban.com/lpic/s27881888.jpg","review":"","score":null,"doubanLink":"http://book.douban.com/subject/25850090/"}],"wanted":[{"title":"计算机程序的构造和解释","cover":"http://img4.douban.com/lpic/s1113106.jpg","review":"","score":null,"doubanLink":"http://book.douban.com/subject/1148282/"}]}}}},"excerpt":"<p>一键安装 libev 版的 shadowsocks 最新版本。该版本的特点是内存占用小（600k左右），低 CPU 消耗，甚至可以安装在基于 OpenWRT 的路由器上。<br>友情提示：如果你有问题，请先参考这篇《<a href=\"https://teddysun.com/399.html\" target=\"_blank\" rel=\"noopener\">Shadowsocks Troubleshooting</a>》后再问。<br></p>","more":"<p></p>\n<h2 id=\"系统要求\"><a href=\"#系统要求\" class=\"headerlink\" title=\"系统要求\"></a>系统要求</h2><p>系统支持：CentOS 32或64位<br>内存要求：≥128M<br>日期：2015年08月01日</p>\n<h2 id=\"本脚本适用环境：\"><a href=\"#本脚本适用环境：\" class=\"headerlink\" title=\"本脚本适用环境：\"></a>本脚本适用环境：</h2><p>系统支持：CentOS 32或64位<br>内存要求：≥128M<br>日期：2015年08月01日</p>\n<h2 id=\"关于本脚本：\"><a href=\"#关于本脚本：\" class=\"headerlink\" title=\"关于本脚本：\"></a>关于本脚本：</h2><p>一键安装 libev 版的 shadowsocks 最新版本。该版本的特点是内存占用小（600k左右），低 CPU 消耗，甚至可以安装在基于 OpenWRT 的路由器上。<br>友情提示：如果你有问题，请先参考这篇《<a href=\"https://teddysun.com/399.html\" target=\"_blank\" rel=\"noopener\">Shadowsocks Troubleshooting</a>》后再问。</p>\n<h2 id=\"默认配置：\"><a href=\"#默认配置：\" class=\"headerlink\" title=\"默认配置：\"></a>默认配置：</h2><p>服务器端口：自己设定（如不设定，默认为 8989）<br>客户端端口：1080<br>密码：自己设定（如不设定，默认为teddysun.com）</p>\n<h2 id=\"客户端下载：\"><a href=\"#客户端下载：\" class=\"headerlink\" title=\"客户端下载：\"></a>客户端下载：</h2><p><a href=\"http://sourceforge.net/projects/shadowsocksgui/files/dist/\" target=\"_blank\" rel=\"noopener\">http://sourceforge.net/projects/shadowsocksgui/files/dist/</a></p>\n<h2 id=\"使用方法：\"><a href=\"#使用方法：\" class=\"headerlink\" title=\"使用方法：\"></a>使用方法：</h2><p>使用root用户登录，运行以下命令：</p>\n<ol>\n<li>获取安装文件</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-libev.sh</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>设置执行权限</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x shadowsocks-libev.sh</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>按照命令</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./shadowsocks-libev.sh 2&gt;&amp;1 | tee shadowsocks-libev.log</span><br></pre></td></tr></table></figure>\n<p><strong><em>安装完成后，脚本提示如下：</em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Congratulations, shadowsocks-libev install completed!</span><br><span class=\"line\">Your Server IP:your_server_ip</span><br><span class=\"line\">Your Server Port:your_server_port</span><br><span class=\"line\">Your Password:your_password</span><br><span class=\"line\">Your Local IP:127.0.0.1</span><br><span class=\"line\">Your Local Port:1080</span><br><span class=\"line\">Your Encryption Method:aes-256-cfb</span><br><span class=\"line\"></span><br><span class=\"line\">Welcome to visit:https://teddysun.com/357.html</span><br><span class=\"line\">Enjoy it!</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>安装完成后即已后台启动 shadowsocks ，运行</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef | grep ss-server | grep -v ps | grep -v grep</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>使用命令</li>\n</ol>\n<blockquote>\n<p>启动：/etc/init.d/shadowsocks start<br>停止：/etc/init.d/shadowsocks stop<br>重启：/etc/init.d/shadowsocks restart<br>查看状态：/etc/init.d/shadowsocks status</p>\n</blockquote>\n<ol start=\"6\">\n<li>卸载方法</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./shadowsocks-libev.sh uninstall</span><br></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>更多版本 shadowsocks 安装</li>\n</ol>\n<p><a href=\"https://shadowsocks.be/9.html\" target=\"_blank\" rel=\"noopener\">ShadowsocksR 版一键安装脚本（CentOS，Debian，Ubuntu）</a><br><a href=\"https://teddysun.com/342.html\" target=\"_blank\" rel=\"noopener\">Shadowsocks Python 版一键安装脚本（CentOS，Debian，Ubuntu）</a><br><a href=\"https://teddysun.com/358.html\" target=\"_blank\" rel=\"noopener\">Debian 下 Shadowsocks-libev 一键安装脚本</a><br><a href=\"https://teddysun.com/392.html\" target=\"_blank\" rel=\"noopener\">Shadowsocks-go 一键安装脚本（CentOS，Debian，Ubuntu）</a></p>\n<p>更新说明（2015 年 08 月 01 日）：<br>1、新增自定义服务器端口功能（如不设定，默认为 8989）；<br>更新说明（2015 年 04 月 30 日）：<br>1、本脚本会始终安装最新版的 Shadowsocks；<br>2、修改配置文件 /etc/shadowsocks-libev/config.json 同时启用 IPv4 与 IPv6 支持：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;server&quot;:[&quot;[::0]&quot;,&quot;0.0.0.0&quot;],</span><br><span class=\"line\">    &quot;server_port&quot;:your_server_port,</span><br><span class=\"line\">    &quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class=\"line\">    &quot;local_port&quot;:1080,</span><br><span class=\"line\">    &quot;password&quot;:&quot;your_password&quot;,</span><br><span class=\"line\">    &quot;timeout&quot;:600,</span><br><span class=\"line\">    &quot;method&quot;:&quot;aes-256-cfb&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>3、Shadowsocks libev 版不能通过修改配置文件来多端口（只能开启多进程），如果你需要多端口请安装 Python 或 Go 版；</p>\n<p>特别说明：<br>1、已安装旧版本的 shadowsocks 需要升级的话，需下载本脚本的最新版，运行卸载命令</p>\n<blockquote>\n<p>./shadowsocks-libev.sh uninstall<br>然后，再次执行本脚本即可安装最新版。</p>\n</blockquote>\n<p>参考链接：<br><a href=\"https://github.com/madeye/shadowsocks-libev\" target=\"_blank\" rel=\"noopener\">https://github.com/madeye/shadowsocks-libev</a></p>"},{"title":"Android导入第三方静态库.a编译成动态库.so","date":"2016-05-11T15:08:51.000Z","_content":"Android导入第三方静态库.a编译成动态库.so\n<!--more-->\n![img1](android-ndk-so-a/img1.png)\n\n下面我以一个简单的实际例子来讲解如何在动态库中导入静态库。\n\n静态库中的源代码有两个文件：static.h, static.c，有一个add方法 static.h\n```\n#include <stdio.h> \nint add(int x, int y);\nstatic.c\n#include \"static.h\" \nint add(int x, int y) \n{ \n    return x + y; \n}\n```\n\n将它编译成静态库，Android.mk如下：\n\n```\nLOCAL_PATH := $(call my-dir) \ninclude $(CLEAR_VARS) \nLOCAL_MODULE    := static_add \nLOCAL_SRC_FILES := static.c \ninclude $(BUILD_STATIC_LIBRARY)\n```\n注意编译静态库的时候，必须有一个Application.mk文件：\n>APP_MODULES:=static_add\n\nAPP_MODULES的值应该和Android.mk中的LOCAL_MODULE的值保持一样。\n\n然后调用ndk-build进行编译生成libstatic_add.a静态库\n\n```\nhejinlai_iMac:jni hejinlai$ ndk-build\nPrebuilt : libstatic_add.a <= jni/ 生成静态库后，然后编写动态库中的源代码: share.h share.c share.h [cpp]#include \nint test_add(int x, int y);\n\nshare.c\n1234567 #include “share.h”\n#include “static.h”\nint test_add(int x, int y)\n{\n// 调用static里面的方法\nreturn add(x, y);\n}\n```\n\n编写导入静态库的Android.mk：\n```\nLOCAL_PATH := $(call my-dir) \ninclude $(CLEAR_VARS) \nLOCAL_MODULE    := static_add \nLOCAL_SRC_FILES := libstatic_add.a \ninclude $(PREBUILT_STATIC_LIBRARY) \ninclude $(CLEAR_VARS) \nLOCAL_MODULE    := share_add \nLOCAL_STATIC_LIBRARIES := static_add \nLOCAL_SRC_FILES := share.c \ninclude $(BUILD_SHARED_LIBRARY)\n```\n\n注意上面生成的libstatic_add.a必须跟Android.mk放在同一目录下，否则需要填写相应的路径，然后进行编译：\n```\nhejinlai_iMac:jni hejinlai$ ndk-build\nCompile thumb : share_add <= share.c Prebuilt : libstatic_add.a <= jni/ SharedLibrary : libshare_add.so Install : libshare_add.so => libs/armeabi/libshare_add.so\n```\n\n提示so编译成功。\n\n需要注意的是我这边share.c和static.c放在同一目录下，如果放在不同的目录下，需要指定\n\nLOCAL_C_INCLUDES链接到相应的路径。","source":"_posts/android-ndk-so-a.md","raw":"---\ntitle: Android导入第三方静态库.a编译成动态库.so\ndate: 2016-05-11 23:08:51\ntags: [Andorid,ndk,so,a]\ncategories: NDK\n---\nAndroid导入第三方静态库.a编译成动态库.so\n<!--more-->\n![img1](android-ndk-so-a/img1.png)\n\n下面我以一个简单的实际例子来讲解如何在动态库中导入静态库。\n\n静态库中的源代码有两个文件：static.h, static.c，有一个add方法 static.h\n```\n#include <stdio.h> \nint add(int x, int y);\nstatic.c\n#include \"static.h\" \nint add(int x, int y) \n{ \n    return x + y; \n}\n```\n\n将它编译成静态库，Android.mk如下：\n\n```\nLOCAL_PATH := $(call my-dir) \ninclude $(CLEAR_VARS) \nLOCAL_MODULE    := static_add \nLOCAL_SRC_FILES := static.c \ninclude $(BUILD_STATIC_LIBRARY)\n```\n注意编译静态库的时候，必须有一个Application.mk文件：\n>APP_MODULES:=static_add\n\nAPP_MODULES的值应该和Android.mk中的LOCAL_MODULE的值保持一样。\n\n然后调用ndk-build进行编译生成libstatic_add.a静态库\n\n```\nhejinlai_iMac:jni hejinlai$ ndk-build\nPrebuilt : libstatic_add.a <= jni/ 生成静态库后，然后编写动态库中的源代码: share.h share.c share.h [cpp]#include \nint test_add(int x, int y);\n\nshare.c\n1234567 #include “share.h”\n#include “static.h”\nint test_add(int x, int y)\n{\n// 调用static里面的方法\nreturn add(x, y);\n}\n```\n\n编写导入静态库的Android.mk：\n```\nLOCAL_PATH := $(call my-dir) \ninclude $(CLEAR_VARS) \nLOCAL_MODULE    := static_add \nLOCAL_SRC_FILES := libstatic_add.a \ninclude $(PREBUILT_STATIC_LIBRARY) \ninclude $(CLEAR_VARS) \nLOCAL_MODULE    := share_add \nLOCAL_STATIC_LIBRARIES := static_add \nLOCAL_SRC_FILES := share.c \ninclude $(BUILD_SHARED_LIBRARY)\n```\n\n注意上面生成的libstatic_add.a必须跟Android.mk放在同一目录下，否则需要填写相应的路径，然后进行编译：\n```\nhejinlai_iMac:jni hejinlai$ ndk-build\nCompile thumb : share_add <= share.c Prebuilt : libstatic_add.a <= jni/ SharedLibrary : libshare_add.so Install : libshare_add.so => libs/armeabi/libshare_add.so\n```\n\n提示so编译成功。\n\n需要注意的是我这边share.c和static.c放在同一目录下，如果放在不同的目录下，需要指定\n\nLOCAL_C_INCLUDES链接到相应的路径。","slug":"android-ndk-so-a","published":1,"updated":"2018-04-03T07:05:42.831Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfjja6p6000464v4k3om3i5m","content":"<p>Android导入第三方静态库.a编译成动态库.so<br><a id=\"more\"></a><br><img src=\"/2016/05/11/android-ndk-so-a/img1.png\" alt=\"img1\"></p>\n<p>下面我以一个简单的实际例子来讲解如何在动态库中导入静态库。</p>\n<p>静态库中的源代码有两个文件：static.h, static.c，有一个add方法 static.h<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt; </span><br><span class=\"line\">int add(int x, int y);</span><br><span class=\"line\">static.c</span><br><span class=\"line\">#include &quot;static.h&quot; </span><br><span class=\"line\">int add(int x, int y) </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    return x + y; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>将它编译成静态库，Android.mk如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_PATH := $(call my-dir) </span><br><span class=\"line\">include $(CLEAR_VARS) </span><br><span class=\"line\">LOCAL_MODULE    := static_add </span><br><span class=\"line\">LOCAL_SRC_FILES := static.c </span><br><span class=\"line\">include $(BUILD_STATIC_LIBRARY)</span><br></pre></td></tr></table></figure>\n<p>注意编译静态库的时候，必须有一个Application.mk文件：</p>\n<blockquote>\n<p>APP_MODULES:=static_add</p>\n</blockquote>\n<p>APP_MODULES的值应该和Android.mk中的LOCAL_MODULE的值保持一样。</p>\n<p>然后调用ndk-build进行编译生成libstatic_add.a静态库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hejinlai_iMac:jni hejinlai$ ndk-build</span><br><span class=\"line\">Prebuilt : libstatic_add.a &lt;= jni/ 生成静态库后，然后编写动态库中的源代码: share.h share.c share.h [cpp]#include </span><br><span class=\"line\">int test_add(int x, int y);</span><br><span class=\"line\"></span><br><span class=\"line\">share.c</span><br><span class=\"line\">1234567 #include “share.h”</span><br><span class=\"line\">#include “static.h”</span><br><span class=\"line\">int test_add(int x, int y)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">// 调用static里面的方法</span><br><span class=\"line\">return add(x, y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编写导入静态库的Android.mk：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_PATH := $(call my-dir) </span><br><span class=\"line\">include $(CLEAR_VARS) </span><br><span class=\"line\">LOCAL_MODULE    := static_add </span><br><span class=\"line\">LOCAL_SRC_FILES := libstatic_add.a </span><br><span class=\"line\">include $(PREBUILT_STATIC_LIBRARY) </span><br><span class=\"line\">include $(CLEAR_VARS) </span><br><span class=\"line\">LOCAL_MODULE    := share_add </span><br><span class=\"line\">LOCAL_STATIC_LIBRARIES := static_add </span><br><span class=\"line\">LOCAL_SRC_FILES := share.c </span><br><span class=\"line\">include $(BUILD_SHARED_LIBRARY)</span><br></pre></td></tr></table></figure></p>\n<p>注意上面生成的libstatic_add.a必须跟Android.mk放在同一目录下，否则需要填写相应的路径，然后进行编译：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hejinlai_iMac:jni hejinlai$ ndk-build</span><br><span class=\"line\">Compile thumb : share_add &lt;= share.c Prebuilt : libstatic_add.a &lt;= jni/ SharedLibrary : libshare_add.so Install : libshare_add.so =&gt; libs/armeabi/libshare_add.so</span><br></pre></td></tr></table></figure></p>\n<p>提示so编译成功。</p>\n<p>需要注意的是我这边share.c和static.c放在同一目录下，如果放在不同的目录下，需要指定</p>\n<p>LOCAL_C_INCLUDES链接到相应的路径。</p>\n","site":{"data":{"hint":{"new":{"selector":[".menu-reading",".menu-about"]}},"link":{"social":{"weibo":"http://weibo.com/","github":"https://github.com/xxl6097","rss":"/atom.xml"},"extern":{"raytaylorism主题作者的技术博客":"http://raytaylorlin.com/","Github地址（测试友情链接）":"https://github.com/xxl6097"}},"about":{"avatar":"http://uuxia.cn/image/icon.png","name":"你的大名","tag":"Web前端/Android/Java/C++/技术宅","desc":"在浮躁的世界安安静静地敲代码","skills":{"Javascript":8,"Python":6,"invisible-split-line-1":-1,"Node.js":4},"projects":[{"name":"你的项目A","image":"https://d13yacurqjgara.cloudfront.net/users/138819/screenshots/2578899/dribbble_800x600_01_1x.png","tags":["2016年","项目标签"],"description":"你的项目A的简介","link_text":"网站链接","link":"https://dribbble.com/"},{"name":"你的作品B","image":"https://d13yacurqjgara.cloudfront.net/users/4094/screenshots/2578885/time-lords-drib_1x.jpg","description":"你的作品B的简介","tags":["Github","设计"],"link_text":"Github地址","link":"https://github.com/"}],"reward":["http://uuxia.cn/image/wechat.png","http://uuxia.cn/image/alipay.png"]},"reading":{"define":{"readed":"已读","reading":"在读","wanted":"想读"},"contents":{"readed":[{"title":"众妙之门：网站UI设计之道","cover":"http://img3.douban.com/lpic/s23139051.jpg","review":"推荐非UI人士了解UI阅读。","score":"7","doubanLink":"http://book.douban.com/subject/20281463/"},{"title":"JavaScript模式","cover":"http://img5.douban.com/lpic/s11337059.jpg","review":"书很薄，但内容相当实用。","score":"8.5","doubanLink":"http://book.douban.com/subject/11506062/"},{"title":"JavaScript语言精粹","cover":"http://img3.douban.com/lpic/s11373174.jpg","review":"这是一本前端人员的基础书，强烈推荐阅读，而且越早看受益越多！","score":"9.5","doubanLink":"http://book.douban.com/subject/11874748/"}],"reading":[{"title":"网络游戏核心技术与实战","cover":"http://img4.douban.com/lpic/s27881888.jpg","review":"","score":null,"doubanLink":"http://book.douban.com/subject/25850090/"}],"wanted":[{"title":"计算机程序的构造和解释","cover":"http://img4.douban.com/lpic/s1113106.jpg","review":"","score":null,"doubanLink":"http://book.douban.com/subject/1148282/"}]}}}},"excerpt":"<p>Android导入第三方静态库.a编译成动态库.so<br></p>","more":"<br><img src=\"/2016/05/11/android-ndk-so-a/img1.png\" alt=\"img1\"><p></p>\n<p>下面我以一个简单的实际例子来讲解如何在动态库中导入静态库。</p>\n<p>静态库中的源代码有两个文件：static.h, static.c，有一个add方法 static.h<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt; </span><br><span class=\"line\">int add(int x, int y);</span><br><span class=\"line\">static.c</span><br><span class=\"line\">#include &quot;static.h&quot; </span><br><span class=\"line\">int add(int x, int y) </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    return x + y; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>将它编译成静态库，Android.mk如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_PATH := $(call my-dir) </span><br><span class=\"line\">include $(CLEAR_VARS) </span><br><span class=\"line\">LOCAL_MODULE    := static_add </span><br><span class=\"line\">LOCAL_SRC_FILES := static.c </span><br><span class=\"line\">include $(BUILD_STATIC_LIBRARY)</span><br></pre></td></tr></table></figure>\n<p>注意编译静态库的时候，必须有一个Application.mk文件：</p>\n<blockquote>\n<p>APP_MODULES:=static_add</p>\n</blockquote>\n<p>APP_MODULES的值应该和Android.mk中的LOCAL_MODULE的值保持一样。</p>\n<p>然后调用ndk-build进行编译生成libstatic_add.a静态库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hejinlai_iMac:jni hejinlai$ ndk-build</span><br><span class=\"line\">Prebuilt : libstatic_add.a &lt;= jni/ 生成静态库后，然后编写动态库中的源代码: share.h share.c share.h [cpp]#include </span><br><span class=\"line\">int test_add(int x, int y);</span><br><span class=\"line\"></span><br><span class=\"line\">share.c</span><br><span class=\"line\">1234567 #include “share.h”</span><br><span class=\"line\">#include “static.h”</span><br><span class=\"line\">int test_add(int x, int y)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">// 调用static里面的方法</span><br><span class=\"line\">return add(x, y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编写导入静态库的Android.mk：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_PATH := $(call my-dir) </span><br><span class=\"line\">include $(CLEAR_VARS) </span><br><span class=\"line\">LOCAL_MODULE    := static_add </span><br><span class=\"line\">LOCAL_SRC_FILES := libstatic_add.a </span><br><span class=\"line\">include $(PREBUILT_STATIC_LIBRARY) </span><br><span class=\"line\">include $(CLEAR_VARS) </span><br><span class=\"line\">LOCAL_MODULE    := share_add </span><br><span class=\"line\">LOCAL_STATIC_LIBRARIES := static_add </span><br><span class=\"line\">LOCAL_SRC_FILES := share.c </span><br><span class=\"line\">include $(BUILD_SHARED_LIBRARY)</span><br></pre></td></tr></table></figure></p>\n<p>注意上面生成的libstatic_add.a必须跟Android.mk放在同一目录下，否则需要填写相应的路径，然后进行编译：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hejinlai_iMac:jni hejinlai$ ndk-build</span><br><span class=\"line\">Compile thumb : share_add &lt;= share.c Prebuilt : libstatic_add.a &lt;= jni/ SharedLibrary : libshare_add.so Install : libshare_add.so =&gt; libs/armeabi/libshare_add.so</span><br></pre></td></tr></table></figure></p>\n<p>提示so编译成功。</p>\n<p>需要注意的是我这边share.c和static.c放在同一目录下，如果放在不同的目录下，需要指定</p>\n<p>LOCAL_C_INCLUDES链接到相应的路径。</p>"},{"title":"搬瓦工（bandwagon）搭建VPN","date":"2016-05-08T21:59:13.000Z","_content":"最近注册了一个搬瓦工，开始只为了翻墙，方便查资料和上网。后来发现了搬瓦工功能还比较强大，一年19美元10G流量（搬瓦工：[https://bandwagonhost.com/](https://bandwagonhost.com/)），我目前配合了shadowsocks使用，ios用的surge，by the way，surge相当的强大，搬瓦工还可以搭件个人网站。关于搬瓦工的注册，在这里就不再阐述了，很简单，百度google都有，好了，下面开工，搭建VPN吧。\n<!--more-->\n\n\n最近注册了一个搬瓦工，开始只为了翻墙，方便查资料和上网。后来发现了搬瓦工功能还比较强大，一年19美元10G流量（搬瓦工：[https://bandwagonhost.com/](https://bandwagonhost.com/)），我目前配合了shadowsocks使用，ios用的surge，by the way，surge相当的强大，搬瓦工还可以搭件个人网站。关于搬瓦工的注册，在这里就不再阐述了，很简单，百度google都有，好了，下面开工，搭建VPN吧。\n\n安装服务（VPN-PPTP）\n--------------\n运行如下命令\n\n```\nwget http://www.5yun.org/Soft/linux/Openvz-vpn/openvps_vpn_centos-5-6.sh\nchmod a+x openvps_vpn_centos-5-6.sh \nbash openvps_vpn_centos-5-6.sh\n\n#如果以上地址不可用，可尝试以下命令，\n#这个脚本只提供三个选项，一般选择1就可以自动完成全部过程\n#去掉注释符号\n#wget http://www.hi-vps.com/shell/vpn_centos6.sh\n#chmod a+x vpn_centos6.sh\n#bash vpn_centos6.sh\n```\n结果如下：\n![这里写图片描述](http://img.blog.csdn.net/20160402163201595)\n\n上边第一步是获取一个自动脚本，第二步是给它运行权限，第三步是运行。有时候会遇到第一步无法成功，这时候在本地先下载这个文件，再使用Putty或者SSH客户端上传到VPS也是可以的。 \n执行以上命令后将会返回一个选择系统版本的提示信息，因为之前我们选择的是centos6 ，因此选择第2项，输入2，回车：\n\n```\n[root@localhost ~]# bash openvps_vpn_centos-5-6.sh\nplease select your operation system\nwhich do you want to?input the number.\n1. my system is centos5 32bit(only support 32bit)\n2. my system is centos6 32bit or 64bit(they are support)\n3. repaire VPN service\n4. add VPN user\n```\n\n![这里写图片描述](http://img.blog.csdn.net/20160402163645159)\n\n执行命令后将自动安装，成功后返回一下信息： \nVPN service is installed, your VPN username is vpn_name,VPN password is ** \n这句话提示成功创建了一个名为vpn_name的账户，密码为 **。\n\n执行命令后报404错误，或者提示文件或目录不存在，是因为没能成功下载安装包。 \n这里提供手动下载安装包的方法 \n如果是centos6，执行以下命令：\n\n```\nwget http://linux.dell.com/dkms/permalink/dkms-2.0.17.5-1.noarch.rpm\nwget https://acelnmp.googlecode.com/files/kernel_ppp_mppe-1.0.2-3dkms.noarch.rpm\nwget https://qiaodahai.googlecode.com/files/pptpd-1.3.4-2.el6.i686.rpm\nwget https://logdns.googlecode.com/files/ppp-2.4.5-17.0.rhel6.i686.rpm\n```\n如果是 centos5，则执行以下命令：\n\n```\nwget http://linux.dell.com/dkms/permalink/dkms-2.0.17.5-1.noarch.rpm\nwget https://acelnmp.googlecode.com/files/kernel_ppp_mppe-1.0.2-3dkms.noarch.rpm\nwget https://acelnmp.googlecode.com/files/pptpd-1.3.4-1.rhel5.1.i386.rpm\nwget https://fastlnmp.googlecode.com/files/ppp-2.4.4-9.0.rhel5.i386.rpm\n```\n\n添加自己的VPN账号\n----------\n如何添加自己的vpn账户名？ 比如我想用 anonymous 这个帐号，密码设置为 abc@123 (注意，危险！仅作为演示用，千万别设置这样的密码！)\n\n执行下面这句代码来添加vpn账户： \n\n```\nbash openvps_vpn_centos-5-6.sh \n```\n返回的信息选项中，选择第4项：4.add VPN user \n```\n[root@localhost ~]# bash openvps_vpn_centos-5-6.sh\nplease select your operation system\nwhich do you want to?input the number.\n1. my system is centos5 32bit(only support 32bit)\n2. my system is centos6 32bit or 64bit(they are support)\n3. repaire VPN service\n4. add VPN user\n\n```\n根据提示输入用户名，如 anonymous，再输入密码 即可完成vpn的架设了。 \n使用时，在本地新建VPN连接，地址和端口填写VPS的地址和端口，用户名密码填写自己设置的VPN的用户名和密码，然后连接，就可以了。 \n如有疑问，请留言讨论。\n\n在Terminal里面添加VPN帐号：\n\n```\nvi /etc/ppp/chap-secrets\n```\n键盘选择插入键：Insert 进行编辑， 使用键盘上下左右将光标插入另一行按照以下格式输入\n*vpn pptpd Xk0jk78f *\n注释：vpn  用户名\nXk0jk78f   密码\npptpd 和 * 不变，字符中间必须用一个空格隔开。数字123，选用键盘字母键上方，不要用数字小键盘*\n![这里写图片描述](http://img.blog.csdn.net/20160402170911906)\n如上输入完成，按下键盘左上方ESC键盘，英文状态下输入红色字体  ：wq     即保存好了。\n现在只要电脑设置好，就可以自由的畅享网络了。\n\nreference\n---------\n[Centos6.X vpn pptp 搭建方法](http://www.jjhr.net/2013/12/centos6-x-vpn-pptp-build-method/) \n[搬瓦工vps vpn架设](http://www.phpsong.com/1.html)\n\n[http://www.phpsong.com/1126.html](http://www.phpsong.com/1126.html)\n\n[http://www.figotan.org/2016/05/04/cook-your-own-vpn/?ref=myread](http://www.figotan.org/2016/05/04/cook-your-own-vpn/?ref=myread)\n\n\nAppendix\n--------\n最近妖风太盛，所以如果自己有能力的童鞋，请移步Github的这个项目MPTUN自己研究怎么搭建VPN吧，当然VPS还是必要的。 \n单单这篇文章访问量超高，让我陷入了沉思…… \n补充一点东西：有能力的同学，可以研究一下ssh的端口流量转发，浏览器或网络连接的socks5代理，基本上可以解决VPN被封杀时候的情况。ssh的协议特征很明显，我觉得迟早还是会被解决，同学们如果不嫌麻烦，VPN还有几种通信协议，可以研究一下。希望不会被查水表吧，我也不喜欢喝茶。\n\n如果只需要浏览器翻墙，而不需要全局翻墙，那么SSH代理配合SwitchyOmega插件使用chrome浏览器就可以做到。 \n最近发现一个方便的工具，Chrome插件Secure Shell，在浏览器完成SSH代理。\n","source":"_posts/buildvpn.md","raw":"---\ntitle: 搬瓦工（bandwagon）搭建VPN\ndate: 2016-05-09 05:59:13\ntags: [vpn,shadowsocks]\ncategories: vpn\n---\n最近注册了一个搬瓦工，开始只为了翻墙，方便查资料和上网。后来发现了搬瓦工功能还比较强大，一年19美元10G流量（搬瓦工：[https://bandwagonhost.com/](https://bandwagonhost.com/)），我目前配合了shadowsocks使用，ios用的surge，by the way，surge相当的强大，搬瓦工还可以搭件个人网站。关于搬瓦工的注册，在这里就不再阐述了，很简单，百度google都有，好了，下面开工，搭建VPN吧。\n<!--more-->\n\n\n最近注册了一个搬瓦工，开始只为了翻墙，方便查资料和上网。后来发现了搬瓦工功能还比较强大，一年19美元10G流量（搬瓦工：[https://bandwagonhost.com/](https://bandwagonhost.com/)），我目前配合了shadowsocks使用，ios用的surge，by the way，surge相当的强大，搬瓦工还可以搭件个人网站。关于搬瓦工的注册，在这里就不再阐述了，很简单，百度google都有，好了，下面开工，搭建VPN吧。\n\n安装服务（VPN-PPTP）\n--------------\n运行如下命令\n\n```\nwget http://www.5yun.org/Soft/linux/Openvz-vpn/openvps_vpn_centos-5-6.sh\nchmod a+x openvps_vpn_centos-5-6.sh \nbash openvps_vpn_centos-5-6.sh\n\n#如果以上地址不可用，可尝试以下命令，\n#这个脚本只提供三个选项，一般选择1就可以自动完成全部过程\n#去掉注释符号\n#wget http://www.hi-vps.com/shell/vpn_centos6.sh\n#chmod a+x vpn_centos6.sh\n#bash vpn_centos6.sh\n```\n结果如下：\n![这里写图片描述](http://img.blog.csdn.net/20160402163201595)\n\n上边第一步是获取一个自动脚本，第二步是给它运行权限，第三步是运行。有时候会遇到第一步无法成功，这时候在本地先下载这个文件，再使用Putty或者SSH客户端上传到VPS也是可以的。 \n执行以上命令后将会返回一个选择系统版本的提示信息，因为之前我们选择的是centos6 ，因此选择第2项，输入2，回车：\n\n```\n[root@localhost ~]# bash openvps_vpn_centos-5-6.sh\nplease select your operation system\nwhich do you want to?input the number.\n1. my system is centos5 32bit(only support 32bit)\n2. my system is centos6 32bit or 64bit(they are support)\n3. repaire VPN service\n4. add VPN user\n```\n\n![这里写图片描述](http://img.blog.csdn.net/20160402163645159)\n\n执行命令后将自动安装，成功后返回一下信息： \nVPN service is installed, your VPN username is vpn_name,VPN password is ** \n这句话提示成功创建了一个名为vpn_name的账户，密码为 **。\n\n执行命令后报404错误，或者提示文件或目录不存在，是因为没能成功下载安装包。 \n这里提供手动下载安装包的方法 \n如果是centos6，执行以下命令：\n\n```\nwget http://linux.dell.com/dkms/permalink/dkms-2.0.17.5-1.noarch.rpm\nwget https://acelnmp.googlecode.com/files/kernel_ppp_mppe-1.0.2-3dkms.noarch.rpm\nwget https://qiaodahai.googlecode.com/files/pptpd-1.3.4-2.el6.i686.rpm\nwget https://logdns.googlecode.com/files/ppp-2.4.5-17.0.rhel6.i686.rpm\n```\n如果是 centos5，则执行以下命令：\n\n```\nwget http://linux.dell.com/dkms/permalink/dkms-2.0.17.5-1.noarch.rpm\nwget https://acelnmp.googlecode.com/files/kernel_ppp_mppe-1.0.2-3dkms.noarch.rpm\nwget https://acelnmp.googlecode.com/files/pptpd-1.3.4-1.rhel5.1.i386.rpm\nwget https://fastlnmp.googlecode.com/files/ppp-2.4.4-9.0.rhel5.i386.rpm\n```\n\n添加自己的VPN账号\n----------\n如何添加自己的vpn账户名？ 比如我想用 anonymous 这个帐号，密码设置为 abc@123 (注意，危险！仅作为演示用，千万别设置这样的密码！)\n\n执行下面这句代码来添加vpn账户： \n\n```\nbash openvps_vpn_centos-5-6.sh \n```\n返回的信息选项中，选择第4项：4.add VPN user \n```\n[root@localhost ~]# bash openvps_vpn_centos-5-6.sh\nplease select your operation system\nwhich do you want to?input the number.\n1. my system is centos5 32bit(only support 32bit)\n2. my system is centos6 32bit or 64bit(they are support)\n3. repaire VPN service\n4. add VPN user\n\n```\n根据提示输入用户名，如 anonymous，再输入密码 即可完成vpn的架设了。 \n使用时，在本地新建VPN连接，地址和端口填写VPS的地址和端口，用户名密码填写自己设置的VPN的用户名和密码，然后连接，就可以了。 \n如有疑问，请留言讨论。\n\n在Terminal里面添加VPN帐号：\n\n```\nvi /etc/ppp/chap-secrets\n```\n键盘选择插入键：Insert 进行编辑， 使用键盘上下左右将光标插入另一行按照以下格式输入\n*vpn pptpd Xk0jk78f *\n注释：vpn  用户名\nXk0jk78f   密码\npptpd 和 * 不变，字符中间必须用一个空格隔开。数字123，选用键盘字母键上方，不要用数字小键盘*\n![这里写图片描述](http://img.blog.csdn.net/20160402170911906)\n如上输入完成，按下键盘左上方ESC键盘，英文状态下输入红色字体  ：wq     即保存好了。\n现在只要电脑设置好，就可以自由的畅享网络了。\n\nreference\n---------\n[Centos6.X vpn pptp 搭建方法](http://www.jjhr.net/2013/12/centos6-x-vpn-pptp-build-method/) \n[搬瓦工vps vpn架设](http://www.phpsong.com/1.html)\n\n[http://www.phpsong.com/1126.html](http://www.phpsong.com/1126.html)\n\n[http://www.figotan.org/2016/05/04/cook-your-own-vpn/?ref=myread](http://www.figotan.org/2016/05/04/cook-your-own-vpn/?ref=myread)\n\n\nAppendix\n--------\n最近妖风太盛，所以如果自己有能力的童鞋，请移步Github的这个项目MPTUN自己研究怎么搭建VPN吧，当然VPS还是必要的。 \n单单这篇文章访问量超高，让我陷入了沉思…… \n补充一点东西：有能力的同学，可以研究一下ssh的端口流量转发，浏览器或网络连接的socks5代理，基本上可以解决VPN被封杀时候的情况。ssh的协议特征很明显，我觉得迟早还是会被解决，同学们如果不嫌麻烦，VPN还有几种通信协议，可以研究一下。希望不会被查水表吧，我也不喜欢喝茶。\n\n如果只需要浏览器翻墙，而不需要全局翻墙，那么SSH代理配合SwitchyOmega插件使用chrome浏览器就可以做到。 \n最近发现一个方便的工具，Chrome插件Secure Shell，在浏览器完成SSH代理。\n","slug":"buildvpn","published":1,"updated":"2018-04-03T07:05:42.831Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfjja6p7000564v410mqj7i6","content":"<p>最近注册了一个搬瓦工，开始只为了翻墙，方便查资料和上网。后来发现了搬瓦工功能还比较强大，一年19美元10G流量（搬瓦工：<a href=\"https://bandwagonhost.com/\" target=\"_blank\" rel=\"noopener\">https://bandwagonhost.com/</a>），我目前配合了shadowsocks使用，ios用的surge，by the way，surge相当的强大，搬瓦工还可以搭件个人网站。关于搬瓦工的注册，在这里就不再阐述了，很简单，百度google都有，好了，下面开工，搭建VPN吧。<br><a id=\"more\"></a></p>\n<p>最近注册了一个搬瓦工，开始只为了翻墙，方便查资料和上网。后来发现了搬瓦工功能还比较强大，一年19美元10G流量（搬瓦工：<a href=\"https://bandwagonhost.com/\" target=\"_blank\" rel=\"noopener\">https://bandwagonhost.com/</a>），我目前配合了shadowsocks使用，ios用的surge，by the way，surge相当的强大，搬瓦工还可以搭件个人网站。关于搬瓦工的注册，在这里就不再阐述了，很简单，百度google都有，好了，下面开工，搭建VPN吧。</p>\n<h2 id=\"安装服务（VPN-PPTP）\"><a href=\"#安装服务（VPN-PPTP）\" class=\"headerlink\" title=\"安装服务（VPN-PPTP）\"></a>安装服务（VPN-PPTP）</h2><p>运行如下命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://www.5yun.org/Soft/linux/Openvz-vpn/openvps_vpn_centos-5-6.sh</span><br><span class=\"line\">chmod a+x openvps_vpn_centos-5-6.sh </span><br><span class=\"line\">bash openvps_vpn_centos-5-6.sh</span><br><span class=\"line\"></span><br><span class=\"line\">#如果以上地址不可用，可尝试以下命令，</span><br><span class=\"line\">#这个脚本只提供三个选项，一般选择1就可以自动完成全部过程</span><br><span class=\"line\">#去掉注释符号</span><br><span class=\"line\">#wget http://www.hi-vps.com/shell/vpn_centos6.sh</span><br><span class=\"line\">#chmod a+x vpn_centos6.sh</span><br><span class=\"line\">#bash vpn_centos6.sh</span><br></pre></td></tr></table></figure>\n<p>结果如下：<br><img src=\"http://img.blog.csdn.net/20160402163201595\" alt=\"这里写图片描述\"></p>\n<p>上边第一步是获取一个自动脚本，第二步是给它运行权限，第三步是运行。有时候会遇到第一步无法成功，这时候在本地先下载这个文件，再使用Putty或者SSH客户端上传到VPS也是可以的。<br>执行以上命令后将会返回一个选择系统版本的提示信息，因为之前我们选择的是centos6 ，因此选择第2项，输入2，回车：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# bash openvps_vpn_centos-5-6.sh</span><br><span class=\"line\">please select your operation system</span><br><span class=\"line\">which do you want to?input the number.</span><br><span class=\"line\">1. my system is centos5 32bit(only support 32bit)</span><br><span class=\"line\">2. my system is centos6 32bit or 64bit(they are support)</span><br><span class=\"line\">3. repaire VPN service</span><br><span class=\"line\">4. add VPN user</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20160402163645159\" alt=\"这里写图片描述\"></p>\n<p>执行命令后将自动安装，成功后返回一下信息：<br>VPN service is installed, your VPN username is vpn_name,VPN password is <strong><br>这句话提示成功创建了一个名为vpn_name的账户，密码为 </strong>。</p>\n<p>执行命令后报404错误，或者提示文件或目录不存在，是因为没能成功下载安装包。<br>这里提供手动下载安装包的方法<br>如果是centos6，执行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://linux.dell.com/dkms/permalink/dkms-2.0.17.5-1.noarch.rpm</span><br><span class=\"line\">wget https://acelnmp.googlecode.com/files/kernel_ppp_mppe-1.0.2-3dkms.noarch.rpm</span><br><span class=\"line\">wget https://qiaodahai.googlecode.com/files/pptpd-1.3.4-2.el6.i686.rpm</span><br><span class=\"line\">wget https://logdns.googlecode.com/files/ppp-2.4.5-17.0.rhel6.i686.rpm</span><br></pre></td></tr></table></figure>\n<p>如果是 centos5，则执行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://linux.dell.com/dkms/permalink/dkms-2.0.17.5-1.noarch.rpm</span><br><span class=\"line\">wget https://acelnmp.googlecode.com/files/kernel_ppp_mppe-1.0.2-3dkms.noarch.rpm</span><br><span class=\"line\">wget https://acelnmp.googlecode.com/files/pptpd-1.3.4-1.rhel5.1.i386.rpm</span><br><span class=\"line\">wget https://fastlnmp.googlecode.com/files/ppp-2.4.4-9.0.rhel5.i386.rpm</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加自己的VPN账号\"><a href=\"#添加自己的VPN账号\" class=\"headerlink\" title=\"添加自己的VPN账号\"></a>添加自己的VPN账号</h2><p>如何添加自己的vpn账户名？ 比如我想用 anonymous 这个帐号，密码设置为 abc@123 (注意，危险！仅作为演示用，千万别设置这样的密码！)</p>\n<p>执行下面这句代码来添加vpn账户： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash openvps_vpn_centos-5-6.sh</span><br></pre></td></tr></table></figure>\n<p>返回的信息选项中，选择第4项：4.add VPN user<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# bash openvps_vpn_centos-5-6.sh</span><br><span class=\"line\">please select your operation system</span><br><span class=\"line\">which do you want to?input the number.</span><br><span class=\"line\">1. my system is centos5 32bit(only support 32bit)</span><br><span class=\"line\">2. my system is centos6 32bit or 64bit(they are support)</span><br><span class=\"line\">3. repaire VPN service</span><br><span class=\"line\">4. add VPN user</span><br></pre></td></tr></table></figure></p>\n<p>根据提示输入用户名，如 anonymous，再输入密码 即可完成vpn的架设了。<br>使用时，在本地新建VPN连接，地址和端口填写VPS的地址和端口，用户名密码填写自己设置的VPN的用户名和密码，然后连接，就可以了。<br>如有疑问，请留言讨论。</p>\n<p>在Terminal里面添加VPN帐号：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/ppp/chap-secrets</span><br></pre></td></tr></table></figure>\n<p>键盘选择插入键：Insert 进行编辑， 使用键盘上下左右将光标插入另一行按照以下格式输入<br><em>vpn pptpd Xk0jk78f </em><br>注释：vpn  用户名<br>Xk0jk78f   密码<br>pptpd 和 <em> 不变，字符中间必须用一个空格隔开。数字123，选用键盘字母键上方，不要用数字小键盘</em><br><img src=\"http://img.blog.csdn.net/20160402170911906\" alt=\"这里写图片描述\"><br>如上输入完成，按下键盘左上方ESC键盘，英文状态下输入红色字体  ：wq     即保存好了。<br>现在只要电脑设置好，就可以自由的畅享网络了。</p>\n<h2 id=\"reference\"><a href=\"#reference\" class=\"headerlink\" title=\"reference\"></a>reference</h2><p><a href=\"http://www.jjhr.net/2013/12/centos6-x-vpn-pptp-build-method/\" target=\"_blank\" rel=\"noopener\">Centos6.X vpn pptp 搭建方法</a><br><a href=\"http://www.phpsong.com/1.html\" target=\"_blank\" rel=\"noopener\">搬瓦工vps vpn架设</a></p>\n<p><a href=\"http://www.phpsong.com/1126.html\" target=\"_blank\" rel=\"noopener\">http://www.phpsong.com/1126.html</a></p>\n<p><a href=\"http://www.figotan.org/2016/05/04/cook-your-own-vpn/?ref=myread\" target=\"_blank\" rel=\"noopener\">http://www.figotan.org/2016/05/04/cook-your-own-vpn/?ref=myread</a></p>\n<h2 id=\"Appendix\"><a href=\"#Appendix\" class=\"headerlink\" title=\"Appendix\"></a>Appendix</h2><p>最近妖风太盛，所以如果自己有能力的童鞋，请移步Github的这个项目MPTUN自己研究怎么搭建VPN吧，当然VPS还是必要的。<br>单单这篇文章访问量超高，让我陷入了沉思……<br>补充一点东西：有能力的同学，可以研究一下ssh的端口流量转发，浏览器或网络连接的socks5代理，基本上可以解决VPN被封杀时候的情况。ssh的协议特征很明显，我觉得迟早还是会被解决，同学们如果不嫌麻烦，VPN还有几种通信协议，可以研究一下。希望不会被查水表吧，我也不喜欢喝茶。</p>\n<p>如果只需要浏览器翻墙，而不需要全局翻墙，那么SSH代理配合SwitchyOmega插件使用chrome浏览器就可以做到。<br>最近发现一个方便的工具，Chrome插件Secure Shell，在浏览器完成SSH代理。</p>\n","site":{"data":{"hint":{"new":{"selector":[".menu-reading",".menu-about"]}},"link":{"social":{"weibo":"http://weibo.com/","github":"https://github.com/xxl6097","rss":"/atom.xml"},"extern":{"raytaylorism主题作者的技术博客":"http://raytaylorlin.com/","Github地址（测试友情链接）":"https://github.com/xxl6097"}},"about":{"avatar":"http://uuxia.cn/image/icon.png","name":"你的大名","tag":"Web前端/Android/Java/C++/技术宅","desc":"在浮躁的世界安安静静地敲代码","skills":{"Javascript":8,"Python":6,"invisible-split-line-1":-1,"Node.js":4},"projects":[{"name":"你的项目A","image":"https://d13yacurqjgara.cloudfront.net/users/138819/screenshots/2578899/dribbble_800x600_01_1x.png","tags":["2016年","项目标签"],"description":"你的项目A的简介","link_text":"网站链接","link":"https://dribbble.com/"},{"name":"你的作品B","image":"https://d13yacurqjgara.cloudfront.net/users/4094/screenshots/2578885/time-lords-drib_1x.jpg","description":"你的作品B的简介","tags":["Github","设计"],"link_text":"Github地址","link":"https://github.com/"}],"reward":["http://uuxia.cn/image/wechat.png","http://uuxia.cn/image/alipay.png"]},"reading":{"define":{"readed":"已读","reading":"在读","wanted":"想读"},"contents":{"readed":[{"title":"众妙之门：网站UI设计之道","cover":"http://img3.douban.com/lpic/s23139051.jpg","review":"推荐非UI人士了解UI阅读。","score":"7","doubanLink":"http://book.douban.com/subject/20281463/"},{"title":"JavaScript模式","cover":"http://img5.douban.com/lpic/s11337059.jpg","review":"书很薄，但内容相当实用。","score":"8.5","doubanLink":"http://book.douban.com/subject/11506062/"},{"title":"JavaScript语言精粹","cover":"http://img3.douban.com/lpic/s11373174.jpg","review":"这是一本前端人员的基础书，强烈推荐阅读，而且越早看受益越多！","score":"9.5","doubanLink":"http://book.douban.com/subject/11874748/"}],"reading":[{"title":"网络游戏核心技术与实战","cover":"http://img4.douban.com/lpic/s27881888.jpg","review":"","score":null,"doubanLink":"http://book.douban.com/subject/25850090/"}],"wanted":[{"title":"计算机程序的构造和解释","cover":"http://img4.douban.com/lpic/s1113106.jpg","review":"","score":null,"doubanLink":"http://book.douban.com/subject/1148282/"}]}}}},"excerpt":"<p>最近注册了一个搬瓦工，开始只为了翻墙，方便查资料和上网。后来发现了搬瓦工功能还比较强大，一年19美元10G流量（搬瓦工：<a href=\"https://bandwagonhost.com/\" target=\"_blank\" rel=\"noopener\">https://bandwagonhost.com/</a>），我目前配合了shadowsocks使用，ios用的surge，by the way，surge相当的强大，搬瓦工还可以搭件个人网站。关于搬瓦工的注册，在这里就不再阐述了，很简单，百度google都有，好了，下面开工，搭建VPN吧。<br></p>","more":"<p></p>\n<p>最近注册了一个搬瓦工，开始只为了翻墙，方便查资料和上网。后来发现了搬瓦工功能还比较强大，一年19美元10G流量（搬瓦工：<a href=\"https://bandwagonhost.com/\" target=\"_blank\" rel=\"noopener\">https://bandwagonhost.com/</a>），我目前配合了shadowsocks使用，ios用的surge，by the way，surge相当的强大，搬瓦工还可以搭件个人网站。关于搬瓦工的注册，在这里就不再阐述了，很简单，百度google都有，好了，下面开工，搭建VPN吧。</p>\n<h2 id=\"安装服务（VPN-PPTP）\"><a href=\"#安装服务（VPN-PPTP）\" class=\"headerlink\" title=\"安装服务（VPN-PPTP）\"></a>安装服务（VPN-PPTP）</h2><p>运行如下命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://www.5yun.org/Soft/linux/Openvz-vpn/openvps_vpn_centos-5-6.sh</span><br><span class=\"line\">chmod a+x openvps_vpn_centos-5-6.sh </span><br><span class=\"line\">bash openvps_vpn_centos-5-6.sh</span><br><span class=\"line\"></span><br><span class=\"line\">#如果以上地址不可用，可尝试以下命令，</span><br><span class=\"line\">#这个脚本只提供三个选项，一般选择1就可以自动完成全部过程</span><br><span class=\"line\">#去掉注释符号</span><br><span class=\"line\">#wget http://www.hi-vps.com/shell/vpn_centos6.sh</span><br><span class=\"line\">#chmod a+x vpn_centos6.sh</span><br><span class=\"line\">#bash vpn_centos6.sh</span><br></pre></td></tr></table></figure>\n<p>结果如下：<br><img src=\"http://img.blog.csdn.net/20160402163201595\" alt=\"这里写图片描述\"></p>\n<p>上边第一步是获取一个自动脚本，第二步是给它运行权限，第三步是运行。有时候会遇到第一步无法成功，这时候在本地先下载这个文件，再使用Putty或者SSH客户端上传到VPS也是可以的。<br>执行以上命令后将会返回一个选择系统版本的提示信息，因为之前我们选择的是centos6 ，因此选择第2项，输入2，回车：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# bash openvps_vpn_centos-5-6.sh</span><br><span class=\"line\">please select your operation system</span><br><span class=\"line\">which do you want to?input the number.</span><br><span class=\"line\">1. my system is centos5 32bit(only support 32bit)</span><br><span class=\"line\">2. my system is centos6 32bit or 64bit(they are support)</span><br><span class=\"line\">3. repaire VPN service</span><br><span class=\"line\">4. add VPN user</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20160402163645159\" alt=\"这里写图片描述\"></p>\n<p>执行命令后将自动安装，成功后返回一下信息：<br>VPN service is installed, your VPN username is vpn_name,VPN password is <strong><br>这句话提示成功创建了一个名为vpn_name的账户，密码为 </strong>。</p>\n<p>执行命令后报404错误，或者提示文件或目录不存在，是因为没能成功下载安装包。<br>这里提供手动下载安装包的方法<br>如果是centos6，执行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://linux.dell.com/dkms/permalink/dkms-2.0.17.5-1.noarch.rpm</span><br><span class=\"line\">wget https://acelnmp.googlecode.com/files/kernel_ppp_mppe-1.0.2-3dkms.noarch.rpm</span><br><span class=\"line\">wget https://qiaodahai.googlecode.com/files/pptpd-1.3.4-2.el6.i686.rpm</span><br><span class=\"line\">wget https://logdns.googlecode.com/files/ppp-2.4.5-17.0.rhel6.i686.rpm</span><br></pre></td></tr></table></figure>\n<p>如果是 centos5，则执行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://linux.dell.com/dkms/permalink/dkms-2.0.17.5-1.noarch.rpm</span><br><span class=\"line\">wget https://acelnmp.googlecode.com/files/kernel_ppp_mppe-1.0.2-3dkms.noarch.rpm</span><br><span class=\"line\">wget https://acelnmp.googlecode.com/files/pptpd-1.3.4-1.rhel5.1.i386.rpm</span><br><span class=\"line\">wget https://fastlnmp.googlecode.com/files/ppp-2.4.4-9.0.rhel5.i386.rpm</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加自己的VPN账号\"><a href=\"#添加自己的VPN账号\" class=\"headerlink\" title=\"添加自己的VPN账号\"></a>添加自己的VPN账号</h2><p>如何添加自己的vpn账户名？ 比如我想用 anonymous 这个帐号，密码设置为 abc@123 (注意，危险！仅作为演示用，千万别设置这样的密码！)</p>\n<p>执行下面这句代码来添加vpn账户： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash openvps_vpn_centos-5-6.sh</span><br></pre></td></tr></table></figure>\n<p>返回的信息选项中，选择第4项：4.add VPN user<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# bash openvps_vpn_centos-5-6.sh</span><br><span class=\"line\">please select your operation system</span><br><span class=\"line\">which do you want to?input the number.</span><br><span class=\"line\">1. my system is centos5 32bit(only support 32bit)</span><br><span class=\"line\">2. my system is centos6 32bit or 64bit(they are support)</span><br><span class=\"line\">3. repaire VPN service</span><br><span class=\"line\">4. add VPN user</span><br></pre></td></tr></table></figure></p>\n<p>根据提示输入用户名，如 anonymous，再输入密码 即可完成vpn的架设了。<br>使用时，在本地新建VPN连接，地址和端口填写VPS的地址和端口，用户名密码填写自己设置的VPN的用户名和密码，然后连接，就可以了。<br>如有疑问，请留言讨论。</p>\n<p>在Terminal里面添加VPN帐号：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/ppp/chap-secrets</span><br></pre></td></tr></table></figure>\n<p>键盘选择插入键：Insert 进行编辑， 使用键盘上下左右将光标插入另一行按照以下格式输入<br><em>vpn pptpd Xk0jk78f </em><br>注释：vpn  用户名<br>Xk0jk78f   密码<br>pptpd 和 <em> 不变，字符中间必须用一个空格隔开。数字123，选用键盘字母键上方，不要用数字小键盘</em><br><img src=\"http://img.blog.csdn.net/20160402170911906\" alt=\"这里写图片描述\"><br>如上输入完成，按下键盘左上方ESC键盘，英文状态下输入红色字体  ：wq     即保存好了。<br>现在只要电脑设置好，就可以自由的畅享网络了。</p>\n<h2 id=\"reference\"><a href=\"#reference\" class=\"headerlink\" title=\"reference\"></a>reference</h2><p><a href=\"http://www.jjhr.net/2013/12/centos6-x-vpn-pptp-build-method/\" target=\"_blank\" rel=\"noopener\">Centos6.X vpn pptp 搭建方法</a><br><a href=\"http://www.phpsong.com/1.html\" target=\"_blank\" rel=\"noopener\">搬瓦工vps vpn架设</a></p>\n<p><a href=\"http://www.phpsong.com/1126.html\" target=\"_blank\" rel=\"noopener\">http://www.phpsong.com/1126.html</a></p>\n<p><a href=\"http://www.figotan.org/2016/05/04/cook-your-own-vpn/?ref=myread\" target=\"_blank\" rel=\"noopener\">http://www.figotan.org/2016/05/04/cook-your-own-vpn/?ref=myread</a></p>\n<h2 id=\"Appendix\"><a href=\"#Appendix\" class=\"headerlink\" title=\"Appendix\"></a>Appendix</h2><p>最近妖风太盛，所以如果自己有能力的童鞋，请移步Github的这个项目MPTUN自己研究怎么搭建VPN吧，当然VPS还是必要的。<br>单单这篇文章访问量超高，让我陷入了沉思……<br>补充一点东西：有能力的同学，可以研究一下ssh的端口流量转发，浏览器或网络连接的socks5代理，基本上可以解决VPN被封杀时候的情况。ssh的协议特征很明显，我觉得迟早还是会被解决，同学们如果不嫌麻烦，VPN还有几种通信协议，可以研究一下。希望不会被查水表吧，我也不喜欢喝茶。</p>\n<p>如果只需要浏览器翻墙，而不需要全局翻墙，那么SSH代理配合SwitchyOmega插件使用chrome浏览器就可以做到。<br>最近发现一个方便的工具，Chrome插件Secure Shell，在浏览器完成SSH代理。</p>"},{"title":"教你几招，蚊子一个夏天不敢进你的房间！！","date":"2016-05-08T23:58:25.000Z","_content":"教你几招，蚊子一个夏天不敢进你的房间！！\n<!--more-->\n\n# 前言\n“多蚊季节来了，谁都不叮偏偏就来叮你？嗡嗡吵得睡不着？怕宝宝被感染？下面教教大家一些驱蚊小窍门！！\n## 方法一：\n![这里写图片描述](http://imgnews.gmw.cn/attachement/jpg/site2/20160412/5796591386340603909.jpg)\n\n用空酒瓶装上糖水或啤酒放在阴暗处，蚊子闻到甜味就会往瓶子里钻，会被啤酒或糖水黏住致死。\n\n## 方法二：\n\n沸过的醋用碟装，放到房间里不用关门，整夜都不会被蚊子打扰。\n\n##方法三:\n　　![这里写图片描述](http://imgnews.gmw.cn/attachement/jpg/site2/20160412/6765316288500183624.jpg)\n避免在花纹蚊出没的时段（上午7-9时，下午4时到黄昏）在树荫、树丛、凉亭等阴暗处逗留。\n\n## 方法四:\n　　![这里写图片描述](http://imgnews.gmw.cn/attachement/jpg/site2/20160412/3399212990045993728.jpg)\n　　在室内点燃柑橘皮，既能驱蚊又能消除屋内异味。\n　　\n## 方法五：\n　　![这里写图片描述](http://imgnews.gmw.cn/attachement/jpg/site2/20160412/4296329243977038086.jpg)\n关上门窗，窗前放一个盆子，盆子加混合洗衣粉的水，第二天水盆中就会有死去的蚊子。\n\n## 方法六：\n　　![这里写图片描述](http://imgnews.gmw.cn/attachement/jpg/site2/20160412/972716997894715278.jpg)\n房间里拜访驱蚊草。\n\n## 方法七：\n\n![这里写图片描述](http://imgnews.gmw.cn/attachement/jpg/site2/20160412/1259655297668004577.jpg)\n\n到登隔热流行区旅行，应穿上长袖衣服及长裤，并在外露皮肤及衣服上涂蚊虫趋避药物。\n\n## 方法八：\n　　![这里写图片描述](http://imgnews.gmw.cn/attachement/jpg/site2/20160412/7766628205407812354.jpg)\n　　3到5天刷洗水缸、换水一次，并翻盆倒罐、清除花盆、废气罐子等积水。\n\n## 方法九：\n　　![这里写图片描述](http://imgnews.gmw.cn/attachement/jpg/site2/20160412/3897745475809723662.jpg)\n　　房间里放几盒开着的风油精。\n# 11种防蚊子奇招妙法\n　1、维生素B泡水擦身，会让蚊子不敢近身，并且这种水溶性维生素没有副作用。\n\n　　2、在室内点燃干桔皮，可取代蚊香，既能驱蚊，又可消除屋内异味。\n\n　　3、尽量穿袜子。许多人喜欢夏天光脚穿鞋，殊不知穿袜子后，蚊子感觉人的皮肤湿度降低、皮表挥发物减少，会减少叮咬。\n\n　　4、在使用驱蚊药时，1个品牌连续使用2个月后，换一种药物驱蚊，效果更好。\n\n　　5、关上门窗，在窗前放置一盆混合洗衣粉的水，越日水盆中就会有一些死去的蚊子。每天持续使用，可以不用再喷杀虫剂了。\n\n　　6、在房间里放上几盒开盖的风油精、清冷油，或在墙上涂点薄荷。\n\n　　7、在身上或寝具上洒些香水。\n\n　　8、将樟脑丸磨碎、撒在屋内墙角。\n\n　　9、在室内的花盆里栽一两株番茄，番茄枝叶发出的气味会把蚊子驱除。\n\n　　10、在灯下挂一把香葱，或用纱袋装几根葱段，各种小虫都不会飞来。\n\n　　11、用橘红色玻璃纸或绸布套在灯泡上，蚊子最怕橘红色光。","source":"_posts/gowaywenzi.md","raw":"---\ntitle: 教你几招，蚊子一个夏天不敢进你的房间！！\ndate: 2016-05-09 07:58:25\ntags: 驱蚊  life\ncategories: 生活\n---\n教你几招，蚊子一个夏天不敢进你的房间！！\n<!--more-->\n\n# 前言\n“多蚊季节来了，谁都不叮偏偏就来叮你？嗡嗡吵得睡不着？怕宝宝被感染？下面教教大家一些驱蚊小窍门！！\n## 方法一：\n![这里写图片描述](http://imgnews.gmw.cn/attachement/jpg/site2/20160412/5796591386340603909.jpg)\n\n用空酒瓶装上糖水或啤酒放在阴暗处，蚊子闻到甜味就会往瓶子里钻，会被啤酒或糖水黏住致死。\n\n## 方法二：\n\n沸过的醋用碟装，放到房间里不用关门，整夜都不会被蚊子打扰。\n\n##方法三:\n　　![这里写图片描述](http://imgnews.gmw.cn/attachement/jpg/site2/20160412/6765316288500183624.jpg)\n避免在花纹蚊出没的时段（上午7-9时，下午4时到黄昏）在树荫、树丛、凉亭等阴暗处逗留。\n\n## 方法四:\n　　![这里写图片描述](http://imgnews.gmw.cn/attachement/jpg/site2/20160412/3399212990045993728.jpg)\n　　在室内点燃柑橘皮，既能驱蚊又能消除屋内异味。\n　　\n## 方法五：\n　　![这里写图片描述](http://imgnews.gmw.cn/attachement/jpg/site2/20160412/4296329243977038086.jpg)\n关上门窗，窗前放一个盆子，盆子加混合洗衣粉的水，第二天水盆中就会有死去的蚊子。\n\n## 方法六：\n　　![这里写图片描述](http://imgnews.gmw.cn/attachement/jpg/site2/20160412/972716997894715278.jpg)\n房间里拜访驱蚊草。\n\n## 方法七：\n\n![这里写图片描述](http://imgnews.gmw.cn/attachement/jpg/site2/20160412/1259655297668004577.jpg)\n\n到登隔热流行区旅行，应穿上长袖衣服及长裤，并在外露皮肤及衣服上涂蚊虫趋避药物。\n\n## 方法八：\n　　![这里写图片描述](http://imgnews.gmw.cn/attachement/jpg/site2/20160412/7766628205407812354.jpg)\n　　3到5天刷洗水缸、换水一次，并翻盆倒罐、清除花盆、废气罐子等积水。\n\n## 方法九：\n　　![这里写图片描述](http://imgnews.gmw.cn/attachement/jpg/site2/20160412/3897745475809723662.jpg)\n　　房间里放几盒开着的风油精。\n# 11种防蚊子奇招妙法\n　1、维生素B泡水擦身，会让蚊子不敢近身，并且这种水溶性维生素没有副作用。\n\n　　2、在室内点燃干桔皮，可取代蚊香，既能驱蚊，又可消除屋内异味。\n\n　　3、尽量穿袜子。许多人喜欢夏天光脚穿鞋，殊不知穿袜子后，蚊子感觉人的皮肤湿度降低、皮表挥发物减少，会减少叮咬。\n\n　　4、在使用驱蚊药时，1个品牌连续使用2个月后，换一种药物驱蚊，效果更好。\n\n　　5、关上门窗，在窗前放置一盆混合洗衣粉的水，越日水盆中就会有一些死去的蚊子。每天持续使用，可以不用再喷杀虫剂了。\n\n　　6、在房间里放上几盒开盖的风油精、清冷油，或在墙上涂点薄荷。\n\n　　7、在身上或寝具上洒些香水。\n\n　　8、将樟脑丸磨碎、撒在屋内墙角。\n\n　　9、在室内的花盆里栽一两株番茄，番茄枝叶发出的气味会把蚊子驱除。\n\n　　10、在灯下挂一把香葱，或用纱袋装几根葱段，各种小虫都不会飞来。\n\n　　11、用橘红色玻璃纸或绸布套在灯泡上，蚊子最怕橘红色光。","slug":"gowaywenzi","published":1,"updated":"2018-04-03T07:05:42.832Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfjja6p8000664v43bqdb3x0","content":"<p>教你几招，蚊子一个夏天不敢进你的房间！！<br><a id=\"more\"></a></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>“多蚊季节来了，谁都不叮偏偏就来叮你？嗡嗡吵得睡不着？怕宝宝被感染？下面教教大家一些驱蚊小窍门！！</p>\n<h2 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a>方法一：</h2><p><img src=\"http://imgnews.gmw.cn/attachement/jpg/site2/20160412/5796591386340603909.jpg\" alt=\"这里写图片描述\"></p>\n<p>用空酒瓶装上糖水或啤酒放在阴暗处，蚊子闻到甜味就会往瓶子里钻，会被啤酒或糖水黏住致死。</p>\n<h2 id=\"方法二：\"><a href=\"#方法二：\" class=\"headerlink\" title=\"方法二：\"></a>方法二：</h2><p>沸过的醋用碟装，放到房间里不用关门，整夜都不会被蚊子打扰。</p>\n<p>##方法三:<br>　　<img src=\"http://imgnews.gmw.cn/attachement/jpg/site2/20160412/6765316288500183624.jpg\" alt=\"这里写图片描述\"><br>避免在花纹蚊出没的时段（上午7-9时，下午4时到黄昏）在树荫、树丛、凉亭等阴暗处逗留。</p>\n<h2 id=\"方法四\"><a href=\"#方法四\" class=\"headerlink\" title=\"方法四:\"></a>方法四:</h2><p>　　<img src=\"http://imgnews.gmw.cn/attachement/jpg/site2/20160412/3399212990045993728.jpg\" alt=\"这里写图片描述\"><br>　　在室内点燃柑橘皮，既能驱蚊又能消除屋内异味。\n　　</p>\n<h2 id=\"方法五：\"><a href=\"#方法五：\" class=\"headerlink\" title=\"方法五：\"></a>方法五：</h2><p>　　<img src=\"http://imgnews.gmw.cn/attachement/jpg/site2/20160412/4296329243977038086.jpg\" alt=\"这里写图片描述\"><br>关上门窗，窗前放一个盆子，盆子加混合洗衣粉的水，第二天水盆中就会有死去的蚊子。</p>\n<h2 id=\"方法六：\"><a href=\"#方法六：\" class=\"headerlink\" title=\"方法六：\"></a>方法六：</h2><p>　　<img src=\"http://imgnews.gmw.cn/attachement/jpg/site2/20160412/972716997894715278.jpg\" alt=\"这里写图片描述\"><br>房间里拜访驱蚊草。</p>\n<h2 id=\"方法七：\"><a href=\"#方法七：\" class=\"headerlink\" title=\"方法七：\"></a>方法七：</h2><p><img src=\"http://imgnews.gmw.cn/attachement/jpg/site2/20160412/1259655297668004577.jpg\" alt=\"这里写图片描述\"></p>\n<p>到登隔热流行区旅行，应穿上长袖衣服及长裤，并在外露皮肤及衣服上涂蚊虫趋避药物。</p>\n<h2 id=\"方法八：\"><a href=\"#方法八：\" class=\"headerlink\" title=\"方法八：\"></a>方法八：</h2><p>　　<img src=\"http://imgnews.gmw.cn/attachement/jpg/site2/20160412/7766628205407812354.jpg\" alt=\"这里写图片描述\"><br>　　3到5天刷洗水缸、换水一次，并翻盆倒罐、清除花盆、废气罐子等积水。</p>\n<h2 id=\"方法九：\"><a href=\"#方法九：\" class=\"headerlink\" title=\"方法九：\"></a>方法九：</h2><p>　　<img src=\"http://imgnews.gmw.cn/attachement/jpg/site2/20160412/3897745475809723662.jpg\" alt=\"这里写图片描述\"><br>　　房间里放几盒开着的风油精。</p>\n<h1 id=\"11种防蚊子奇招妙法\"><a href=\"#11种防蚊子奇招妙法\" class=\"headerlink\" title=\"11种防蚊子奇招妙法\"></a>11种防蚊子奇招妙法</h1><p>　1、维生素B泡水擦身，会让蚊子不敢近身，并且这种水溶性维生素没有副作用。</p>\n<p>　　2、在室内点燃干桔皮，可取代蚊香，既能驱蚊，又可消除屋内异味。</p>\n<p>　　3、尽量穿袜子。许多人喜欢夏天光脚穿鞋，殊不知穿袜子后，蚊子感觉人的皮肤湿度降低、皮表挥发物减少，会减少叮咬。</p>\n<p>　　4、在使用驱蚊药时，1个品牌连续使用2个月后，换一种药物驱蚊，效果更好。</p>\n<p>　　5、关上门窗，在窗前放置一盆混合洗衣粉的水，越日水盆中就会有一些死去的蚊子。每天持续使用，可以不用再喷杀虫剂了。</p>\n<p>　　6、在房间里放上几盒开盖的风油精、清冷油，或在墙上涂点薄荷。</p>\n<p>　　7、在身上或寝具上洒些香水。</p>\n<p>　　8、将樟脑丸磨碎、撒在屋内墙角。</p>\n<p>　　9、在室内的花盆里栽一两株番茄，番茄枝叶发出的气味会把蚊子驱除。</p>\n<p>　　10、在灯下挂一把香葱，或用纱袋装几根葱段，各种小虫都不会飞来。</p>\n<p>　　11、用橘红色玻璃纸或绸布套在灯泡上，蚊子最怕橘红色光。</p>\n","site":{"data":{"hint":{"new":{"selector":[".menu-reading",".menu-about"]}},"link":{"social":{"weibo":"http://weibo.com/","github":"https://github.com/xxl6097","rss":"/atom.xml"},"extern":{"raytaylorism主题作者的技术博客":"http://raytaylorlin.com/","Github地址（测试友情链接）":"https://github.com/xxl6097"}},"about":{"avatar":"http://uuxia.cn/image/icon.png","name":"你的大名","tag":"Web前端/Android/Java/C++/技术宅","desc":"在浮躁的世界安安静静地敲代码","skills":{"Javascript":8,"Python":6,"invisible-split-line-1":-1,"Node.js":4},"projects":[{"name":"你的项目A","image":"https://d13yacurqjgara.cloudfront.net/users/138819/screenshots/2578899/dribbble_800x600_01_1x.png","tags":["2016年","项目标签"],"description":"你的项目A的简介","link_text":"网站链接","link":"https://dribbble.com/"},{"name":"你的作品B","image":"https://d13yacurqjgara.cloudfront.net/users/4094/screenshots/2578885/time-lords-drib_1x.jpg","description":"你的作品B的简介","tags":["Github","设计"],"link_text":"Github地址","link":"https://github.com/"}],"reward":["http://uuxia.cn/image/wechat.png","http://uuxia.cn/image/alipay.png"]},"reading":{"define":{"readed":"已读","reading":"在读","wanted":"想读"},"contents":{"readed":[{"title":"众妙之门：网站UI设计之道","cover":"http://img3.douban.com/lpic/s23139051.jpg","review":"推荐非UI人士了解UI阅读。","score":"7","doubanLink":"http://book.douban.com/subject/20281463/"},{"title":"JavaScript模式","cover":"http://img5.douban.com/lpic/s11337059.jpg","review":"书很薄，但内容相当实用。","score":"8.5","doubanLink":"http://book.douban.com/subject/11506062/"},{"title":"JavaScript语言精粹","cover":"http://img3.douban.com/lpic/s11373174.jpg","review":"这是一本前端人员的基础书，强烈推荐阅读，而且越早看受益越多！","score":"9.5","doubanLink":"http://book.douban.com/subject/11874748/"}],"reading":[{"title":"网络游戏核心技术与实战","cover":"http://img4.douban.com/lpic/s27881888.jpg","review":"","score":null,"doubanLink":"http://book.douban.com/subject/25850090/"}],"wanted":[{"title":"计算机程序的构造和解释","cover":"http://img4.douban.com/lpic/s1113106.jpg","review":"","score":null,"doubanLink":"http://book.douban.com/subject/1148282/"}]}}}},"excerpt":"<p>教你几招，蚊子一个夏天不敢进你的房间！！<br></p>","more":"<p></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>“多蚊季节来了，谁都不叮偏偏就来叮你？嗡嗡吵得睡不着？怕宝宝被感染？下面教教大家一些驱蚊小窍门！！</p>\n<h2 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a>方法一：</h2><p><img src=\"http://imgnews.gmw.cn/attachement/jpg/site2/20160412/5796591386340603909.jpg\" alt=\"这里写图片描述\"></p>\n<p>用空酒瓶装上糖水或啤酒放在阴暗处，蚊子闻到甜味就会往瓶子里钻，会被啤酒或糖水黏住致死。</p>\n<h2 id=\"方法二：\"><a href=\"#方法二：\" class=\"headerlink\" title=\"方法二：\"></a>方法二：</h2><p>沸过的醋用碟装，放到房间里不用关门，整夜都不会被蚊子打扰。</p>\n<p>##方法三:<br>　　<img src=\"http://imgnews.gmw.cn/attachement/jpg/site2/20160412/6765316288500183624.jpg\" alt=\"这里写图片描述\"><br>避免在花纹蚊出没的时段（上午7-9时，下午4时到黄昏）在树荫、树丛、凉亭等阴暗处逗留。</p>\n<h2 id=\"方法四\"><a href=\"#方法四\" class=\"headerlink\" title=\"方法四:\"></a>方法四:</h2><p>　　<img src=\"http://imgnews.gmw.cn/attachement/jpg/site2/20160412/3399212990045993728.jpg\" alt=\"这里写图片描述\"><br>　　在室内点燃柑橘皮，既能驱蚊又能消除屋内异味。\n　　</p>\n<h2 id=\"方法五：\"><a href=\"#方法五：\" class=\"headerlink\" title=\"方法五：\"></a>方法五：</h2><p>　　<img src=\"http://imgnews.gmw.cn/attachement/jpg/site2/20160412/4296329243977038086.jpg\" alt=\"这里写图片描述\"><br>关上门窗，窗前放一个盆子，盆子加混合洗衣粉的水，第二天水盆中就会有死去的蚊子。</p>\n<h2 id=\"方法六：\"><a href=\"#方法六：\" class=\"headerlink\" title=\"方法六：\"></a>方法六：</h2><p>　　<img src=\"http://imgnews.gmw.cn/attachement/jpg/site2/20160412/972716997894715278.jpg\" alt=\"这里写图片描述\"><br>房间里拜访驱蚊草。</p>\n<h2 id=\"方法七：\"><a href=\"#方法七：\" class=\"headerlink\" title=\"方法七：\"></a>方法七：</h2><p><img src=\"http://imgnews.gmw.cn/attachement/jpg/site2/20160412/1259655297668004577.jpg\" alt=\"这里写图片描述\"></p>\n<p>到登隔热流行区旅行，应穿上长袖衣服及长裤，并在外露皮肤及衣服上涂蚊虫趋避药物。</p>\n<h2 id=\"方法八：\"><a href=\"#方法八：\" class=\"headerlink\" title=\"方法八：\"></a>方法八：</h2><p>　　<img src=\"http://imgnews.gmw.cn/attachement/jpg/site2/20160412/7766628205407812354.jpg\" alt=\"这里写图片描述\"><br>　　3到5天刷洗水缸、换水一次，并翻盆倒罐、清除花盆、废气罐子等积水。</p>\n<h2 id=\"方法九：\"><a href=\"#方法九：\" class=\"headerlink\" title=\"方法九：\"></a>方法九：</h2><p>　　<img src=\"http://imgnews.gmw.cn/attachement/jpg/site2/20160412/3897745475809723662.jpg\" alt=\"这里写图片描述\"><br>　　房间里放几盒开着的风油精。</p>\n<h1 id=\"11种防蚊子奇招妙法\"><a href=\"#11种防蚊子奇招妙法\" class=\"headerlink\" title=\"11种防蚊子奇招妙法\"></a>11种防蚊子奇招妙法</h1><p>　1、维生素B泡水擦身，会让蚊子不敢近身，并且这种水溶性维生素没有副作用。</p>\n<p>　　2、在室内点燃干桔皮，可取代蚊香，既能驱蚊，又可消除屋内异味。</p>\n<p>　　3、尽量穿袜子。许多人喜欢夏天光脚穿鞋，殊不知穿袜子后，蚊子感觉人的皮肤湿度降低、皮表挥发物减少，会减少叮咬。</p>\n<p>　　4、在使用驱蚊药时，1个品牌连续使用2个月后，换一种药物驱蚊，效果更好。</p>\n<p>　　5、关上门窗，在窗前放置一盆混合洗衣粉的水，越日水盆中就会有一些死去的蚊子。每天持续使用，可以不用再喷杀虫剂了。</p>\n<p>　　6、在房间里放上几盒开盖的风油精、清冷油，或在墙上涂点薄荷。</p>\n<p>　　7、在身上或寝具上洒些香水。</p>\n<p>　　8、将樟脑丸磨碎、撒在屋内墙角。</p>\n<p>　　9、在室内的花盆里栽一两株番茄，番茄枝叶发出的气味会把蚊子驱除。</p>\n<p>　　10、在灯下挂一把香葱，或用纱袋装几根葱段，各种小虫都不会飞来。</p>\n<p>　　11、用橘红色玻璃纸或绸布套在灯泡上，蚊子最怕橘红色光。</p>"},{"title":"ios开发笔记","date":"2016-05-09T19:24:00.000Z","_content":"http://www.williamlong.info/archives/4319.html\n- [x] 证书知识及准备工作\n- [x] 几种开发者帐号区别\n- [x] 真机调试流程\n- [x] 内测发布流程\n- [ ] Appstore 上架流程\n<!--more-->\n\n## 目录导航\n\n- [证书知识及准备工作](#证书知识及准备工作)\n  - [基础问题答疑](#基础问题答疑)\n    - [什么是证书](#什么是证书)\n    - [什么时候需要证书](#什么时候需要证书)\n    - [证书如何获得](#证书如何获得)\n    - [如何对代码进行签名](#如何对代码进行签名)\n    - [我生成的私钥如何共享给团队成员](#我生成的私钥如何共享给团队成员)\n  - [各流程中证书的需求情况](#各流程中证书的需求情况)\n    - [模拟器调试](#模拟器调试)\n    - [真机调试](#真机调试)\n    - [打包和发布](#打包和发布)\n    - [消息推送后端服务](#消息推送后端服务)\n  - [开发中常见的证书及相关文件介绍](#开发中常见的证书及相关文件介绍)\n    - [CSR(certificate request) 文件](#csrcertificate-request-%E6%96%87%E4%BB%B6)\n    - [开发者证书](#开发者证书)\n    - [apns(Apple Push Notification Service) 证书](#apnsapple-push-notification-service-%E8%AF%81%E4%B9%A6)\n    - [p12(Personal Information Exchange) 证书](#p12personal-information-exchange-%E8%AF%81%E4%B9%A6)\n    - [描述文件(Provisioning Profiles)](##%E6%8F%8F%E8%BF%B0%E6%96%87%E4%BB%B6provisioning-profiles)\n  - [附录1: 开发准备相关的网址](#%E9%99%84%E5%BD%951-%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87%E7%9B%B8%E5%85%B3%E7%9A%84%E7%BD%91%E5%9D%80)\n- [几种开发者帐号区别](#几种开发者帐号区别)\n  - [关键区别](#关键区别)\n- [真机调试流程](#真机调试流程)\n  - [基本概念](##%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5)\n  - [条件和流程](#条件和流程)\n- [内测发布流程](#内测发布流程)\n  - [基本概念](#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5-1)\n  - [实现条件](#实现条件)\n  - [几种常见的分发途径](#几种常见的分发途径)\n  - [附录2: 常见分发渠道及工具地址](#%E9%99%84%E5%BD%952-%E5%B8%B8%E8%A7%81%E5%88%86%E5%8F%91%E6%B8%A0%E9%81%93%E5%8F%8A%E5%B7%A5%E5%85%B7%E5%9C%B0%E5%9D%80)\n- [Appstore 上架流程](#appstore-%E4%B8%8A%E6%9E%B6%E6%B5%81%E7%A8%8B)\n  - [附录3: App store最新审核标准(2015.3)](#%E9%99%84%E5%BD%953-app-store%E6%9C%80%E6%96%B0%E5%AE%A1%E6%A0%B8%E6%A0%87%E5%87%8620153)\n\n## 证书知识及准备工作\n\n### 基础问题答疑\n\n#### 什么是证书\n\n由 apple 官方颁发, 用以证明开发者身份的特殊文件, 在 iOS 开发中主要用于代码签名, 保障 iOS 生态的健康安全, 分为开发者证书和发布者证书\n\n#### 什么时候需要证书\n\n只有在本机模拟器调试时无需代码签名, 当 App 需要在真机运行和发布时需要使用相应证书进行签名\n\n#### 证书如何获得\n\n首先需要拥有相应权限的开发者帐号, 通过在本地生成配对的密钥, 向 [provisioning portal](https://developer.apple.com/ios/manage/overview/index.action) 提交公钥后换取, 后续证书在使用时会验证本地私钥\n\n#### 如何对代码进行签名\n\n在 xcode 中, 使用描述文件(provision profile 包含调试者证书, 授权设备清单, 应用ID), 在 `Build Settings` 中选择存于 `Keychain Access` 中的证书文件设置调试和发布任务时的代码签名\n\n#### 我生成的私钥如何共享给团队成员\n\n在 `Keychain Access` 中找到导入的证书, 右击导出为包含私钥的 Personal Information Exchange(.p12)文件(导出时可以创建密码), 团队成员再导入 `p12` 证书后就完整包含了证书和私钥\n\n### 各流程中证书的需求情况\n\n#### 模拟器调试\n\n不需要\n\n#### 真机调试\n\n- 描述文件(Provisioning Profiles)\n\n- 开发者证书(ios_development.cer)\n\n#### 打包和发布\n\n- 描述文件(Provisioning Profiles)\n\n- 可用于发布的开发者证书(ios_distribution.cer)\n\n#### 消息推送后端服务\n\n- apns 证书\n\n### 开发中常见的证书及相关文件介绍\n\n#### CSR(certificate request) 文件\n\n用于换取证书的公钥文件, 实际是在本地基于 `RSA` 加密得到配对的密钥, 私钥存于 `Keychain Access` 用于签名, 公钥作为换取证书的凭证\n\n##### 生成方法\n\n- OSX 系统自带的 **Keychain Access**\n\n  + 选择 \"Request a Certificate From a Certificate Authority…\"\n\n  + 输入 email 等信息后保存为 `.certSigningRequest` 文件\n\n- 命令行下使用 **openssl** 生成\n\n```bash\n$ openssl genrsa -out private.key 2048\n$ openssl req -new -sha256 -key private.key -out my.certSigningRequest\n```\n\n#### 开发者证书\n\n由 apple 官方颁发, 用来证明开发者资格的证书文件, 分开发(ios_development.cer)和发布(ios_distribution.cer)两种\n\n`cer` 证书跟开发机(私钥)绑定只能在拥有私钥的机器上使用, 如果要迁移机器需要导出为 `p12` 文件\n\n##### 生成方法\n\n在 [开发者中心](https://developer.apple.com/devcenter/ios/index.action) \"certificates\" 面板中添加 `certificate` 并上传刚刚生成的 `CSR` 文件, 获取 `ios_development.cer`\n\n#### apns(Apple Push Notification Service) 证书\n\n用于服务端消息推送, 类似 ssl 证书使用, 和 App 端的开发打包没有关系\n\n##### 生成方法\n\n在 [开发者中心](https://developer.apple.com/devcenter/ios/index.action) \"Identifiers\" 面板中添加 `App ID` 并上传刚刚生成的 `CSR` 文件, 获取 `aps_production.cer`\n\n#### p12(Personal Information Exchange) 证书\n\n`p12` 证书实际是包含了 `cer` 证书及私钥信息, 可以分发给团队成员\n\n##### 生成方法\n\n在 **Keychain Access** 中找到已经导入的 `cer` 证书, 点右键导出为 `p12` 格式\n\n#### 描述文件(Provisioning Profiles)\n\n包含 `certificate` `appID` `devices id` 的文件用于在 xcode 调试打包时提供授权的配置信息\n\n##### 生成方法\n\n- 在 [开发者中心](https://developer.apple.com/devcenter/ios/index.action) \"Provisioning Profiles\" 面板中添加 `iOS Provisioning Profiles` 并上传刚刚生成的 `CSR` 文件, 获取 `.mobileprovision` 文件\n\n- 在 xcode 登录开发者帐号后可以连接开发者中心获取\n\n### 附录1: 开发准备相关的网址\n\n> 开发者中心\n> https://developer.apple.com/devcenter/ios/index.action\n> \n> iOS 描述管理(配置证书、描述文件、推送服务)\n> https://developer.apple.com/ios/manage/overview/index.action\n> \n> 切换团队(在 web 界面上死活没有找到)\n> https://developer.apple.com/account/selectTeam.action\n> \n> iOS 上架 Appstore\n> http://itunesconnect.apple.com/\n\n## 几种开发者帐号区别\n\n> 详见: https://developer.apple.com/programs/start/ios/\n\n- [个人(individual)](https://developer.apple.com/programs/ios/) **$99**/year\n- [公司(company)](https://developer.apple.com/programs/ios/) **$99**/year\n- [企业(enterprise)](https://developer.apple.com/programs/ios/enterprise/) **$299**/year\n- [大学(University)](https://developer.apple.com/programs/start/university/) **free**\n\n### 关键区别\n\n- 个人帐号可以真机调试, 发布 appstore, 每年 最多为 100台设备分发\n- 公司帐号和个人帐号类似, 只有这两种帐号可以发布 appstore, 主要特权是可以添加多个开发者子账号, 但只允许主账号提交, 发布等操作, 在协同开发时比较灵活, 可以各自管理授权设备等\n- 企业帐号**无法用于 appstore 发布**, 但可以不通过 appstore 发布任意 iphone 都可以安装的应用\n- 大学帐号不能发布 appstore, 主要拥有真机调试的权限\n\n## 真机调试流程\n\n### 基本概念\n\n真机调试指 mac 连上 iphone, xcode 可以直接以这台 iphone 设备为 build target, 能在 iphone 里执行编译结果\n\n### 条件和流程\n\n分为拥有独立开发者帐号(也包括公司帐号或企业帐号成员)和共享开发者帐号两种情况\n\n#### 拥有独立开发者帐号\n\n- 1. 在 [provisioning portal](https://developer.apple.com/ios/manage/overview/index.action) 新建应用, 配置授权设备等\n- 2. 开发机上导入证书\n- 3. 在 xcode 上登录开发者帐号, 不需要准备描述文件, xcode 会自动生成(如果是公司帐号可以自动生成 `iOS Team Provisioning Profile`)\n\n#### 共享开发者帐号\n\n如果无法在 xcode 登录一个开发者帐号, 也可以通过他人对你手机和应用 id 的授权, 得到 `.mobileprovision` 描述文件再导入其含私钥的证书(`p12`) 即可, 具体步骤如下:\n\n- 1. 获得手机的 `udid` (可以连上 mac, 在 itunes 中查看)\n- 2. 告知对方 `udid` (用以设备授权) 和 应用 id\n- 3. 得到对方生成的证书和描述文件后, 先导入 `p12` 证书, 再双击 `mobileprovision` 文件\n- 4. 连接手机, 在 xcode 中选择 build target 为已连接的手机\n\n> 对刚入门的个人开发者而言, 可以在淘宝搜 `iOS真机调试` 花几元购买一份授权, 包含(`p12` 证书 和 `.mobileprovision` 描述文件)\n\n## 内测发布流程\n\n### 基本概念\n\n当 App 开发进行到一定程度, 需要更多的人参与测试, 需要谋求一种方式方便应用能安装进更多的设备中\n\n### 实现条件\n\n进行内测发布主要的关键点是:\n\n- 1. 是如何将应用打包为 `.ipa`\n\nxcode6 以后, 个人/公司帐号无法对应用打包为 `.ipa`, 要么用 xcode5 打包要么拥有企业帐号级别的授权\n\n- 2. 设备需不需要授权\n\n个人/公司帐号权限只有在 `TestFlight` / 越狱渠道下完成不授权安装; 企业帐号授权可以在 `ad-hoc` / `in-house` 渠道下分发, 完成不授权设备安装\n\n### 几种常见的分发途径\n\n- ad-hoc\n\n打包时必须在登录企业帐号(或其成员)并已导入证书和描述文件的情况下, 任何用户(未授权)都可以在手机上用浏览器访问一个 url(例: itms-services://?action=download-manifest&url=https://example.com/manifest.plist) 完成安装\n\n最大的问题是安装量有 100 的上限, 无法作为一个量很大的分发渠道\n\n- in-house\n\n针对企业内部用户进行分发, 相比 `ad-hoc` 无安装量上限\n\n> iOS 8.1.3 开始不能企业证书 Iresign 方式重新签名的应用无法安装\n> https://support.apple.com/en-us/HT204245\n\n- TestFlight\n\n仅支持 **iOS8.0** 以上, 不需要对设备 `udid` 进行授权, 适合个人 / 公司开发者, 在应用发布前可以开启 TestFlight Beta 测试并添加测试者的 iTunes Connect 帐号, 需要待测用户拥有 iTunes Connect 帐号并在设备安装 `TestFlight` 客户端\n\n这种方式非常便于推送应用更新和收集测试信息\n\n- 导出 ipa 包, 越狱安装\n\n如果测试设备都越狱了, 这种方式非常灵活简单, 只有能导出 ipa 包就能通过 [itools](http://www.itools.cn/) 等第三方工具安装\n\n### 附录2: 常见分发渠道及工具地址\n\n> fir-第三方应用托管平台\n> http://fir.im/\n> \n> TestFlight\n> https://developer.apple.com/testflight/\n> \n> Agile-百度内部 ios 分发测试平台\n> http://agile.baidu.com\n> \n> fir-分发相关工具\n> http://fir.im/dev/tools\n> \n> itools\n> http://www.itools.cn/\n\n## Appstore 上架流程\n\n@TODO\n\n### 附录3: App store最新审核标准(2015.3)\n\n> [App store最新审核标准(2015.3) 中文翻译](Appstore最新审核标准_2015-3.md)\n\n> [App store最新审核标准(2015.3) 英文原版](https://developer.apple.com/app-store/review/guidelines)\n\n","source":"_posts/iosdev.md","raw":"---\ntitle: ios开发笔记\ndate: 2016-05-10 03:24:00\ntags: [ios]\ncategories: ios\n\n---\nhttp://www.williamlong.info/archives/4319.html\n- [x] 证书知识及准备工作\n- [x] 几种开发者帐号区别\n- [x] 真机调试流程\n- [x] 内测发布流程\n- [ ] Appstore 上架流程\n<!--more-->\n\n## 目录导航\n\n- [证书知识及准备工作](#证书知识及准备工作)\n  - [基础问题答疑](#基础问题答疑)\n    - [什么是证书](#什么是证书)\n    - [什么时候需要证书](#什么时候需要证书)\n    - [证书如何获得](#证书如何获得)\n    - [如何对代码进行签名](#如何对代码进行签名)\n    - [我生成的私钥如何共享给团队成员](#我生成的私钥如何共享给团队成员)\n  - [各流程中证书的需求情况](#各流程中证书的需求情况)\n    - [模拟器调试](#模拟器调试)\n    - [真机调试](#真机调试)\n    - [打包和发布](#打包和发布)\n    - [消息推送后端服务](#消息推送后端服务)\n  - [开发中常见的证书及相关文件介绍](#开发中常见的证书及相关文件介绍)\n    - [CSR(certificate request) 文件](#csrcertificate-request-%E6%96%87%E4%BB%B6)\n    - [开发者证书](#开发者证书)\n    - [apns(Apple Push Notification Service) 证书](#apnsapple-push-notification-service-%E8%AF%81%E4%B9%A6)\n    - [p12(Personal Information Exchange) 证书](#p12personal-information-exchange-%E8%AF%81%E4%B9%A6)\n    - [描述文件(Provisioning Profiles)](##%E6%8F%8F%E8%BF%B0%E6%96%87%E4%BB%B6provisioning-profiles)\n  - [附录1: 开发准备相关的网址](#%E9%99%84%E5%BD%951-%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87%E7%9B%B8%E5%85%B3%E7%9A%84%E7%BD%91%E5%9D%80)\n- [几种开发者帐号区别](#几种开发者帐号区别)\n  - [关键区别](#关键区别)\n- [真机调试流程](#真机调试流程)\n  - [基本概念](##%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5)\n  - [条件和流程](#条件和流程)\n- [内测发布流程](#内测发布流程)\n  - [基本概念](#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5-1)\n  - [实现条件](#实现条件)\n  - [几种常见的分发途径](#几种常见的分发途径)\n  - [附录2: 常见分发渠道及工具地址](#%E9%99%84%E5%BD%952-%E5%B8%B8%E8%A7%81%E5%88%86%E5%8F%91%E6%B8%A0%E9%81%93%E5%8F%8A%E5%B7%A5%E5%85%B7%E5%9C%B0%E5%9D%80)\n- [Appstore 上架流程](#appstore-%E4%B8%8A%E6%9E%B6%E6%B5%81%E7%A8%8B)\n  - [附录3: App store最新审核标准(2015.3)](#%E9%99%84%E5%BD%953-app-store%E6%9C%80%E6%96%B0%E5%AE%A1%E6%A0%B8%E6%A0%87%E5%87%8620153)\n\n## 证书知识及准备工作\n\n### 基础问题答疑\n\n#### 什么是证书\n\n由 apple 官方颁发, 用以证明开发者身份的特殊文件, 在 iOS 开发中主要用于代码签名, 保障 iOS 生态的健康安全, 分为开发者证书和发布者证书\n\n#### 什么时候需要证书\n\n只有在本机模拟器调试时无需代码签名, 当 App 需要在真机运行和发布时需要使用相应证书进行签名\n\n#### 证书如何获得\n\n首先需要拥有相应权限的开发者帐号, 通过在本地生成配对的密钥, 向 [provisioning portal](https://developer.apple.com/ios/manage/overview/index.action) 提交公钥后换取, 后续证书在使用时会验证本地私钥\n\n#### 如何对代码进行签名\n\n在 xcode 中, 使用描述文件(provision profile 包含调试者证书, 授权设备清单, 应用ID), 在 `Build Settings` 中选择存于 `Keychain Access` 中的证书文件设置调试和发布任务时的代码签名\n\n#### 我生成的私钥如何共享给团队成员\n\n在 `Keychain Access` 中找到导入的证书, 右击导出为包含私钥的 Personal Information Exchange(.p12)文件(导出时可以创建密码), 团队成员再导入 `p12` 证书后就完整包含了证书和私钥\n\n### 各流程中证书的需求情况\n\n#### 模拟器调试\n\n不需要\n\n#### 真机调试\n\n- 描述文件(Provisioning Profiles)\n\n- 开发者证书(ios_development.cer)\n\n#### 打包和发布\n\n- 描述文件(Provisioning Profiles)\n\n- 可用于发布的开发者证书(ios_distribution.cer)\n\n#### 消息推送后端服务\n\n- apns 证书\n\n### 开发中常见的证书及相关文件介绍\n\n#### CSR(certificate request) 文件\n\n用于换取证书的公钥文件, 实际是在本地基于 `RSA` 加密得到配对的密钥, 私钥存于 `Keychain Access` 用于签名, 公钥作为换取证书的凭证\n\n##### 生成方法\n\n- OSX 系统自带的 **Keychain Access**\n\n  + 选择 \"Request a Certificate From a Certificate Authority…\"\n\n  + 输入 email 等信息后保存为 `.certSigningRequest` 文件\n\n- 命令行下使用 **openssl** 生成\n\n```bash\n$ openssl genrsa -out private.key 2048\n$ openssl req -new -sha256 -key private.key -out my.certSigningRequest\n```\n\n#### 开发者证书\n\n由 apple 官方颁发, 用来证明开发者资格的证书文件, 分开发(ios_development.cer)和发布(ios_distribution.cer)两种\n\n`cer` 证书跟开发机(私钥)绑定只能在拥有私钥的机器上使用, 如果要迁移机器需要导出为 `p12` 文件\n\n##### 生成方法\n\n在 [开发者中心](https://developer.apple.com/devcenter/ios/index.action) \"certificates\" 面板中添加 `certificate` 并上传刚刚生成的 `CSR` 文件, 获取 `ios_development.cer`\n\n#### apns(Apple Push Notification Service) 证书\n\n用于服务端消息推送, 类似 ssl 证书使用, 和 App 端的开发打包没有关系\n\n##### 生成方法\n\n在 [开发者中心](https://developer.apple.com/devcenter/ios/index.action) \"Identifiers\" 面板中添加 `App ID` 并上传刚刚生成的 `CSR` 文件, 获取 `aps_production.cer`\n\n#### p12(Personal Information Exchange) 证书\n\n`p12` 证书实际是包含了 `cer` 证书及私钥信息, 可以分发给团队成员\n\n##### 生成方法\n\n在 **Keychain Access** 中找到已经导入的 `cer` 证书, 点右键导出为 `p12` 格式\n\n#### 描述文件(Provisioning Profiles)\n\n包含 `certificate` `appID` `devices id` 的文件用于在 xcode 调试打包时提供授权的配置信息\n\n##### 生成方法\n\n- 在 [开发者中心](https://developer.apple.com/devcenter/ios/index.action) \"Provisioning Profiles\" 面板中添加 `iOS Provisioning Profiles` 并上传刚刚生成的 `CSR` 文件, 获取 `.mobileprovision` 文件\n\n- 在 xcode 登录开发者帐号后可以连接开发者中心获取\n\n### 附录1: 开发准备相关的网址\n\n> 开发者中心\n> https://developer.apple.com/devcenter/ios/index.action\n> \n> iOS 描述管理(配置证书、描述文件、推送服务)\n> https://developer.apple.com/ios/manage/overview/index.action\n> \n> 切换团队(在 web 界面上死活没有找到)\n> https://developer.apple.com/account/selectTeam.action\n> \n> iOS 上架 Appstore\n> http://itunesconnect.apple.com/\n\n## 几种开发者帐号区别\n\n> 详见: https://developer.apple.com/programs/start/ios/\n\n- [个人(individual)](https://developer.apple.com/programs/ios/) **$99**/year\n- [公司(company)](https://developer.apple.com/programs/ios/) **$99**/year\n- [企业(enterprise)](https://developer.apple.com/programs/ios/enterprise/) **$299**/year\n- [大学(University)](https://developer.apple.com/programs/start/university/) **free**\n\n### 关键区别\n\n- 个人帐号可以真机调试, 发布 appstore, 每年 最多为 100台设备分发\n- 公司帐号和个人帐号类似, 只有这两种帐号可以发布 appstore, 主要特权是可以添加多个开发者子账号, 但只允许主账号提交, 发布等操作, 在协同开发时比较灵活, 可以各自管理授权设备等\n- 企业帐号**无法用于 appstore 发布**, 但可以不通过 appstore 发布任意 iphone 都可以安装的应用\n- 大学帐号不能发布 appstore, 主要拥有真机调试的权限\n\n## 真机调试流程\n\n### 基本概念\n\n真机调试指 mac 连上 iphone, xcode 可以直接以这台 iphone 设备为 build target, 能在 iphone 里执行编译结果\n\n### 条件和流程\n\n分为拥有独立开发者帐号(也包括公司帐号或企业帐号成员)和共享开发者帐号两种情况\n\n#### 拥有独立开发者帐号\n\n- 1. 在 [provisioning portal](https://developer.apple.com/ios/manage/overview/index.action) 新建应用, 配置授权设备等\n- 2. 开发机上导入证书\n- 3. 在 xcode 上登录开发者帐号, 不需要准备描述文件, xcode 会自动生成(如果是公司帐号可以自动生成 `iOS Team Provisioning Profile`)\n\n#### 共享开发者帐号\n\n如果无法在 xcode 登录一个开发者帐号, 也可以通过他人对你手机和应用 id 的授权, 得到 `.mobileprovision` 描述文件再导入其含私钥的证书(`p12`) 即可, 具体步骤如下:\n\n- 1. 获得手机的 `udid` (可以连上 mac, 在 itunes 中查看)\n- 2. 告知对方 `udid` (用以设备授权) 和 应用 id\n- 3. 得到对方生成的证书和描述文件后, 先导入 `p12` 证书, 再双击 `mobileprovision` 文件\n- 4. 连接手机, 在 xcode 中选择 build target 为已连接的手机\n\n> 对刚入门的个人开发者而言, 可以在淘宝搜 `iOS真机调试` 花几元购买一份授权, 包含(`p12` 证书 和 `.mobileprovision` 描述文件)\n\n## 内测发布流程\n\n### 基本概念\n\n当 App 开发进行到一定程度, 需要更多的人参与测试, 需要谋求一种方式方便应用能安装进更多的设备中\n\n### 实现条件\n\n进行内测发布主要的关键点是:\n\n- 1. 是如何将应用打包为 `.ipa`\n\nxcode6 以后, 个人/公司帐号无法对应用打包为 `.ipa`, 要么用 xcode5 打包要么拥有企业帐号级别的授权\n\n- 2. 设备需不需要授权\n\n个人/公司帐号权限只有在 `TestFlight` / 越狱渠道下完成不授权安装; 企业帐号授权可以在 `ad-hoc` / `in-house` 渠道下分发, 完成不授权设备安装\n\n### 几种常见的分发途径\n\n- ad-hoc\n\n打包时必须在登录企业帐号(或其成员)并已导入证书和描述文件的情况下, 任何用户(未授权)都可以在手机上用浏览器访问一个 url(例: itms-services://?action=download-manifest&url=https://example.com/manifest.plist) 完成安装\n\n最大的问题是安装量有 100 的上限, 无法作为一个量很大的分发渠道\n\n- in-house\n\n针对企业内部用户进行分发, 相比 `ad-hoc` 无安装量上限\n\n> iOS 8.1.3 开始不能企业证书 Iresign 方式重新签名的应用无法安装\n> https://support.apple.com/en-us/HT204245\n\n- TestFlight\n\n仅支持 **iOS8.0** 以上, 不需要对设备 `udid` 进行授权, 适合个人 / 公司开发者, 在应用发布前可以开启 TestFlight Beta 测试并添加测试者的 iTunes Connect 帐号, 需要待测用户拥有 iTunes Connect 帐号并在设备安装 `TestFlight` 客户端\n\n这种方式非常便于推送应用更新和收集测试信息\n\n- 导出 ipa 包, 越狱安装\n\n如果测试设备都越狱了, 这种方式非常灵活简单, 只有能导出 ipa 包就能通过 [itools](http://www.itools.cn/) 等第三方工具安装\n\n### 附录2: 常见分发渠道及工具地址\n\n> fir-第三方应用托管平台\n> http://fir.im/\n> \n> TestFlight\n> https://developer.apple.com/testflight/\n> \n> Agile-百度内部 ios 分发测试平台\n> http://agile.baidu.com\n> \n> fir-分发相关工具\n> http://fir.im/dev/tools\n> \n> itools\n> http://www.itools.cn/\n\n## Appstore 上架流程\n\n@TODO\n\n### 附录3: App store最新审核标准(2015.3)\n\n> [App store最新审核标准(2015.3) 中文翻译](Appstore最新审核标准_2015-3.md)\n\n> [App store最新审核标准(2015.3) 英文原版](https://developer.apple.com/app-store/review/guidelines)\n\n","slug":"iosdev","published":1,"updated":"2018-04-03T07:05:42.841Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfjja6pk001164v4uoj0wc0f","content":"<p><a href=\"http://www.williamlong.info/archives/4319.html\" target=\"_blank\" rel=\"noopener\">http://www.williamlong.info/archives/4319.html</a></p>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 证书知识及准备工作</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 几种开发者帐号区别</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 真机调试流程</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 内测发布流程</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Appstore 上架流程<a id=\"more\"></a>\n</li>\n</ul>\n<h2 id=\"目录导航\"><a href=\"#目录导航\" class=\"headerlink\" title=\"目录导航\"></a>目录导航</h2><ul>\n<li><a href=\"#证书知识及准备工作\">证书知识及准备工作</a><ul>\n<li><a href=\"#基础问题答疑\">基础问题答疑</a><ul>\n<li><a href=\"#什么是证书\">什么是证书</a></li>\n<li><a href=\"#什么时候需要证书\">什么时候需要证书</a></li>\n<li><a href=\"#证书如何获得\">证书如何获得</a></li>\n<li><a href=\"#如何对代码进行签名\">如何对代码进行签名</a></li>\n<li><a href=\"#我生成的私钥如何共享给团队成员\">我生成的私钥如何共享给团队成员</a></li>\n</ul>\n</li>\n<li><a href=\"#各流程中证书的需求情况\">各流程中证书的需求情况</a><ul>\n<li><a href=\"#模拟器调试\">模拟器调试</a></li>\n<li><a href=\"#真机调试\">真机调试</a></li>\n<li><a href=\"#打包和发布\">打包和发布</a></li>\n<li><a href=\"#消息推送后端服务\">消息推送后端服务</a></li>\n</ul>\n</li>\n<li><a href=\"#开发中常见的证书及相关文件介绍\">开发中常见的证书及相关文件介绍</a><ul>\n<li><a href=\"#csrcertificate-request-%E6%96%87%E4%BB%B6\">CSR(certificate request) 文件</a></li>\n<li><a href=\"#开发者证书\">开发者证书</a></li>\n<li><a href=\"#apnsapple-push-notification-service-%E8%AF%81%E4%B9%A6\">apns(Apple Push Notification Service) 证书</a></li>\n<li><a href=\"#p12personal-information-exchange-%E8%AF%81%E4%B9%A6\">p12(Personal Information Exchange) 证书</a></li>\n<li><a href=\"##%E6%8F%8F%E8%BF%B0%E6%96%87%E4%BB%B6provisioning-profiles\">描述文件(Provisioning Profiles)</a></li>\n</ul>\n</li>\n<li><a href=\"#%E9%99%84%E5%BD%951-%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87%E7%9B%B8%E5%85%B3%E7%9A%84%E7%BD%91%E5%9D%80\">附录1: 开发准备相关的网址</a></li>\n</ul>\n</li>\n<li><a href=\"#几种开发者帐号区别\">几种开发者帐号区别</a><ul>\n<li><a href=\"#关键区别\">关键区别</a></li>\n</ul>\n</li>\n<li><a href=\"#真机调试流程\">真机调试流程</a><ul>\n<li><a href=\"##%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\">基本概念</a></li>\n<li><a href=\"#条件和流程\">条件和流程</a></li>\n</ul>\n</li>\n<li><a href=\"#内测发布流程\">内测发布流程</a><ul>\n<li><a href=\"#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5-1\">基本概念</a></li>\n<li><a href=\"#实现条件\">实现条件</a></li>\n<li><a href=\"#几种常见的分发途径\">几种常见的分发途径</a></li>\n<li><a href=\"#%E9%99%84%E5%BD%952-%E5%B8%B8%E8%A7%81%E5%88%86%E5%8F%91%E6%B8%A0%E9%81%93%E5%8F%8A%E5%B7%A5%E5%85%B7%E5%9C%B0%E5%9D%80\">附录2: 常见分发渠道及工具地址</a></li>\n</ul>\n</li>\n<li><a href=\"#appstore-%E4%B8%8A%E6%9E%B6%E6%B5%81%E7%A8%8B\">Appstore 上架流程</a><ul>\n<li><a href=\"#%E9%99%84%E5%BD%953-app-store%E6%9C%80%E6%96%B0%E5%AE%A1%E6%A0%B8%E6%A0%87%E5%87%8620153\">附录3: App store最新审核标准(2015.3)</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"证书知识及准备工作\"><a href=\"#证书知识及准备工作\" class=\"headerlink\" title=\"证书知识及准备工作\"></a>证书知识及准备工作</h2><h3 id=\"基础问题答疑\"><a href=\"#基础问题答疑\" class=\"headerlink\" title=\"基础问题答疑\"></a>基础问题答疑</h3><h4 id=\"什么是证书\"><a href=\"#什么是证书\" class=\"headerlink\" title=\"什么是证书\"></a>什么是证书</h4><p>由 apple 官方颁发, 用以证明开发者身份的特殊文件, 在 iOS 开发中主要用于代码签名, 保障 iOS 生态的健康安全, 分为开发者证书和发布者证书</p>\n<h4 id=\"什么时候需要证书\"><a href=\"#什么时候需要证书\" class=\"headerlink\" title=\"什么时候需要证书\"></a>什么时候需要证书</h4><p>只有在本机模拟器调试时无需代码签名, 当 App 需要在真机运行和发布时需要使用相应证书进行签名</p>\n<h4 id=\"证书如何获得\"><a href=\"#证书如何获得\" class=\"headerlink\" title=\"证书如何获得\"></a>证书如何获得</h4><p>首先需要拥有相应权限的开发者帐号, 通过在本地生成配对的密钥, 向 <a href=\"https://developer.apple.com/ios/manage/overview/index.action\" target=\"_blank\" rel=\"noopener\">provisioning portal</a> 提交公钥后换取, 后续证书在使用时会验证本地私钥</p>\n<h4 id=\"如何对代码进行签名\"><a href=\"#如何对代码进行签名\" class=\"headerlink\" title=\"如何对代码进行签名\"></a>如何对代码进行签名</h4><p>在 xcode 中, 使用描述文件(provision profile 包含调试者证书, 授权设备清单, 应用ID), 在 <code>Build Settings</code> 中选择存于 <code>Keychain Access</code> 中的证书文件设置调试和发布任务时的代码签名</p>\n<h4 id=\"我生成的私钥如何共享给团队成员\"><a href=\"#我生成的私钥如何共享给团队成员\" class=\"headerlink\" title=\"我生成的私钥如何共享给团队成员\"></a>我生成的私钥如何共享给团队成员</h4><p>在 <code>Keychain Access</code> 中找到导入的证书, 右击导出为包含私钥的 Personal Information Exchange(.p12)文件(导出时可以创建密码), 团队成员再导入 <code>p12</code> 证书后就完整包含了证书和私钥</p>\n<h3 id=\"各流程中证书的需求情况\"><a href=\"#各流程中证书的需求情况\" class=\"headerlink\" title=\"各流程中证书的需求情况\"></a>各流程中证书的需求情况</h3><h4 id=\"模拟器调试\"><a href=\"#模拟器调试\" class=\"headerlink\" title=\"模拟器调试\"></a>模拟器调试</h4><p>不需要</p>\n<h4 id=\"真机调试\"><a href=\"#真机调试\" class=\"headerlink\" title=\"真机调试\"></a>真机调试</h4><ul>\n<li><p>描述文件(Provisioning Profiles)</p>\n</li>\n<li><p>开发者证书(ios_development.cer)</p>\n</li>\n</ul>\n<h4 id=\"打包和发布\"><a href=\"#打包和发布\" class=\"headerlink\" title=\"打包和发布\"></a>打包和发布</h4><ul>\n<li><p>描述文件(Provisioning Profiles)</p>\n</li>\n<li><p>可用于发布的开发者证书(ios_distribution.cer)</p>\n</li>\n</ul>\n<h4 id=\"消息推送后端服务\"><a href=\"#消息推送后端服务\" class=\"headerlink\" title=\"消息推送后端服务\"></a>消息推送后端服务</h4><ul>\n<li>apns 证书</li>\n</ul>\n<h3 id=\"开发中常见的证书及相关文件介绍\"><a href=\"#开发中常见的证书及相关文件介绍\" class=\"headerlink\" title=\"开发中常见的证书及相关文件介绍\"></a>开发中常见的证书及相关文件介绍</h3><h4 id=\"CSR-certificate-request-文件\"><a href=\"#CSR-certificate-request-文件\" class=\"headerlink\" title=\"CSR(certificate request) 文件\"></a>CSR(certificate request) 文件</h4><p>用于换取证书的公钥文件, 实际是在本地基于 <code>RSA</code> 加密得到配对的密钥, 私钥存于 <code>Keychain Access</code> 用于签名, 公钥作为换取证书的凭证</p>\n<h5 id=\"生成方法\"><a href=\"#生成方法\" class=\"headerlink\" title=\"生成方法\"></a>生成方法</h5><ul>\n<li><p>OSX 系统自带的 <strong>Keychain Access</strong></p>\n<ul>\n<li><p>选择 “Request a Certificate From a Certificate Authority…”</p>\n</li>\n<li><p>输入 email 等信息后保存为 <code>.certSigningRequest</code> 文件</p>\n</li>\n</ul>\n</li>\n<li><p>命令行下使用 <strong>openssl</strong> 生成</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ openssl genrsa -out private.key 2048</span><br><span class=\"line\">$ openssl req -new -sha256 -key private.key -out my.certSigningRequest</span><br></pre></td></tr></table></figure>\n<h4 id=\"开发者证书\"><a href=\"#开发者证书\" class=\"headerlink\" title=\"开发者证书\"></a>开发者证书</h4><p>由 apple 官方颁发, 用来证明开发者资格的证书文件, 分开发(ios_development.cer)和发布(ios_distribution.cer)两种</p>\n<p><code>cer</code> 证书跟开发机(私钥)绑定只能在拥有私钥的机器上使用, 如果要迁移机器需要导出为 <code>p12</code> 文件</p>\n<h5 id=\"生成方法-1\"><a href=\"#生成方法-1\" class=\"headerlink\" title=\"生成方法\"></a>生成方法</h5><p>在 <a href=\"https://developer.apple.com/devcenter/ios/index.action\" target=\"_blank\" rel=\"noopener\">开发者中心</a> “certificates” 面板中添加 <code>certificate</code> 并上传刚刚生成的 <code>CSR</code> 文件, 获取 <code>ios_development.cer</code></p>\n<h4 id=\"apns-Apple-Push-Notification-Service-证书\"><a href=\"#apns-Apple-Push-Notification-Service-证书\" class=\"headerlink\" title=\"apns(Apple Push Notification Service) 证书\"></a>apns(Apple Push Notification Service) 证书</h4><p>用于服务端消息推送, 类似 ssl 证书使用, 和 App 端的开发打包没有关系</p>\n<h5 id=\"生成方法-2\"><a href=\"#生成方法-2\" class=\"headerlink\" title=\"生成方法\"></a>生成方法</h5><p>在 <a href=\"https://developer.apple.com/devcenter/ios/index.action\" target=\"_blank\" rel=\"noopener\">开发者中心</a> “Identifiers” 面板中添加 <code>App ID</code> 并上传刚刚生成的 <code>CSR</code> 文件, 获取 <code>aps_production.cer</code></p>\n<h4 id=\"p12-Personal-Information-Exchange-证书\"><a href=\"#p12-Personal-Information-Exchange-证书\" class=\"headerlink\" title=\"p12(Personal Information Exchange) 证书\"></a>p12(Personal Information Exchange) 证书</h4><p><code>p12</code> 证书实际是包含了 <code>cer</code> 证书及私钥信息, 可以分发给团队成员</p>\n<h5 id=\"生成方法-3\"><a href=\"#生成方法-3\" class=\"headerlink\" title=\"生成方法\"></a>生成方法</h5><p>在 <strong>Keychain Access</strong> 中找到已经导入的 <code>cer</code> 证书, 点右键导出为 <code>p12</code> 格式</p>\n<h4 id=\"描述文件-Provisioning-Profiles\"><a href=\"#描述文件-Provisioning-Profiles\" class=\"headerlink\" title=\"描述文件(Provisioning Profiles)\"></a>描述文件(Provisioning Profiles)</h4><p>包含 <code>certificate</code> <code>appID</code> <code>devices id</code> 的文件用于在 xcode 调试打包时提供授权的配置信息</p>\n<h5 id=\"生成方法-4\"><a href=\"#生成方法-4\" class=\"headerlink\" title=\"生成方法\"></a>生成方法</h5><ul>\n<li><p>在 <a href=\"https://developer.apple.com/devcenter/ios/index.action\" target=\"_blank\" rel=\"noopener\">开发者中心</a> “Provisioning Profiles” 面板中添加 <code>iOS Provisioning Profiles</code> 并上传刚刚生成的 <code>CSR</code> 文件, 获取 <code>.mobileprovision</code> 文件</p>\n</li>\n<li><p>在 xcode 登录开发者帐号后可以连接开发者中心获取</p>\n</li>\n</ul>\n<h3 id=\"附录1-开发准备相关的网址\"><a href=\"#附录1-开发准备相关的网址\" class=\"headerlink\" title=\"附录1: 开发准备相关的网址\"></a>附录1: 开发准备相关的网址</h3><blockquote>\n<p>开发者中心<br><a href=\"https://developer.apple.com/devcenter/ios/index.action\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/devcenter/ios/index.action</a></p>\n<p>iOS 描述管理(配置证书、描述文件、推送服务)<br><a href=\"https://developer.apple.com/ios/manage/overview/index.action\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/ios/manage/overview/index.action</a></p>\n<p>切换团队(在 web 界面上死活没有找到)<br><a href=\"https://developer.apple.com/account/selectTeam.action\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/account/selectTeam.action</a></p>\n<p>iOS 上架 Appstore<br><a href=\"http://itunesconnect.apple.com/\" target=\"_blank\" rel=\"noopener\">http://itunesconnect.apple.com/</a></p>\n</blockquote>\n<h2 id=\"几种开发者帐号区别\"><a href=\"#几种开发者帐号区别\" class=\"headerlink\" title=\"几种开发者帐号区别\"></a>几种开发者帐号区别</h2><blockquote>\n<p>详见: <a href=\"https://developer.apple.com/programs/start/ios/\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/programs/start/ios/</a></p>\n</blockquote>\n<ul>\n<li><a href=\"https://developer.apple.com/programs/ios/\" target=\"_blank\" rel=\"noopener\">个人(individual)</a> <strong>$99</strong>/year</li>\n<li><a href=\"https://developer.apple.com/programs/ios/\" target=\"_blank\" rel=\"noopener\">公司(company)</a> <strong>$99</strong>/year</li>\n<li><a href=\"https://developer.apple.com/programs/ios/enterprise/\" target=\"_blank\" rel=\"noopener\">企业(enterprise)</a> <strong>$299</strong>/year</li>\n<li><a href=\"https://developer.apple.com/programs/start/university/\" target=\"_blank\" rel=\"noopener\">大学(University)</a> <strong>free</strong></li>\n</ul>\n<h3 id=\"关键区别\"><a href=\"#关键区别\" class=\"headerlink\" title=\"关键区别\"></a>关键区别</h3><ul>\n<li>个人帐号可以真机调试, 发布 appstore, 每年 最多为 100台设备分发</li>\n<li>公司帐号和个人帐号类似, 只有这两种帐号可以发布 appstore, 主要特权是可以添加多个开发者子账号, 但只允许主账号提交, 发布等操作, 在协同开发时比较灵活, 可以各自管理授权设备等</li>\n<li>企业帐号<strong>无法用于 appstore 发布</strong>, 但可以不通过 appstore 发布任意 iphone 都可以安装的应用</li>\n<li>大学帐号不能发布 appstore, 主要拥有真机调试的权限</li>\n</ul>\n<h2 id=\"真机调试流程\"><a href=\"#真机调试流程\" class=\"headerlink\" title=\"真机调试流程\"></a>真机调试流程</h2><h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>真机调试指 mac 连上 iphone, xcode 可以直接以这台 iphone 设备为 build target, 能在 iphone 里执行编译结果</p>\n<h3 id=\"条件和流程\"><a href=\"#条件和流程\" class=\"headerlink\" title=\"条件和流程\"></a>条件和流程</h3><p>分为拥有独立开发者帐号(也包括公司帐号或企业帐号成员)和共享开发者帐号两种情况</p>\n<h4 id=\"拥有独立开发者帐号\"><a href=\"#拥有独立开发者帐号\" class=\"headerlink\" title=\"拥有独立开发者帐号\"></a>拥有独立开发者帐号</h4><ul>\n<li><ol>\n<li>在 <a href=\"https://developer.apple.com/ios/manage/overview/index.action\" target=\"_blank\" rel=\"noopener\">provisioning portal</a> 新建应用, 配置授权设备等</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>开发机上导入证书</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>在 xcode 上登录开发者帐号, 不需要准备描述文件, xcode 会自动生成(如果是公司帐号可以自动生成 <code>iOS Team Provisioning Profile</code>)</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"共享开发者帐号\"><a href=\"#共享开发者帐号\" class=\"headerlink\" title=\"共享开发者帐号\"></a>共享开发者帐号</h4><p>如果无法在 xcode 登录一个开发者帐号, 也可以通过他人对你手机和应用 id 的授权, 得到 <code>.mobileprovision</code> 描述文件再导入其含私钥的证书(<code>p12</code>) 即可, 具体步骤如下:</p>\n<ul>\n<li><ol>\n<li>获得手机的 <code>udid</code> (可以连上 mac, 在 itunes 中查看)</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>告知对方 <code>udid</code> (用以设备授权) 和 应用 id</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>得到对方生成的证书和描述文件后, 先导入 <code>p12</code> 证书, 再双击 <code>mobileprovision</code> 文件</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>连接手机, 在 xcode 中选择 build target 为已连接的手机</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>对刚入门的个人开发者而言, 可以在淘宝搜 <code>iOS真机调试</code> 花几元购买一份授权, 包含(<code>p12</code> 证书 和 <code>.mobileprovision</code> 描述文件)</p>\n</blockquote>\n<h2 id=\"内测发布流程\"><a href=\"#内测发布流程\" class=\"headerlink\" title=\"内测发布流程\"></a>内测发布流程</h2><h3 id=\"基本概念-1\"><a href=\"#基本概念-1\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>当 App 开发进行到一定程度, 需要更多的人参与测试, 需要谋求一种方式方便应用能安装进更多的设备中</p>\n<h3 id=\"实现条件\"><a href=\"#实现条件\" class=\"headerlink\" title=\"实现条件\"></a>实现条件</h3><p>进行内测发布主要的关键点是:</p>\n<ul>\n<li><ol>\n<li>是如何将应用打包为 <code>.ipa</code></li>\n</ol>\n</li>\n</ul>\n<p>xcode6 以后, 个人/公司帐号无法对应用打包为 <code>.ipa</code>, 要么用 xcode5 打包要么拥有企业帐号级别的授权</p>\n<ul>\n<li><ol start=\"2\">\n<li>设备需不需要授权</li>\n</ol>\n</li>\n</ul>\n<p>个人/公司帐号权限只有在 <code>TestFlight</code> / 越狱渠道下完成不授权安装; 企业帐号授权可以在 <code>ad-hoc</code> / <code>in-house</code> 渠道下分发, 完成不授权设备安装</p>\n<h3 id=\"几种常见的分发途径\"><a href=\"#几种常见的分发途径\" class=\"headerlink\" title=\"几种常见的分发途径\"></a>几种常见的分发途径</h3><ul>\n<li>ad-hoc</li>\n</ul>\n<p>打包时必须在登录企业帐号(或其成员)并已导入证书和描述文件的情况下, 任何用户(未授权)都可以在手机上用浏览器访问一个 url(例: itms-services://?action=download-manifest&amp;url=<a href=\"https://example.com/manifest.plist\" target=\"_blank\" rel=\"noopener\">https://example.com/manifest.plist</a>) 完成安装</p>\n<p>最大的问题是安装量有 100 的上限, 无法作为一个量很大的分发渠道</p>\n<ul>\n<li>in-house</li>\n</ul>\n<p>针对企业内部用户进行分发, 相比 <code>ad-hoc</code> 无安装量上限</p>\n<blockquote>\n<p>iOS 8.1.3 开始不能企业证书 Iresign 方式重新签名的应用无法安装<br><a href=\"https://support.apple.com/en-us/HT204245\" target=\"_blank\" rel=\"noopener\">https://support.apple.com/en-us/HT204245</a></p>\n</blockquote>\n<ul>\n<li>TestFlight</li>\n</ul>\n<p>仅支持 <strong>iOS8.0</strong> 以上, 不需要对设备 <code>udid</code> 进行授权, 适合个人 / 公司开发者, 在应用发布前可以开启 TestFlight Beta 测试并添加测试者的 iTunes Connect 帐号, 需要待测用户拥有 iTunes Connect 帐号并在设备安装 <code>TestFlight</code> 客户端</p>\n<p>这种方式非常便于推送应用更新和收集测试信息</p>\n<ul>\n<li>导出 ipa 包, 越狱安装</li>\n</ul>\n<p>如果测试设备都越狱了, 这种方式非常灵活简单, 只有能导出 ipa 包就能通过 <a href=\"http://www.itools.cn/\" target=\"_blank\" rel=\"noopener\">itools</a> 等第三方工具安装</p>\n<h3 id=\"附录2-常见分发渠道及工具地址\"><a href=\"#附录2-常见分发渠道及工具地址\" class=\"headerlink\" title=\"附录2: 常见分发渠道及工具地址\"></a>附录2: 常见分发渠道及工具地址</h3><blockquote>\n<p>fir-第三方应用托管平台<br><a href=\"http://fir.im/\" target=\"_blank\" rel=\"noopener\">http://fir.im/</a></p>\n<p>TestFlight<br><a href=\"https://developer.apple.com/testflight/\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/testflight/</a></p>\n<p>Agile-百度内部 ios 分发测试平台<br><a href=\"http://agile.baidu.com\" target=\"_blank\" rel=\"noopener\">http://agile.baidu.com</a></p>\n<p>fir-分发相关工具<br><a href=\"http://fir.im/dev/tools\" target=\"_blank\" rel=\"noopener\">http://fir.im/dev/tools</a></p>\n<p>itools<br><a href=\"http://www.itools.cn/\" target=\"_blank\" rel=\"noopener\">http://www.itools.cn/</a></p>\n</blockquote>\n<h2 id=\"Appstore-上架流程\"><a href=\"#Appstore-上架流程\" class=\"headerlink\" title=\"Appstore 上架流程\"></a>Appstore 上架流程</h2><p>@TODO</p>\n<h3 id=\"附录3-App-store最新审核标准-2015-3\"><a href=\"#附录3-App-store最新审核标准-2015-3\" class=\"headerlink\" title=\"附录3: App store最新审核标准(2015.3)\"></a>附录3: App store最新审核标准(2015.3)</h3><blockquote>\n<p><a href=\"Appstore最新审核标准_2015-3.md\">App store最新审核标准(2015.3) 中文翻译</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://developer.apple.com/app-store/review/guidelines\" target=\"_blank\" rel=\"noopener\">App store最新审核标准(2015.3) 英文原版</a></p>\n</blockquote>\n","site":{"data":{"hint":{"new":{"selector":[".menu-reading",".menu-about"]}},"link":{"social":{"weibo":"http://weibo.com/","github":"https://github.com/xxl6097","rss":"/atom.xml"},"extern":{"raytaylorism主题作者的技术博客":"http://raytaylorlin.com/","Github地址（测试友情链接）":"https://github.com/xxl6097"}},"about":{"avatar":"http://uuxia.cn/image/icon.png","name":"你的大名","tag":"Web前端/Android/Java/C++/技术宅","desc":"在浮躁的世界安安静静地敲代码","skills":{"Javascript":8,"Python":6,"invisible-split-line-1":-1,"Node.js":4},"projects":[{"name":"你的项目A","image":"https://d13yacurqjgara.cloudfront.net/users/138819/screenshots/2578899/dribbble_800x600_01_1x.png","tags":["2016年","项目标签"],"description":"你的项目A的简介","link_text":"网站链接","link":"https://dribbble.com/"},{"name":"你的作品B","image":"https://d13yacurqjgara.cloudfront.net/users/4094/screenshots/2578885/time-lords-drib_1x.jpg","description":"你的作品B的简介","tags":["Github","设计"],"link_text":"Github地址","link":"https://github.com/"}],"reward":["http://uuxia.cn/image/wechat.png","http://uuxia.cn/image/alipay.png"]},"reading":{"define":{"readed":"已读","reading":"在读","wanted":"想读"},"contents":{"readed":[{"title":"众妙之门：网站UI设计之道","cover":"http://img3.douban.com/lpic/s23139051.jpg","review":"推荐非UI人士了解UI阅读。","score":"7","doubanLink":"http://book.douban.com/subject/20281463/"},{"title":"JavaScript模式","cover":"http://img5.douban.com/lpic/s11337059.jpg","review":"书很薄，但内容相当实用。","score":"8.5","doubanLink":"http://book.douban.com/subject/11506062/"},{"title":"JavaScript语言精粹","cover":"http://img3.douban.com/lpic/s11373174.jpg","review":"这是一本前端人员的基础书，强烈推荐阅读，而且越早看受益越多！","score":"9.5","doubanLink":"http://book.douban.com/subject/11874748/"}],"reading":[{"title":"网络游戏核心技术与实战","cover":"http://img4.douban.com/lpic/s27881888.jpg","review":"","score":null,"doubanLink":"http://book.douban.com/subject/25850090/"}],"wanted":[{"title":"计算机程序的构造和解释","cover":"http://img4.douban.com/lpic/s1113106.jpg","review":"","score":null,"doubanLink":"http://book.douban.com/subject/1148282/"}]}}}},"excerpt":"<p><a href=\"http://www.williamlong.info/archives/4319.html\" target=\"_blank\" rel=\"noopener\">http://www.williamlong.info/archives/4319.html</a></p>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 证书知识及准备工作</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 几种开发者帐号区别</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 真机调试流程</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 内测发布流程</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Appstore 上架流程</li></ul>","more":"\n\n<h2 id=\"目录导航\"><a href=\"#目录导航\" class=\"headerlink\" title=\"目录导航\"></a>目录导航</h2><ul>\n<li><a href=\"#证书知识及准备工作\">证书知识及准备工作</a><ul>\n<li><a href=\"#基础问题答疑\">基础问题答疑</a><ul>\n<li><a href=\"#什么是证书\">什么是证书</a></li>\n<li><a href=\"#什么时候需要证书\">什么时候需要证书</a></li>\n<li><a href=\"#证书如何获得\">证书如何获得</a></li>\n<li><a href=\"#如何对代码进行签名\">如何对代码进行签名</a></li>\n<li><a href=\"#我生成的私钥如何共享给团队成员\">我生成的私钥如何共享给团队成员</a></li>\n</ul>\n</li>\n<li><a href=\"#各流程中证书的需求情况\">各流程中证书的需求情况</a><ul>\n<li><a href=\"#模拟器调试\">模拟器调试</a></li>\n<li><a href=\"#真机调试\">真机调试</a></li>\n<li><a href=\"#打包和发布\">打包和发布</a></li>\n<li><a href=\"#消息推送后端服务\">消息推送后端服务</a></li>\n</ul>\n</li>\n<li><a href=\"#开发中常见的证书及相关文件介绍\">开发中常见的证书及相关文件介绍</a><ul>\n<li><a href=\"#csrcertificate-request-%E6%96%87%E4%BB%B6\">CSR(certificate request) 文件</a></li>\n<li><a href=\"#开发者证书\">开发者证书</a></li>\n<li><a href=\"#apnsapple-push-notification-service-%E8%AF%81%E4%B9%A6\">apns(Apple Push Notification Service) 证书</a></li>\n<li><a href=\"#p12personal-information-exchange-%E8%AF%81%E4%B9%A6\">p12(Personal Information Exchange) 证书</a></li>\n<li><a href=\"##%E6%8F%8F%E8%BF%B0%E6%96%87%E4%BB%B6provisioning-profiles\">描述文件(Provisioning Profiles)</a></li>\n</ul>\n</li>\n<li><a href=\"#%E9%99%84%E5%BD%951-%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87%E7%9B%B8%E5%85%B3%E7%9A%84%E7%BD%91%E5%9D%80\">附录1: 开发准备相关的网址</a></li>\n</ul>\n</li>\n<li><a href=\"#几种开发者帐号区别\">几种开发者帐号区别</a><ul>\n<li><a href=\"#关键区别\">关键区别</a></li>\n</ul>\n</li>\n<li><a href=\"#真机调试流程\">真机调试流程</a><ul>\n<li><a href=\"##%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\">基本概念</a></li>\n<li><a href=\"#条件和流程\">条件和流程</a></li>\n</ul>\n</li>\n<li><a href=\"#内测发布流程\">内测发布流程</a><ul>\n<li><a href=\"#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5-1\">基本概念</a></li>\n<li><a href=\"#实现条件\">实现条件</a></li>\n<li><a href=\"#几种常见的分发途径\">几种常见的分发途径</a></li>\n<li><a href=\"#%E9%99%84%E5%BD%952-%E5%B8%B8%E8%A7%81%E5%88%86%E5%8F%91%E6%B8%A0%E9%81%93%E5%8F%8A%E5%B7%A5%E5%85%B7%E5%9C%B0%E5%9D%80\">附录2: 常见分发渠道及工具地址</a></li>\n</ul>\n</li>\n<li><a href=\"#appstore-%E4%B8%8A%E6%9E%B6%E6%B5%81%E7%A8%8B\">Appstore 上架流程</a><ul>\n<li><a href=\"#%E9%99%84%E5%BD%953-app-store%E6%9C%80%E6%96%B0%E5%AE%A1%E6%A0%B8%E6%A0%87%E5%87%8620153\">附录3: App store最新审核标准(2015.3)</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"证书知识及准备工作\"><a href=\"#证书知识及准备工作\" class=\"headerlink\" title=\"证书知识及准备工作\"></a>证书知识及准备工作</h2><h3 id=\"基础问题答疑\"><a href=\"#基础问题答疑\" class=\"headerlink\" title=\"基础问题答疑\"></a>基础问题答疑</h3><h4 id=\"什么是证书\"><a href=\"#什么是证书\" class=\"headerlink\" title=\"什么是证书\"></a>什么是证书</h4><p>由 apple 官方颁发, 用以证明开发者身份的特殊文件, 在 iOS 开发中主要用于代码签名, 保障 iOS 生态的健康安全, 分为开发者证书和发布者证书</p>\n<h4 id=\"什么时候需要证书\"><a href=\"#什么时候需要证书\" class=\"headerlink\" title=\"什么时候需要证书\"></a>什么时候需要证书</h4><p>只有在本机模拟器调试时无需代码签名, 当 App 需要在真机运行和发布时需要使用相应证书进行签名</p>\n<h4 id=\"证书如何获得\"><a href=\"#证书如何获得\" class=\"headerlink\" title=\"证书如何获得\"></a>证书如何获得</h4><p>首先需要拥有相应权限的开发者帐号, 通过在本地生成配对的密钥, 向 <a href=\"https://developer.apple.com/ios/manage/overview/index.action\" target=\"_blank\" rel=\"noopener\">provisioning portal</a> 提交公钥后换取, 后续证书在使用时会验证本地私钥</p>\n<h4 id=\"如何对代码进行签名\"><a href=\"#如何对代码进行签名\" class=\"headerlink\" title=\"如何对代码进行签名\"></a>如何对代码进行签名</h4><p>在 xcode 中, 使用描述文件(provision profile 包含调试者证书, 授权设备清单, 应用ID), 在 <code>Build Settings</code> 中选择存于 <code>Keychain Access</code> 中的证书文件设置调试和发布任务时的代码签名</p>\n<h4 id=\"我生成的私钥如何共享给团队成员\"><a href=\"#我生成的私钥如何共享给团队成员\" class=\"headerlink\" title=\"我生成的私钥如何共享给团队成员\"></a>我生成的私钥如何共享给团队成员</h4><p>在 <code>Keychain Access</code> 中找到导入的证书, 右击导出为包含私钥的 Personal Information Exchange(.p12)文件(导出时可以创建密码), 团队成员再导入 <code>p12</code> 证书后就完整包含了证书和私钥</p>\n<h3 id=\"各流程中证书的需求情况\"><a href=\"#各流程中证书的需求情况\" class=\"headerlink\" title=\"各流程中证书的需求情况\"></a>各流程中证书的需求情况</h3><h4 id=\"模拟器调试\"><a href=\"#模拟器调试\" class=\"headerlink\" title=\"模拟器调试\"></a>模拟器调试</h4><p>不需要</p>\n<h4 id=\"真机调试\"><a href=\"#真机调试\" class=\"headerlink\" title=\"真机调试\"></a>真机调试</h4><ul>\n<li><p>描述文件(Provisioning Profiles)</p>\n</li>\n<li><p>开发者证书(ios_development.cer)</p>\n</li>\n</ul>\n<h4 id=\"打包和发布\"><a href=\"#打包和发布\" class=\"headerlink\" title=\"打包和发布\"></a>打包和发布</h4><ul>\n<li><p>描述文件(Provisioning Profiles)</p>\n</li>\n<li><p>可用于发布的开发者证书(ios_distribution.cer)</p>\n</li>\n</ul>\n<h4 id=\"消息推送后端服务\"><a href=\"#消息推送后端服务\" class=\"headerlink\" title=\"消息推送后端服务\"></a>消息推送后端服务</h4><ul>\n<li>apns 证书</li>\n</ul>\n<h3 id=\"开发中常见的证书及相关文件介绍\"><a href=\"#开发中常见的证书及相关文件介绍\" class=\"headerlink\" title=\"开发中常见的证书及相关文件介绍\"></a>开发中常见的证书及相关文件介绍</h3><h4 id=\"CSR-certificate-request-文件\"><a href=\"#CSR-certificate-request-文件\" class=\"headerlink\" title=\"CSR(certificate request) 文件\"></a>CSR(certificate request) 文件</h4><p>用于换取证书的公钥文件, 实际是在本地基于 <code>RSA</code> 加密得到配对的密钥, 私钥存于 <code>Keychain Access</code> 用于签名, 公钥作为换取证书的凭证</p>\n<h5 id=\"生成方法\"><a href=\"#生成方法\" class=\"headerlink\" title=\"生成方法\"></a>生成方法</h5><ul>\n<li><p>OSX 系统自带的 <strong>Keychain Access</strong></p>\n<ul>\n<li><p>选择 “Request a Certificate From a Certificate Authority…”</p>\n</li>\n<li><p>输入 email 等信息后保存为 <code>.certSigningRequest</code> 文件</p>\n</li>\n</ul>\n</li>\n<li><p>命令行下使用 <strong>openssl</strong> 生成</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ openssl genrsa -out private.key 2048</span><br><span class=\"line\">$ openssl req -new -sha256 -key private.key -out my.certSigningRequest</span><br></pre></td></tr></table></figure>\n<h4 id=\"开发者证书\"><a href=\"#开发者证书\" class=\"headerlink\" title=\"开发者证书\"></a>开发者证书</h4><p>由 apple 官方颁发, 用来证明开发者资格的证书文件, 分开发(ios_development.cer)和发布(ios_distribution.cer)两种</p>\n<p><code>cer</code> 证书跟开发机(私钥)绑定只能在拥有私钥的机器上使用, 如果要迁移机器需要导出为 <code>p12</code> 文件</p>\n<h5 id=\"生成方法-1\"><a href=\"#生成方法-1\" class=\"headerlink\" title=\"生成方法\"></a>生成方法</h5><p>在 <a href=\"https://developer.apple.com/devcenter/ios/index.action\" target=\"_blank\" rel=\"noopener\">开发者中心</a> “certificates” 面板中添加 <code>certificate</code> 并上传刚刚生成的 <code>CSR</code> 文件, 获取 <code>ios_development.cer</code></p>\n<h4 id=\"apns-Apple-Push-Notification-Service-证书\"><a href=\"#apns-Apple-Push-Notification-Service-证书\" class=\"headerlink\" title=\"apns(Apple Push Notification Service) 证书\"></a>apns(Apple Push Notification Service) 证书</h4><p>用于服务端消息推送, 类似 ssl 证书使用, 和 App 端的开发打包没有关系</p>\n<h5 id=\"生成方法-2\"><a href=\"#生成方法-2\" class=\"headerlink\" title=\"生成方法\"></a>生成方法</h5><p>在 <a href=\"https://developer.apple.com/devcenter/ios/index.action\" target=\"_blank\" rel=\"noopener\">开发者中心</a> “Identifiers” 面板中添加 <code>App ID</code> 并上传刚刚生成的 <code>CSR</code> 文件, 获取 <code>aps_production.cer</code></p>\n<h4 id=\"p12-Personal-Information-Exchange-证书\"><a href=\"#p12-Personal-Information-Exchange-证书\" class=\"headerlink\" title=\"p12(Personal Information Exchange) 证书\"></a>p12(Personal Information Exchange) 证书</h4><p><code>p12</code> 证书实际是包含了 <code>cer</code> 证书及私钥信息, 可以分发给团队成员</p>\n<h5 id=\"生成方法-3\"><a href=\"#生成方法-3\" class=\"headerlink\" title=\"生成方法\"></a>生成方法</h5><p>在 <strong>Keychain Access</strong> 中找到已经导入的 <code>cer</code> 证书, 点右键导出为 <code>p12</code> 格式</p>\n<h4 id=\"描述文件-Provisioning-Profiles\"><a href=\"#描述文件-Provisioning-Profiles\" class=\"headerlink\" title=\"描述文件(Provisioning Profiles)\"></a>描述文件(Provisioning Profiles)</h4><p>包含 <code>certificate</code> <code>appID</code> <code>devices id</code> 的文件用于在 xcode 调试打包时提供授权的配置信息</p>\n<h5 id=\"生成方法-4\"><a href=\"#生成方法-4\" class=\"headerlink\" title=\"生成方法\"></a>生成方法</h5><ul>\n<li><p>在 <a href=\"https://developer.apple.com/devcenter/ios/index.action\" target=\"_blank\" rel=\"noopener\">开发者中心</a> “Provisioning Profiles” 面板中添加 <code>iOS Provisioning Profiles</code> 并上传刚刚生成的 <code>CSR</code> 文件, 获取 <code>.mobileprovision</code> 文件</p>\n</li>\n<li><p>在 xcode 登录开发者帐号后可以连接开发者中心获取</p>\n</li>\n</ul>\n<h3 id=\"附录1-开发准备相关的网址\"><a href=\"#附录1-开发准备相关的网址\" class=\"headerlink\" title=\"附录1: 开发准备相关的网址\"></a>附录1: 开发准备相关的网址</h3><blockquote>\n<p>开发者中心<br><a href=\"https://developer.apple.com/devcenter/ios/index.action\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/devcenter/ios/index.action</a></p>\n<p>iOS 描述管理(配置证书、描述文件、推送服务)<br><a href=\"https://developer.apple.com/ios/manage/overview/index.action\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/ios/manage/overview/index.action</a></p>\n<p>切换团队(在 web 界面上死活没有找到)<br><a href=\"https://developer.apple.com/account/selectTeam.action\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/account/selectTeam.action</a></p>\n<p>iOS 上架 Appstore<br><a href=\"http://itunesconnect.apple.com/\" target=\"_blank\" rel=\"noopener\">http://itunesconnect.apple.com/</a></p>\n</blockquote>\n<h2 id=\"几种开发者帐号区别\"><a href=\"#几种开发者帐号区别\" class=\"headerlink\" title=\"几种开发者帐号区别\"></a>几种开发者帐号区别</h2><blockquote>\n<p>详见: <a href=\"https://developer.apple.com/programs/start/ios/\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/programs/start/ios/</a></p>\n</blockquote>\n<ul>\n<li><a href=\"https://developer.apple.com/programs/ios/\" target=\"_blank\" rel=\"noopener\">个人(individual)</a> <strong>$99</strong>/year</li>\n<li><a href=\"https://developer.apple.com/programs/ios/\" target=\"_blank\" rel=\"noopener\">公司(company)</a> <strong>$99</strong>/year</li>\n<li><a href=\"https://developer.apple.com/programs/ios/enterprise/\" target=\"_blank\" rel=\"noopener\">企业(enterprise)</a> <strong>$299</strong>/year</li>\n<li><a href=\"https://developer.apple.com/programs/start/university/\" target=\"_blank\" rel=\"noopener\">大学(University)</a> <strong>free</strong></li>\n</ul>\n<h3 id=\"关键区别\"><a href=\"#关键区别\" class=\"headerlink\" title=\"关键区别\"></a>关键区别</h3><ul>\n<li>个人帐号可以真机调试, 发布 appstore, 每年 最多为 100台设备分发</li>\n<li>公司帐号和个人帐号类似, 只有这两种帐号可以发布 appstore, 主要特权是可以添加多个开发者子账号, 但只允许主账号提交, 发布等操作, 在协同开发时比较灵活, 可以各自管理授权设备等</li>\n<li>企业帐号<strong>无法用于 appstore 发布</strong>, 但可以不通过 appstore 发布任意 iphone 都可以安装的应用</li>\n<li>大学帐号不能发布 appstore, 主要拥有真机调试的权限</li>\n</ul>\n<h2 id=\"真机调试流程\"><a href=\"#真机调试流程\" class=\"headerlink\" title=\"真机调试流程\"></a>真机调试流程</h2><h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>真机调试指 mac 连上 iphone, xcode 可以直接以这台 iphone 设备为 build target, 能在 iphone 里执行编译结果</p>\n<h3 id=\"条件和流程\"><a href=\"#条件和流程\" class=\"headerlink\" title=\"条件和流程\"></a>条件和流程</h3><p>分为拥有独立开发者帐号(也包括公司帐号或企业帐号成员)和共享开发者帐号两种情况</p>\n<h4 id=\"拥有独立开发者帐号\"><a href=\"#拥有独立开发者帐号\" class=\"headerlink\" title=\"拥有独立开发者帐号\"></a>拥有独立开发者帐号</h4><ul>\n<li><ol>\n<li>在 <a href=\"https://developer.apple.com/ios/manage/overview/index.action\" target=\"_blank\" rel=\"noopener\">provisioning portal</a> 新建应用, 配置授权设备等</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>开发机上导入证书</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>在 xcode 上登录开发者帐号, 不需要准备描述文件, xcode 会自动生成(如果是公司帐号可以自动生成 <code>iOS Team Provisioning Profile</code>)</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"共享开发者帐号\"><a href=\"#共享开发者帐号\" class=\"headerlink\" title=\"共享开发者帐号\"></a>共享开发者帐号</h4><p>如果无法在 xcode 登录一个开发者帐号, 也可以通过他人对你手机和应用 id 的授权, 得到 <code>.mobileprovision</code> 描述文件再导入其含私钥的证书(<code>p12</code>) 即可, 具体步骤如下:</p>\n<ul>\n<li><ol>\n<li>获得手机的 <code>udid</code> (可以连上 mac, 在 itunes 中查看)</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>告知对方 <code>udid</code> (用以设备授权) 和 应用 id</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>得到对方生成的证书和描述文件后, 先导入 <code>p12</code> 证书, 再双击 <code>mobileprovision</code> 文件</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>连接手机, 在 xcode 中选择 build target 为已连接的手机</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>对刚入门的个人开发者而言, 可以在淘宝搜 <code>iOS真机调试</code> 花几元购买一份授权, 包含(<code>p12</code> 证书 和 <code>.mobileprovision</code> 描述文件)</p>\n</blockquote>\n<h2 id=\"内测发布流程\"><a href=\"#内测发布流程\" class=\"headerlink\" title=\"内测发布流程\"></a>内测发布流程</h2><h3 id=\"基本概念-1\"><a href=\"#基本概念-1\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>当 App 开发进行到一定程度, 需要更多的人参与测试, 需要谋求一种方式方便应用能安装进更多的设备中</p>\n<h3 id=\"实现条件\"><a href=\"#实现条件\" class=\"headerlink\" title=\"实现条件\"></a>实现条件</h3><p>进行内测发布主要的关键点是:</p>\n<ul>\n<li><ol>\n<li>是如何将应用打包为 <code>.ipa</code></li>\n</ol>\n</li>\n</ul>\n<p>xcode6 以后, 个人/公司帐号无法对应用打包为 <code>.ipa</code>, 要么用 xcode5 打包要么拥有企业帐号级别的授权</p>\n<ul>\n<li><ol start=\"2\">\n<li>设备需不需要授权</li>\n</ol>\n</li>\n</ul>\n<p>个人/公司帐号权限只有在 <code>TestFlight</code> / 越狱渠道下完成不授权安装; 企业帐号授权可以在 <code>ad-hoc</code> / <code>in-house</code> 渠道下分发, 完成不授权设备安装</p>\n<h3 id=\"几种常见的分发途径\"><a href=\"#几种常见的分发途径\" class=\"headerlink\" title=\"几种常见的分发途径\"></a>几种常见的分发途径</h3><ul>\n<li>ad-hoc</li>\n</ul>\n<p>打包时必须在登录企业帐号(或其成员)并已导入证书和描述文件的情况下, 任何用户(未授权)都可以在手机上用浏览器访问一个 url(例: itms-services://?action=download-manifest&amp;url=<a href=\"https://example.com/manifest.plist\" target=\"_blank\" rel=\"noopener\">https://example.com/manifest.plist</a>) 完成安装</p>\n<p>最大的问题是安装量有 100 的上限, 无法作为一个量很大的分发渠道</p>\n<ul>\n<li>in-house</li>\n</ul>\n<p>针对企业内部用户进行分发, 相比 <code>ad-hoc</code> 无安装量上限</p>\n<blockquote>\n<p>iOS 8.1.3 开始不能企业证书 Iresign 方式重新签名的应用无法安装<br><a href=\"https://support.apple.com/en-us/HT204245\" target=\"_blank\" rel=\"noopener\">https://support.apple.com/en-us/HT204245</a></p>\n</blockquote>\n<ul>\n<li>TestFlight</li>\n</ul>\n<p>仅支持 <strong>iOS8.0</strong> 以上, 不需要对设备 <code>udid</code> 进行授权, 适合个人 / 公司开发者, 在应用发布前可以开启 TestFlight Beta 测试并添加测试者的 iTunes Connect 帐号, 需要待测用户拥有 iTunes Connect 帐号并在设备安装 <code>TestFlight</code> 客户端</p>\n<p>这种方式非常便于推送应用更新和收集测试信息</p>\n<ul>\n<li>导出 ipa 包, 越狱安装</li>\n</ul>\n<p>如果测试设备都越狱了, 这种方式非常灵活简单, 只有能导出 ipa 包就能通过 <a href=\"http://www.itools.cn/\" target=\"_blank\" rel=\"noopener\">itools</a> 等第三方工具安装</p>\n<h3 id=\"附录2-常见分发渠道及工具地址\"><a href=\"#附录2-常见分发渠道及工具地址\" class=\"headerlink\" title=\"附录2: 常见分发渠道及工具地址\"></a>附录2: 常见分发渠道及工具地址</h3><blockquote>\n<p>fir-第三方应用托管平台<br><a href=\"http://fir.im/\" target=\"_blank\" rel=\"noopener\">http://fir.im/</a></p>\n<p>TestFlight<br><a href=\"https://developer.apple.com/testflight/\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/testflight/</a></p>\n<p>Agile-百度内部 ios 分发测试平台<br><a href=\"http://agile.baidu.com\" target=\"_blank\" rel=\"noopener\">http://agile.baidu.com</a></p>\n<p>fir-分发相关工具<br><a href=\"http://fir.im/dev/tools\" target=\"_blank\" rel=\"noopener\">http://fir.im/dev/tools</a></p>\n<p>itools<br><a href=\"http://www.itools.cn/\" target=\"_blank\" rel=\"noopener\">http://www.itools.cn/</a></p>\n</blockquote>\n<h2 id=\"Appstore-上架流程\"><a href=\"#Appstore-上架流程\" class=\"headerlink\" title=\"Appstore 上架流程\"></a>Appstore 上架流程</h2><p>@TODO</p>\n<h3 id=\"附录3-App-store最新审核标准-2015-3\"><a href=\"#附录3-App-store最新审核标准-2015-3\" class=\"headerlink\" title=\"附录3: App store最新审核标准(2015.3)\"></a>附录3: App store最新审核标准(2015.3)</h3><blockquote>\n<p><a href=\"Appstore最新审核标准_2015-3.md\">App store最新审核标准(2015.3) 中文翻译</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://developer.apple.com/app-store/review/guidelines\" target=\"_blank\" rel=\"noopener\">App store最新审核标准(2015.3) 英文原版</a></p>\n</blockquote>"},{"title":"在CentOS6.6(32位）下配置迅雷远程成功","date":"2018-04-03T10:11:06.569Z","_content":"安装配置好了一台CentOS6.6的服务器，以下为本人配置迅雷远程的记录，供雷友们借鉴。\n环境：CentOS 6.6 32位 mini安装 无图形界面\n以下操作均以系统管理员 root进行\n参照了以下几篇文章而配置成功的。\nhttp://luyou.xunlei.com/forum.php?mod=viewthread&tid=1902  你若不想让迅雷以root权限运行，用我这个脚本吧\nhttp://luyou.xunlei.com/forum.php?mod=viewthread&tid=3290&extra=page%3D1%26filter%3Dtypeid%26typeid%3D3 Linux(x86)下安装教程，以及init.d服务脚本，可自启动  （这篇启发最大）\n<!--more-->\n\n1. 建立用户 thunder （不用设置密码） \n```\nadduser thunder\n```\n2. 在根目录下创建TDDOWNLOAD文件夹(~/TDDOWNLOAD)\n3. 下载文件 Xware1.0.31_x86_32_glibc  链接：\n[http://uuxia.cn:8123/thunder/Xware1.0.31_x86_32_glibc.zip](http://uuxia.cn:8123/thunder/Xware1.0.31_x86_32_glibc.zip)\n4. 解压Xware1.0.31_x86_32_glibc.zip为Xware，使用WinSCP上传文件夹至/home/thunder下\n5. 给文件夹设置权限\n```\nchown -R thunder:thunder /home/thunder/Xware\n```\n6. 给~/TDDOWNLOAD设置为thunder权限\n\n\n```\nchown thunder:thunder /TDDOWNLOAD\n``` \n\n7 修改迅雷默认下载目录启动后自动挂载至/TDDOWNLOAD\n\n```\nvi /etc/fstab 添加以下一条\nTDDOWNLOAD     /TDDOWNLOAD   none  bind  0 0\n```\n\n设置完成后\n\n8.重启服务器\n\n    ``` reboot ```\n\n9.重启后使用mount 查看挂载情况，如挂载成功如下：\n\n```\n/dev/sda3 on / type ext4 (rw)\nproc on /proc type proc (rw)\nsysfs on /sys type sysfs (rw)\ndevpts on /dev/pts type devpts (rw,gid=5,mode=620)\ntmpfs on /dev/shm type tmpfs (rw,rootcontext=\"system_ubject_r:tmpfs_t:s0\")\n/dev/sda1 on /boot type ext4 (rw)\nTDDOWNLOAD on /TDDOWNLOAD type none (rw,bind)\nnone on /proc/sys/fs/binfmt_misc type binfmt_misc (rw)\nsunrpc on /var/lib/nfs/rpc_pipefs type rpc_pipefs (rw)\n\n```\n\n\n从上面看出，已经挂载成功。\n如果是分区挂载的话，则显示：\n/dev/sdb1 on /TDDOWNLOAD type ext4 (rw,bind)\n\n\n10. 启动迅雷远程下载。\n\n```\ncd /home/thunder/Xware/\n./portal\n\n```\n\n记住最后的那个六位的码，然后使用浏览器登陆 [http://yuancheng.xunlei.com](http://yuancheng.xunlei.com) 输入六位的的字符进行绑定设备。\n\n11 如果绑定成功后，再次运行portal 的话会显示 绑定的用户名。\n端口默认为9000\n\n12. 配置为开机自动启动portal\n在开机配置文件中增加以下行，如下：\n    vi /etc/rc.d/rc.local\n    /home/thunder/Xware/portal\n\n文件内容如下：\n\n```\n#!/bin/sh\n#\n# This script will be executed *after* all the other init scripts.\n# You can put your own initialization stuff in here if you don't\n# want to do the full Sys V style init stuff.\n\n/home/thunder/Xware/portal\n\nouch /var/lock/subsys/local\n\n```\n\n\n至此服务器重启后迅雷远程下载自动启动。\n\n本人亲自配置成功。\n\n希望能通过此平台与广大雷友们分享共成长。\n\n后来对别的服务器重新配置过，也重新整理了一下。对于上面提到的建立thunder用户，其实非必需的，因为运行远程迅雷时是以root用户运行的。\n\n\n\n## 遇到的问题\n\n### 问题1：\n在执行最后一步portal时，可能会产生各种各样的bug\nbug1：-bash: ./portal: /lib/ld-linux.so.2: bad ELF interpreter: No such file or directory\n原因是在64位系统装安装32位程序\n解决办法：\n    ```yum install glibc.i686```\n\n### 问题2：\nbug2：/home/Eli/xunlei/portal: error while loading shared libraries: libz.so.1: cannot open shared object file: No such file or directory\n\n问题原因在于在64位系统中使用32位的库\n\n解决办法：`yum -y install libz.so.1 --setopt=protected_multilib=false`\n\n### 问题3：\nbug3：home/xunlei目录下明明有portal等文件，但是就是提示说目录下没这文件\n\n原因可能是解压过程中出错文件损坏，或者没有给予home/xunlei目录最高权限就解压文件\n\n解决办法：先给予home/xunlei目录最高权限，然后再次解压文件\n\n","source":"_posts/xware_centos6.md","raw":"---\ntitle: 在CentOS6.6(32位）下配置迅雷远程成功\ndate: 2018-04-039 18:13:57\ntags: [迅雷,centos]\ncategories: 迅雷\n---\n安装配置好了一台CentOS6.6的服务器，以下为本人配置迅雷远程的记录，供雷友们借鉴。\n环境：CentOS 6.6 32位 mini安装 无图形界面\n以下操作均以系统管理员 root进行\n参照了以下几篇文章而配置成功的。\nhttp://luyou.xunlei.com/forum.php?mod=viewthread&tid=1902  你若不想让迅雷以root权限运行，用我这个脚本吧\nhttp://luyou.xunlei.com/forum.php?mod=viewthread&tid=3290&extra=page%3D1%26filter%3Dtypeid%26typeid%3D3 Linux(x86)下安装教程，以及init.d服务脚本，可自启动  （这篇启发最大）\n<!--more-->\n\n1. 建立用户 thunder （不用设置密码） \n```\nadduser thunder\n```\n2. 在根目录下创建TDDOWNLOAD文件夹(~/TDDOWNLOAD)\n3. 下载文件 Xware1.0.31_x86_32_glibc  链接：\n[http://uuxia.cn:8123/thunder/Xware1.0.31_x86_32_glibc.zip](http://uuxia.cn:8123/thunder/Xware1.0.31_x86_32_glibc.zip)\n4. 解压Xware1.0.31_x86_32_glibc.zip为Xware，使用WinSCP上传文件夹至/home/thunder下\n5. 给文件夹设置权限\n```\nchown -R thunder:thunder /home/thunder/Xware\n```\n6. 给~/TDDOWNLOAD设置为thunder权限\n\n\n```\nchown thunder:thunder /TDDOWNLOAD\n``` \n\n7 修改迅雷默认下载目录启动后自动挂载至/TDDOWNLOAD\n\n```\nvi /etc/fstab 添加以下一条\nTDDOWNLOAD     /TDDOWNLOAD   none  bind  0 0\n```\n\n设置完成后\n\n8.重启服务器\n\n    ``` reboot ```\n\n9.重启后使用mount 查看挂载情况，如挂载成功如下：\n\n```\n/dev/sda3 on / type ext4 (rw)\nproc on /proc type proc (rw)\nsysfs on /sys type sysfs (rw)\ndevpts on /dev/pts type devpts (rw,gid=5,mode=620)\ntmpfs on /dev/shm type tmpfs (rw,rootcontext=\"system_ubject_r:tmpfs_t:s0\")\n/dev/sda1 on /boot type ext4 (rw)\nTDDOWNLOAD on /TDDOWNLOAD type none (rw,bind)\nnone on /proc/sys/fs/binfmt_misc type binfmt_misc (rw)\nsunrpc on /var/lib/nfs/rpc_pipefs type rpc_pipefs (rw)\n\n```\n\n\n从上面看出，已经挂载成功。\n如果是分区挂载的话，则显示：\n/dev/sdb1 on /TDDOWNLOAD type ext4 (rw,bind)\n\n\n10. 启动迅雷远程下载。\n\n```\ncd /home/thunder/Xware/\n./portal\n\n```\n\n记住最后的那个六位的码，然后使用浏览器登陆 [http://yuancheng.xunlei.com](http://yuancheng.xunlei.com) 输入六位的的字符进行绑定设备。\n\n11 如果绑定成功后，再次运行portal 的话会显示 绑定的用户名。\n端口默认为9000\n\n12. 配置为开机自动启动portal\n在开机配置文件中增加以下行，如下：\n    vi /etc/rc.d/rc.local\n    /home/thunder/Xware/portal\n\n文件内容如下：\n\n```\n#!/bin/sh\n#\n# This script will be executed *after* all the other init scripts.\n# You can put your own initialization stuff in here if you don't\n# want to do the full Sys V style init stuff.\n\n/home/thunder/Xware/portal\n\nouch /var/lock/subsys/local\n\n```\n\n\n至此服务器重启后迅雷远程下载自动启动。\n\n本人亲自配置成功。\n\n希望能通过此平台与广大雷友们分享共成长。\n\n后来对别的服务器重新配置过，也重新整理了一下。对于上面提到的建立thunder用户，其实非必需的，因为运行远程迅雷时是以root用户运行的。\n\n\n\n## 遇到的问题\n\n### 问题1：\n在执行最后一步portal时，可能会产生各种各样的bug\nbug1：-bash: ./portal: /lib/ld-linux.so.2: bad ELF interpreter: No such file or directory\n原因是在64位系统装安装32位程序\n解决办法：\n    ```yum install glibc.i686```\n\n### 问题2：\nbug2：/home/Eli/xunlei/portal: error while loading shared libraries: libz.so.1: cannot open shared object file: No such file or directory\n\n问题原因在于在64位系统中使用32位的库\n\n解决办法：`yum -y install libz.so.1 --setopt=protected_multilib=false`\n\n### 问题3：\nbug3：home/xunlei目录下明明有portal等文件，但是就是提示说目录下没这文件\n\n原因可能是解压过程中出错文件损坏，或者没有给予home/xunlei目录最高权限就解压文件\n\n解决办法：先给予home/xunlei目录最高权限，然后再次解压文件\n\n","slug":"xware_centos6","published":1,"updated":"2018-04-03T10:38:37.778Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfjja6pm001364v43zzkk2on","content":"<p>安装配置好了一台CentOS6.6的服务器，以下为本人配置迅雷远程的记录，供雷友们借鉴。<br>环境：CentOS 6.6 32位 mini安装 无图形界面<br>以下操作均以系统管理员 root进行<br>参照了以下几篇文章而配置成功的。<br><a href=\"http://luyou.xunlei.com/forum.php?mod=viewthread&amp;tid=1902\" target=\"_blank\" rel=\"noopener\">http://luyou.xunlei.com/forum.php?mod=viewthread&amp;tid=1902</a>  你若不想让迅雷以root权限运行，用我这个脚本吧<br><a href=\"http://luyou.xunlei.com/forum.php?mod=viewthread&amp;tid=3290&amp;extra=page%3D1%26filter%3Dtypeid%26typeid%3D3\" target=\"_blank\" rel=\"noopener\">http://luyou.xunlei.com/forum.php?mod=viewthread&amp;tid=3290&amp;extra=page%3D1%26filter%3Dtypeid%26typeid%3D3</a> Linux(x86)下安装教程，以及init.d服务脚本，可自启动  （这篇启发最大）<br><a id=\"more\"></a></p>\n<ol>\n<li><p>建立用户 thunder （不用设置密码） </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adduser thunder</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在根目录下创建TDDOWNLOAD文件夹(~/TDDOWNLOAD)</p>\n</li>\n<li>下载文件 Xware1.0.31_x86_32_glibc  链接：<br><a href=\"http://uuxia.cn:8123/thunder/Xware1.0.31_x86_32_glibc.zip\">http://uuxia.cn:8123/thunder/Xware1.0.31_x86_32_glibc.zip</a></li>\n<li>解压Xware1.0.31_x86_32_glibc.zip为Xware，使用WinSCP上传文件夹至/home/thunder下</li>\n<li><p>给文件夹设置权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown -R thunder:thunder /home/thunder/Xware</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>给~/TDDOWNLOAD设置为thunder权限</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown thunder:thunder /TDDOWNLOAD</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">7 修改迅雷默认下载目录启动后自动挂载至/TDDOWNLOAD</span><br></pre></td></tr></table></figure>\n<p>vi /etc/fstab 添加以下一条<br>TDDOWNLOAD     /TDDOWNLOAD   none  bind  0 0<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">设置完成后</span><br><span class=\"line\"></span><br><span class=\"line\">8.重启服务器</span><br><span class=\"line\"></span><br><span class=\"line\">    ``` reboot</span><br></pre></td></tr></table></figure></p>\n<p>9.重启后使用mount 查看挂载情况，如挂载成功如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/dev/sda3 on / type ext4 (rw)</span><br><span class=\"line\">proc on /proc type proc (rw)</span><br><span class=\"line\">sysfs on /sys type sysfs (rw)</span><br><span class=\"line\">devpts on /dev/pts type devpts (rw,gid=5,mode=620)</span><br><span class=\"line\">tmpfs on /dev/shm type tmpfs (rw,rootcontext=&quot;system_ubject_r:tmpfs_t:s0&quot;)</span><br><span class=\"line\">/dev/sda1 on /boot type ext4 (rw)</span><br><span class=\"line\">TDDOWNLOAD on /TDDOWNLOAD type none (rw,bind)</span><br><span class=\"line\">none on /proc/sys/fs/binfmt_misc type binfmt_misc (rw)</span><br><span class=\"line\">sunrpc on /var/lib/nfs/rpc_pipefs type rpc_pipefs (rw)</span><br></pre></td></tr></table></figure>\n<p>从上面看出，已经挂载成功。<br>如果是分区挂载的话，则显示：<br>/dev/sdb1 on /TDDOWNLOAD type ext4 (rw,bind)</p>\n<ol start=\"10\">\n<li>启动迅雷远程下载。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/thunder/Xware/</span><br><span class=\"line\">./portal</span><br></pre></td></tr></table></figure>\n<p>记住最后的那个六位的码，然后使用浏览器登陆 <a href=\"http://yuancheng.xunlei.com\" target=\"_blank\" rel=\"noopener\">http://yuancheng.xunlei.com</a> 输入六位的的字符进行绑定设备。</p>\n<p>11 如果绑定成功后，再次运行portal 的话会显示 绑定的用户名。<br>端口默认为9000</p>\n<ol start=\"12\">\n<li>配置为开机自动启动portal<br>在开机配置文件中增加以下行，如下：<br>vi /etc/rc.d/rc.local<br>/home/thunder/Xware/portal</li>\n</ol>\n<p>文件内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">#</span><br><span class=\"line\"># This script will be executed *after* all the other init scripts.</span><br><span class=\"line\"># You can put your own initialization stuff in here if you don&apos;t</span><br><span class=\"line\"># want to do the full Sys V style init stuff.</span><br><span class=\"line\"></span><br><span class=\"line\">/home/thunder/Xware/portal</span><br><span class=\"line\"></span><br><span class=\"line\">ouch /var/lock/subsys/local</span><br></pre></td></tr></table></figure>\n<p>至此服务器重启后迅雷远程下载自动启动。</p>\n<p>本人亲自配置成功。</p>\n<p>希望能通过此平台与广大雷友们分享共成长。</p>\n<p>后来对别的服务器重新配置过，也重新整理了一下。对于上面提到的建立thunder用户，其实非必需的，因为运行远程迅雷时是以root用户运行的。</p>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><h3 id=\"问题1：\"><a href=\"#问题1：\" class=\"headerlink\" title=\"问题1：\"></a>问题1：</h3><p>在执行最后一步portal时，可能会产生各种各样的bug<br>bug1：-bash: ./portal: /lib/ld-linux.so.2: bad ELF interpreter: No such file or directory<br>原因是在64位系统装安装32位程序<br>解决办法：<br>    <code>yum install glibc.i686</code></p>\n<h3 id=\"问题2：\"><a href=\"#问题2：\" class=\"headerlink\" title=\"问题2：\"></a>问题2：</h3><p>bug2：/home/Eli/xunlei/portal: error while loading shared libraries: libz.so.1: cannot open shared object file: No such file or directory</p>\n<p>问题原因在于在64位系统中使用32位的库</p>\n<p>解决办法：<code>yum -y install libz.so.1 --setopt=protected_multilib=false</code></p>\n<h3 id=\"问题3：\"><a href=\"#问题3：\" class=\"headerlink\" title=\"问题3：\"></a>问题3：</h3><p>bug3：home/xunlei目录下明明有portal等文件，但是就是提示说目录下没这文件</p>\n<p>原因可能是解压过程中出错文件损坏，或者没有给予home/xunlei目录最高权限就解压文件</p>\n<p>解决办法：先给予home/xunlei目录最高权限，然后再次解压文件</p>\n","site":{"data":{"hint":{"new":{"selector":[".menu-reading",".menu-about"]}},"link":{"social":{"weibo":"http://weibo.com/","github":"https://github.com/xxl6097","rss":"/atom.xml"},"extern":{"raytaylorism主题作者的技术博客":"http://raytaylorlin.com/","Github地址（测试友情链接）":"https://github.com/xxl6097"}},"about":{"avatar":"http://uuxia.cn/image/icon.png","name":"你的大名","tag":"Web前端/Android/Java/C++/技术宅","desc":"在浮躁的世界安安静静地敲代码","skills":{"Javascript":8,"Python":6,"invisible-split-line-1":-1,"Node.js":4},"projects":[{"name":"你的项目A","image":"https://d13yacurqjgara.cloudfront.net/users/138819/screenshots/2578899/dribbble_800x600_01_1x.png","tags":["2016年","项目标签"],"description":"你的项目A的简介","link_text":"网站链接","link":"https://dribbble.com/"},{"name":"你的作品B","image":"https://d13yacurqjgara.cloudfront.net/users/4094/screenshots/2578885/time-lords-drib_1x.jpg","description":"你的作品B的简介","tags":["Github","设计"],"link_text":"Github地址","link":"https://github.com/"}],"reward":["http://uuxia.cn/image/wechat.png","http://uuxia.cn/image/alipay.png"]},"reading":{"define":{"readed":"已读","reading":"在读","wanted":"想读"},"contents":{"readed":[{"title":"众妙之门：网站UI设计之道","cover":"http://img3.douban.com/lpic/s23139051.jpg","review":"推荐非UI人士了解UI阅读。","score":"7","doubanLink":"http://book.douban.com/subject/20281463/"},{"title":"JavaScript模式","cover":"http://img5.douban.com/lpic/s11337059.jpg","review":"书很薄，但内容相当实用。","score":"8.5","doubanLink":"http://book.douban.com/subject/11506062/"},{"title":"JavaScript语言精粹","cover":"http://img3.douban.com/lpic/s11373174.jpg","review":"这是一本前端人员的基础书，强烈推荐阅读，而且越早看受益越多！","score":"9.5","doubanLink":"http://book.douban.com/subject/11874748/"}],"reading":[{"title":"网络游戏核心技术与实战","cover":"http://img4.douban.com/lpic/s27881888.jpg","review":"","score":null,"doubanLink":"http://book.douban.com/subject/25850090/"}],"wanted":[{"title":"计算机程序的构造和解释","cover":"http://img4.douban.com/lpic/s1113106.jpg","review":"","score":null,"doubanLink":"http://book.douban.com/subject/1148282/"}]}}}},"excerpt":"<p>安装配置好了一台CentOS6.6的服务器，以下为本人配置迅雷远程的记录，供雷友们借鉴。<br>环境：CentOS 6.6 32位 mini安装 无图形界面<br>以下操作均以系统管理员 root进行<br>参照了以下几篇文章而配置成功的。<br><a href=\"http://luyou.xunlei.com/forum.php?mod=viewthread&amp;tid=1902\" target=\"_blank\" rel=\"noopener\">http://luyou.xunlei.com/forum.php?mod=viewthread&amp;tid=1902</a>  你若不想让迅雷以root权限运行，用我这个脚本吧<br><a href=\"http://luyou.xunlei.com/forum.php?mod=viewthread&amp;tid=3290&amp;extra=page%3D1%26filter%3Dtypeid%26typeid%3D3\" target=\"_blank\" rel=\"noopener\">http://luyou.xunlei.com/forum.php?mod=viewthread&amp;tid=3290&amp;extra=page%3D1%26filter%3Dtypeid%26typeid%3D3</a> Linux(x86)下安装教程，以及init.d服务脚本，可自启动  （这篇启发最大）<br></p>","more":"<p></p>\n<ol>\n<li><p>建立用户 thunder （不用设置密码） </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adduser thunder</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在根目录下创建TDDOWNLOAD文件夹(~/TDDOWNLOAD)</p>\n</li>\n<li>下载文件 Xware1.0.31_x86_32_glibc  链接：<br><a href=\"http://uuxia.cn:8123/thunder/Xware1.0.31_x86_32_glibc.zip\">http://uuxia.cn:8123/thunder/Xware1.0.31_x86_32_glibc.zip</a></li>\n<li>解压Xware1.0.31_x86_32_glibc.zip为Xware，使用WinSCP上传文件夹至/home/thunder下</li>\n<li><p>给文件夹设置权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown -R thunder:thunder /home/thunder/Xware</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>给~/TDDOWNLOAD设置为thunder权限</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown thunder:thunder /TDDOWNLOAD</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">7 修改迅雷默认下载目录启动后自动挂载至/TDDOWNLOAD</span><br></pre></td></tr></table></figure>\n<p>vi /etc/fstab 添加以下一条<br>TDDOWNLOAD     /TDDOWNLOAD   none  bind  0 0<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">设置完成后</span><br><span class=\"line\"></span><br><span class=\"line\">8.重启服务器</span><br><span class=\"line\"></span><br><span class=\"line\">    ``` reboot</span><br></pre></td></tr></table></figure></p>\n<p>9.重启后使用mount 查看挂载情况，如挂载成功如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/dev/sda3 on / type ext4 (rw)</span><br><span class=\"line\">proc on /proc type proc (rw)</span><br><span class=\"line\">sysfs on /sys type sysfs (rw)</span><br><span class=\"line\">devpts on /dev/pts type devpts (rw,gid=5,mode=620)</span><br><span class=\"line\">tmpfs on /dev/shm type tmpfs (rw,rootcontext=&quot;system_ubject_r:tmpfs_t:s0&quot;)</span><br><span class=\"line\">/dev/sda1 on /boot type ext4 (rw)</span><br><span class=\"line\">TDDOWNLOAD on /TDDOWNLOAD type none (rw,bind)</span><br><span class=\"line\">none on /proc/sys/fs/binfmt_misc type binfmt_misc (rw)</span><br><span class=\"line\">sunrpc on /var/lib/nfs/rpc_pipefs type rpc_pipefs (rw)</span><br></pre></td></tr></table></figure>\n<p>从上面看出，已经挂载成功。<br>如果是分区挂载的话，则显示：<br>/dev/sdb1 on /TDDOWNLOAD type ext4 (rw,bind)</p>\n<ol start=\"10\">\n<li>启动迅雷远程下载。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/thunder/Xware/</span><br><span class=\"line\">./portal</span><br></pre></td></tr></table></figure>\n<p>记住最后的那个六位的码，然后使用浏览器登陆 <a href=\"http://yuancheng.xunlei.com\" target=\"_blank\" rel=\"noopener\">http://yuancheng.xunlei.com</a> 输入六位的的字符进行绑定设备。</p>\n<p>11 如果绑定成功后，再次运行portal 的话会显示 绑定的用户名。<br>端口默认为9000</p>\n<ol start=\"12\">\n<li>配置为开机自动启动portal<br>在开机配置文件中增加以下行，如下：<br>vi /etc/rc.d/rc.local<br>/home/thunder/Xware/portal</li>\n</ol>\n<p>文件内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">#</span><br><span class=\"line\"># This script will be executed *after* all the other init scripts.</span><br><span class=\"line\"># You can put your own initialization stuff in here if you don&apos;t</span><br><span class=\"line\"># want to do the full Sys V style init stuff.</span><br><span class=\"line\"></span><br><span class=\"line\">/home/thunder/Xware/portal</span><br><span class=\"line\"></span><br><span class=\"line\">ouch /var/lock/subsys/local</span><br></pre></td></tr></table></figure>\n<p>至此服务器重启后迅雷远程下载自动启动。</p>\n<p>本人亲自配置成功。</p>\n<p>希望能通过此平台与广大雷友们分享共成长。</p>\n<p>后来对别的服务器重新配置过，也重新整理了一下。对于上面提到的建立thunder用户，其实非必需的，因为运行远程迅雷时是以root用户运行的。</p>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><h3 id=\"问题1：\"><a href=\"#问题1：\" class=\"headerlink\" title=\"问题1：\"></a>问题1：</h3><p>在执行最后一步portal时，可能会产生各种各样的bug<br>bug1：-bash: ./portal: /lib/ld-linux.so.2: bad ELF interpreter: No such file or directory<br>原因是在64位系统装安装32位程序<br>解决办法：<br>    <code>yum install glibc.i686</code></p>\n<h3 id=\"问题2：\"><a href=\"#问题2：\" class=\"headerlink\" title=\"问题2：\"></a>问题2：</h3><p>bug2：/home/Eli/xunlei/portal: error while loading shared libraries: libz.so.1: cannot open shared object file: No such file or directory</p>\n<p>问题原因在于在64位系统中使用32位的库</p>\n<p>解决办法：<code>yum -y install libz.so.1 --setopt=protected_multilib=false</code></p>\n<h3 id=\"问题3：\"><a href=\"#问题3：\" class=\"headerlink\" title=\"问题3：\"></a>问题3：</h3><p>bug3：home/xunlei目录下明明有portal等文件，但是就是提示说目录下没这文件</p>\n<p>原因可能是解压过程中出错文件损坏，或者没有给予home/xunlei目录最高权限就解压文件</p>\n<p>解决办法：先给予home/xunlei目录最高权限，然后再次解压文件</p>"},{"title":"绑定界面动资源画动态替换","date":"2016-05-10T22:35:25.000Z","_content":"由于公共模块绑定满足不了TOB项目以及其他项目特殊需求，现对公共模块绑定界面的资源做成可配置，本文介绍一下哪些资源可配置以及如何配置。\n<!--more-->\n### 颜色配置\n  颜色的配置需要在**res/values，res/values-v14，res/values-v19，res/values-v21**等目录下新建\n  <font color=red face=\"黑体\" size=4>color.xml</font>。\n  color.xml内容如下：\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <color name=\"title_bar_bg_color\">#FFFF4444</color>\n</resources>\n```\n\n  \n  \n  目录结构如图1所示\n\n![img1](public-bind/values.png)\n**图1**\n\n**1.标题颜**\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <color name=\"title_bar_bg_color\">填入需要配置的颜色值（#FFFF0000）</color>\n</resources>\n```\n\n**2.子分类列表背景色**\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <color name=\"color_app_themes\">填入需要配置的颜色值（#FFFF0000）</color>\n</resources>\n```\n\n### 绑定动画配置\n>在主工程**res/drawable**下分别新建**bind_scanning_anim.xml、bind_bouding_anim.xml、bind_failed_anim.xml、bind_sucess_anim.xml**资源文件；\n\n\n1.**“扫描中“动画**（bind_scanning_anim.xml），代码如下：\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!--\n    根标签为animation-list，其中oneshot代表着是否只展示一遍，设置为false会不停的循环播放动画\n    根标签下，通过item标签对动画中的每一个图片进行声明\n    android:duration 表示展示所用的该图片的时间长度\n    \n -->\n<animation-list xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:oneshot=\"false\">\n    <item\n        android:drawable=\"@drawable/scan1\"\n        android:duration=\"150\"></item>\n    <item\n        android:drawable=\"@drawable/scan2\"\n        android:duration=\"150\"></item>\n</animation-list>\n\n```\n* 扫描中 使用帧动画，默认配置中两帧，即：scan1.png和scan2.png\n* 图片分辨率:201x307\n\n2.**绑定中 动画**（bind_bouding_anim.xml），代码如下:\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!--\n    根标签为animation-list，其中oneshot代表着是否只展示一遍，设置为false会不停的循环播放动画\n    根标签下，通过item标签对动画中的每一个图片进行声明\n    android:duration 表示展示所用的该图片的时间长度\n -->\n<animation-list xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:oneshot=\"false\">\n    <item\n        android:drawable=\"@drawable/bouding1\"\n        android:duration=\"150\"></item>\n    <item\n        android:drawable=\"@drawable/bouding2\"\n        android:duration=\"150\"></item>\n    <item\n        android:drawable=\"@drawable/bouding3\"\n        android:duration=\"150\"></item>\n    <item\n        android:drawable=\"@drawable/bouding4\"\n        android:duration=\"150\"></item>\n    <item\n        android:drawable=\"@drawable/bouding5\"\n        android:duration=\"150\"></item>\n</animation-list>\n```\n* 绑定中 使用帧动画，默认配置使用5帧，即：bouding1.png、bouding2.png、bouding3.png、bouding4.png、bouding5.png\n* 图片分辨率：392x276\n\n3.**失败 动画**（bind_failed_anim.xml），代码如下：\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!--\n    根标签为animation-list，其中oneshot代表着是否只展示一遍，设置为false会不停的循环播放动画\n    根标签下，通过item标签对动画中的每一个图片进行声明\n    android:duration 表示展示所用的该图片的时间长度\n -->\n<animation-list xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:oneshot=\"false\">\n    <item\n        android:drawable=\"@drawable/failed1\"\n        android:duration=\"150\"></item>\n    <item\n        android:drawable=\"@drawable/failed2\"\n        android:duration=\"150\"></item>\n</animation-list>\n```\n* 扫描中 使用帧动画，默认配置使用2帧，即：failed1.png和failed2.png\n* 图片分辨率:203x306\n\n\n4.**成功 动画**（bind_sucess_anim.xml），代码如下：\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!--\n    根标签为animation-list，其中oneshot代表着是否只展示一遍，设置为false会不停的循环播放动画\n    根标签下，通过item标签对动画中的每一个图片进行声明\n    android:duration 表示展示所用的该图片的时间长度\n -->\n<animation-list xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:oneshot=\"false\">\n    <item\n        android:drawable=\"@drawable/sucess1\"\n        android:duration=\"150\"></item>\n    <item\n        android:drawable=\"@drawable/sucess2\"\n        android:duration=\"150\"></item>\n</animation-list>\n\n```\n* 扫描中 使用帧动画，默认配置使用2帧，即：sucess1.png和sucess2.png\n* 图片分辨率:203x306\n\n### 网络请求loadding图标配置\n在主工程**res/drawable**下分别新建**bind_network_waiting.xml**资源文件。\n代码如下：\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<animation-list xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:oneshot=\"false\">\n\n    <item\n        android:drawable=\"@drawable/load1\"\n        android:duration=\"200\" />\n    <item\n        android:drawable=\"@drawable/load2\"\n        android:duration=\"200\" />\n\n</animation-list>\n```\n* 网络请求loadding 使用帧动画，默认配置使用2帧，即：load1.png和load2.png\n* 图片分辨率:126x126\n\n缺省配置如图2：\n\n\n![img1](public-bind/loading.png)\n**图2**\n\n\n### 下拉列表Header动画配置\n在主工程**res/drawable**下分别新建**bind_droplistview_anim.xml**资源文件。\n代码如下：\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!--\n    根标签为animation-list，其中oneshot代表着是否只展示一遍，设置为false会不停的循环播放动画\n    根标签下，通过item标签对动画中的每一个图片进行声明\n    android:duration 表示展示所用的该图片的时间长度\n -->\n<animation-list xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:oneshot=\"false\">\n    <item\n        android:drawable=\"@drawable/list1\"\n        android:duration=\"150\"></item>\n    <item\n        android:drawable=\"@drawable/list2\"\n        android:duration=\"150\"></item>\n    <item\n        android:drawable=\"@drawable/list3\"\n        android:duration=\"150\"></item>\n    <item\n        android:drawable=\"@drawable/list4\"\n        android:duration=\"150\"></item>\n    <item\n        android:drawable=\"@drawable/list5\"\n        android:duration=\"150\"></item>\n</animation-list>\n\n```\n* 下拉列表Header动画 使用帧动画，默认配置使用5帧，即：list1.png、list2.png、list3.png、list4.png、list5.png\n* 图片分辨率:72x72\n\n缺省配置如图3：\n\n\n\n![img1](public-bind/droplist.png)\n**图3**\n\n\n\n\n\n","source":"_posts/public-bind.md","raw":"---\ntitle: 绑定界面动资源画动态替换\ndate: 2016-05-11 06:35:25\ntags: [het,智能家居]\ncategories: 智能家居\n---\n由于公共模块绑定满足不了TOB项目以及其他项目特殊需求，现对公共模块绑定界面的资源做成可配置，本文介绍一下哪些资源可配置以及如何配置。\n<!--more-->\n### 颜色配置\n  颜色的配置需要在**res/values，res/values-v14，res/values-v19，res/values-v21**等目录下新建\n  <font color=red face=\"黑体\" size=4>color.xml</font>。\n  color.xml内容如下：\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <color name=\"title_bar_bg_color\">#FFFF4444</color>\n</resources>\n```\n\n  \n  \n  目录结构如图1所示\n\n![img1](public-bind/values.png)\n**图1**\n\n**1.标题颜**\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <color name=\"title_bar_bg_color\">填入需要配置的颜色值（#FFFF0000）</color>\n</resources>\n```\n\n**2.子分类列表背景色**\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <color name=\"color_app_themes\">填入需要配置的颜色值（#FFFF0000）</color>\n</resources>\n```\n\n### 绑定动画配置\n>在主工程**res/drawable**下分别新建**bind_scanning_anim.xml、bind_bouding_anim.xml、bind_failed_anim.xml、bind_sucess_anim.xml**资源文件；\n\n\n1.**“扫描中“动画**（bind_scanning_anim.xml），代码如下：\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!--\n    根标签为animation-list，其中oneshot代表着是否只展示一遍，设置为false会不停的循环播放动画\n    根标签下，通过item标签对动画中的每一个图片进行声明\n    android:duration 表示展示所用的该图片的时间长度\n    \n -->\n<animation-list xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:oneshot=\"false\">\n    <item\n        android:drawable=\"@drawable/scan1\"\n        android:duration=\"150\"></item>\n    <item\n        android:drawable=\"@drawable/scan2\"\n        android:duration=\"150\"></item>\n</animation-list>\n\n```\n* 扫描中 使用帧动画，默认配置中两帧，即：scan1.png和scan2.png\n* 图片分辨率:201x307\n\n2.**绑定中 动画**（bind_bouding_anim.xml），代码如下:\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!--\n    根标签为animation-list，其中oneshot代表着是否只展示一遍，设置为false会不停的循环播放动画\n    根标签下，通过item标签对动画中的每一个图片进行声明\n    android:duration 表示展示所用的该图片的时间长度\n -->\n<animation-list xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:oneshot=\"false\">\n    <item\n        android:drawable=\"@drawable/bouding1\"\n        android:duration=\"150\"></item>\n    <item\n        android:drawable=\"@drawable/bouding2\"\n        android:duration=\"150\"></item>\n    <item\n        android:drawable=\"@drawable/bouding3\"\n        android:duration=\"150\"></item>\n    <item\n        android:drawable=\"@drawable/bouding4\"\n        android:duration=\"150\"></item>\n    <item\n        android:drawable=\"@drawable/bouding5\"\n        android:duration=\"150\"></item>\n</animation-list>\n```\n* 绑定中 使用帧动画，默认配置使用5帧，即：bouding1.png、bouding2.png、bouding3.png、bouding4.png、bouding5.png\n* 图片分辨率：392x276\n\n3.**失败 动画**（bind_failed_anim.xml），代码如下：\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!--\n    根标签为animation-list，其中oneshot代表着是否只展示一遍，设置为false会不停的循环播放动画\n    根标签下，通过item标签对动画中的每一个图片进行声明\n    android:duration 表示展示所用的该图片的时间长度\n -->\n<animation-list xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:oneshot=\"false\">\n    <item\n        android:drawable=\"@drawable/failed1\"\n        android:duration=\"150\"></item>\n    <item\n        android:drawable=\"@drawable/failed2\"\n        android:duration=\"150\"></item>\n</animation-list>\n```\n* 扫描中 使用帧动画，默认配置使用2帧，即：failed1.png和failed2.png\n* 图片分辨率:203x306\n\n\n4.**成功 动画**（bind_sucess_anim.xml），代码如下：\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!--\n    根标签为animation-list，其中oneshot代表着是否只展示一遍，设置为false会不停的循环播放动画\n    根标签下，通过item标签对动画中的每一个图片进行声明\n    android:duration 表示展示所用的该图片的时间长度\n -->\n<animation-list xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:oneshot=\"false\">\n    <item\n        android:drawable=\"@drawable/sucess1\"\n        android:duration=\"150\"></item>\n    <item\n        android:drawable=\"@drawable/sucess2\"\n        android:duration=\"150\"></item>\n</animation-list>\n\n```\n* 扫描中 使用帧动画，默认配置使用2帧，即：sucess1.png和sucess2.png\n* 图片分辨率:203x306\n\n### 网络请求loadding图标配置\n在主工程**res/drawable**下分别新建**bind_network_waiting.xml**资源文件。\n代码如下：\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<animation-list xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:oneshot=\"false\">\n\n    <item\n        android:drawable=\"@drawable/load1\"\n        android:duration=\"200\" />\n    <item\n        android:drawable=\"@drawable/load2\"\n        android:duration=\"200\" />\n\n</animation-list>\n```\n* 网络请求loadding 使用帧动画，默认配置使用2帧，即：load1.png和load2.png\n* 图片分辨率:126x126\n\n缺省配置如图2：\n\n\n![img1](public-bind/loading.png)\n**图2**\n\n\n### 下拉列表Header动画配置\n在主工程**res/drawable**下分别新建**bind_droplistview_anim.xml**资源文件。\n代码如下：\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!--\n    根标签为animation-list，其中oneshot代表着是否只展示一遍，设置为false会不停的循环播放动画\n    根标签下，通过item标签对动画中的每一个图片进行声明\n    android:duration 表示展示所用的该图片的时间长度\n -->\n<animation-list xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:oneshot=\"false\">\n    <item\n        android:drawable=\"@drawable/list1\"\n        android:duration=\"150\"></item>\n    <item\n        android:drawable=\"@drawable/list2\"\n        android:duration=\"150\"></item>\n    <item\n        android:drawable=\"@drawable/list3\"\n        android:duration=\"150\"></item>\n    <item\n        android:drawable=\"@drawable/list4\"\n        android:duration=\"150\"></item>\n    <item\n        android:drawable=\"@drawable/list5\"\n        android:duration=\"150\"></item>\n</animation-list>\n\n```\n* 下拉列表Header动画 使用帧动画，默认配置使用5帧，即：list1.png、list2.png、list3.png、list4.png、list5.png\n* 图片分辨率:72x72\n\n缺省配置如图3：\n\n\n\n![img1](public-bind/droplist.png)\n**图3**\n\n\n\n\n\n","slug":"public-bind","published":1,"updated":"2018-04-03T07:05:42.842Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfjja6pp001764v4xoiyfzf2","content":"<p>由于公共模块绑定满足不了TOB项目以及其他项目特殊需求，现对公共模块绑定界面的资源做成可配置，本文介绍一下哪些资源可配置以及如何配置。<br><a id=\"more\"></a></p>\n<h3 id=\"颜色配置\"><a href=\"#颜色配置\" class=\"headerlink\" title=\"颜色配置\"></a>颜色配置</h3><p>  颜色的配置需要在<strong>res/values，res/values-v14，res/values-v19，res/values-v21</strong>等目录下新建<br>  <font color=\"red\" face=\"黑体\" size=\"4\">color.xml</font>。<br>  color.xml内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;resources&gt;</span><br><span class=\"line\">    &lt;color name=&quot;title_bar_bg_color&quot;&gt;#FFFF4444&lt;/color&gt;</span><br><span class=\"line\">&lt;/resources&gt;</span><br></pre></td></tr></table></figure>\n<p>  目录结构如图1所示</p>\n<p><img src=\"/2016/05/11/public-bind/values.png\" alt=\"img1\"><br><strong>图1</strong></p>\n<p><strong>1.标题颜</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;resources&gt;</span><br><span class=\"line\">    &lt;color name=&quot;title_bar_bg_color&quot;&gt;填入需要配置的颜色值（#FFFF0000）&lt;/color&gt;</span><br><span class=\"line\">&lt;/resources&gt;</span><br></pre></td></tr></table></figure></p>\n<p><strong>2.子分类列表背景色</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;resources&gt;</span><br><span class=\"line\">    &lt;color name=&quot;color_app_themes&quot;&gt;填入需要配置的颜色值（#FFFF0000）&lt;/color&gt;</span><br><span class=\"line\">&lt;/resources&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"绑定动画配置\"><a href=\"#绑定动画配置\" class=\"headerlink\" title=\"绑定动画配置\"></a>绑定动画配置</h3><blockquote>\n<p>在主工程<strong>res/drawable</strong>下分别新建<strong>bind_scanning_anim.xml、bind_bouding_anim.xml、bind_failed_anim.xml、bind_sucess_anim.xml</strong>资源文件；</p>\n</blockquote>\n<p>1.<strong>“扫描中“动画</strong>（bind_scanning_anim.xml），代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;!--</span><br><span class=\"line\">    根标签为animation-list，其中oneshot代表着是否只展示一遍，设置为false会不停的循环播放动画</span><br><span class=\"line\">    根标签下，通过item标签对动画中的每一个图片进行声明</span><br><span class=\"line\">    android:duration 表示展示所用的该图片的时间长度</span><br><span class=\"line\">    </span><br><span class=\"line\"> --&gt;</span><br><span class=\"line\">&lt;animation-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">    android:oneshot=&quot;false&quot;&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:drawable=&quot;@drawable/scan1&quot;</span><br><span class=\"line\">        android:duration=&quot;150&quot;&gt;&lt;/item&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:drawable=&quot;@drawable/scan2&quot;</span><br><span class=\"line\">        android:duration=&quot;150&quot;&gt;&lt;/item&gt;</span><br><span class=\"line\">&lt;/animation-list&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>扫描中 使用帧动画，默认配置中两帧，即：scan1.png和scan2.png</li>\n<li>图片分辨率:201x307</li>\n</ul>\n<p>2.<strong>绑定中 动画</strong>（bind_bouding_anim.xml），代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;!--</span><br><span class=\"line\">    根标签为animation-list，其中oneshot代表着是否只展示一遍，设置为false会不停的循环播放动画</span><br><span class=\"line\">    根标签下，通过item标签对动画中的每一个图片进行声明</span><br><span class=\"line\">    android:duration 表示展示所用的该图片的时间长度</span><br><span class=\"line\"> --&gt;</span><br><span class=\"line\">&lt;animation-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">    android:oneshot=&quot;false&quot;&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:drawable=&quot;@drawable/bouding1&quot;</span><br><span class=\"line\">        android:duration=&quot;150&quot;&gt;&lt;/item&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:drawable=&quot;@drawable/bouding2&quot;</span><br><span class=\"line\">        android:duration=&quot;150&quot;&gt;&lt;/item&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:drawable=&quot;@drawable/bouding3&quot;</span><br><span class=\"line\">        android:duration=&quot;150&quot;&gt;&lt;/item&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:drawable=&quot;@drawable/bouding4&quot;</span><br><span class=\"line\">        android:duration=&quot;150&quot;&gt;&lt;/item&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:drawable=&quot;@drawable/bouding5&quot;</span><br><span class=\"line\">        android:duration=&quot;150&quot;&gt;&lt;/item&gt;</span><br><span class=\"line\">&lt;/animation-list&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>绑定中 使用帧动画，默认配置使用5帧，即：bouding1.png、bouding2.png、bouding3.png、bouding4.png、bouding5.png</li>\n<li>图片分辨率：392x276</li>\n</ul>\n<p>3.<strong>失败 动画</strong>（bind_failed_anim.xml），代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;!--</span><br><span class=\"line\">    根标签为animation-list，其中oneshot代表着是否只展示一遍，设置为false会不停的循环播放动画</span><br><span class=\"line\">    根标签下，通过item标签对动画中的每一个图片进行声明</span><br><span class=\"line\">    android:duration 表示展示所用的该图片的时间长度</span><br><span class=\"line\"> --&gt;</span><br><span class=\"line\">&lt;animation-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">    android:oneshot=&quot;false&quot;&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:drawable=&quot;@drawable/failed1&quot;</span><br><span class=\"line\">        android:duration=&quot;150&quot;&gt;&lt;/item&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:drawable=&quot;@drawable/failed2&quot;</span><br><span class=\"line\">        android:duration=&quot;150&quot;&gt;&lt;/item&gt;</span><br><span class=\"line\">&lt;/animation-list&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>扫描中 使用帧动画，默认配置使用2帧，即：failed1.png和failed2.png</li>\n<li>图片分辨率:203x306</li>\n</ul>\n<p>4.<strong>成功 动画</strong>（bind_sucess_anim.xml），代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;!--</span><br><span class=\"line\">    根标签为animation-list，其中oneshot代表着是否只展示一遍，设置为false会不停的循环播放动画</span><br><span class=\"line\">    根标签下，通过item标签对动画中的每一个图片进行声明</span><br><span class=\"line\">    android:duration 表示展示所用的该图片的时间长度</span><br><span class=\"line\"> --&gt;</span><br><span class=\"line\">&lt;animation-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">    android:oneshot=&quot;false&quot;&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:drawable=&quot;@drawable/sucess1&quot;</span><br><span class=\"line\">        android:duration=&quot;150&quot;&gt;&lt;/item&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:drawable=&quot;@drawable/sucess2&quot;</span><br><span class=\"line\">        android:duration=&quot;150&quot;&gt;&lt;/item&gt;</span><br><span class=\"line\">&lt;/animation-list&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>扫描中 使用帧动画，默认配置使用2帧，即：sucess1.png和sucess2.png</li>\n<li>图片分辨率:203x306</li>\n</ul>\n<h3 id=\"网络请求loadding图标配置\"><a href=\"#网络请求loadding图标配置\" class=\"headerlink\" title=\"网络请求loadding图标配置\"></a>网络请求loadding图标配置</h3><p>在主工程<strong>res/drawable</strong>下分别新建<strong>bind_network_waiting.xml</strong>资源文件。<br>代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;animation-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">    android:oneshot=&quot;false&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:drawable=&quot;@drawable/load1&quot;</span><br><span class=\"line\">        android:duration=&quot;200&quot; /&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:drawable=&quot;@drawable/load2&quot;</span><br><span class=\"line\">        android:duration=&quot;200&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/animation-list&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>网络请求loadding 使用帧动画，默认配置使用2帧，即：load1.png和load2.png</li>\n<li>图片分辨率:126x126</li>\n</ul>\n<p>缺省配置如图2：</p>\n<p><img src=\"/2016/05/11/public-bind/loading.png\" alt=\"img1\"><br><strong>图2</strong></p>\n<h3 id=\"下拉列表Header动画配置\"><a href=\"#下拉列表Header动画配置\" class=\"headerlink\" title=\"下拉列表Header动画配置\"></a>下拉列表Header动画配置</h3><p>在主工程<strong>res/drawable</strong>下分别新建<strong>bind_droplistview_anim.xml</strong>资源文件。<br>代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;!--</span><br><span class=\"line\">    根标签为animation-list，其中oneshot代表着是否只展示一遍，设置为false会不停的循环播放动画</span><br><span class=\"line\">    根标签下，通过item标签对动画中的每一个图片进行声明</span><br><span class=\"line\">    android:duration 表示展示所用的该图片的时间长度</span><br><span class=\"line\"> --&gt;</span><br><span class=\"line\">&lt;animation-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">    android:oneshot=&quot;false&quot;&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:drawable=&quot;@drawable/list1&quot;</span><br><span class=\"line\">        android:duration=&quot;150&quot;&gt;&lt;/item&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:drawable=&quot;@drawable/list2&quot;</span><br><span class=\"line\">        android:duration=&quot;150&quot;&gt;&lt;/item&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:drawable=&quot;@drawable/list3&quot;</span><br><span class=\"line\">        android:duration=&quot;150&quot;&gt;&lt;/item&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:drawable=&quot;@drawable/list4&quot;</span><br><span class=\"line\">        android:duration=&quot;150&quot;&gt;&lt;/item&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:drawable=&quot;@drawable/list5&quot;</span><br><span class=\"line\">        android:duration=&quot;150&quot;&gt;&lt;/item&gt;</span><br><span class=\"line\">&lt;/animation-list&gt;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>下拉列表Header动画 使用帧动画，默认配置使用5帧，即：list1.png、list2.png、list3.png、list4.png、list5.png</li>\n<li>图片分辨率:72x72</li>\n</ul>\n<p>缺省配置如图3：</p>\n<p><img src=\"/2016/05/11/public-bind/droplist.png\" alt=\"img1\"><br><strong>图3</strong></p>\n","site":{"data":{"hint":{"new":{"selector":[".menu-reading",".menu-about"]}},"link":{"social":{"weibo":"http://weibo.com/","github":"https://github.com/xxl6097","rss":"/atom.xml"},"extern":{"raytaylorism主题作者的技术博客":"http://raytaylorlin.com/","Github地址（测试友情链接）":"https://github.com/xxl6097"}},"about":{"avatar":"http://uuxia.cn/image/icon.png","name":"你的大名","tag":"Web前端/Android/Java/C++/技术宅","desc":"在浮躁的世界安安静静地敲代码","skills":{"Javascript":8,"Python":6,"invisible-split-line-1":-1,"Node.js":4},"projects":[{"name":"你的项目A","image":"https://d13yacurqjgara.cloudfront.net/users/138819/screenshots/2578899/dribbble_800x600_01_1x.png","tags":["2016年","项目标签"],"description":"你的项目A的简介","link_text":"网站链接","link":"https://dribbble.com/"},{"name":"你的作品B","image":"https://d13yacurqjgara.cloudfront.net/users/4094/screenshots/2578885/time-lords-drib_1x.jpg","description":"你的作品B的简介","tags":["Github","设计"],"link_text":"Github地址","link":"https://github.com/"}],"reward":["http://uuxia.cn/image/wechat.png","http://uuxia.cn/image/alipay.png"]},"reading":{"define":{"readed":"已读","reading":"在读","wanted":"想读"},"contents":{"readed":[{"title":"众妙之门：网站UI设计之道","cover":"http://img3.douban.com/lpic/s23139051.jpg","review":"推荐非UI人士了解UI阅读。","score":"7","doubanLink":"http://book.douban.com/subject/20281463/"},{"title":"JavaScript模式","cover":"http://img5.douban.com/lpic/s11337059.jpg","review":"书很薄，但内容相当实用。","score":"8.5","doubanLink":"http://book.douban.com/subject/11506062/"},{"title":"JavaScript语言精粹","cover":"http://img3.douban.com/lpic/s11373174.jpg","review":"这是一本前端人员的基础书，强烈推荐阅读，而且越早看受益越多！","score":"9.5","doubanLink":"http://book.douban.com/subject/11874748/"}],"reading":[{"title":"网络游戏核心技术与实战","cover":"http://img4.douban.com/lpic/s27881888.jpg","review":"","score":null,"doubanLink":"http://book.douban.com/subject/25850090/"}],"wanted":[{"title":"计算机程序的构造和解释","cover":"http://img4.douban.com/lpic/s1113106.jpg","review":"","score":null,"doubanLink":"http://book.douban.com/subject/1148282/"}]}}}},"excerpt":"<p>由于公共模块绑定满足不了TOB项目以及其他项目特殊需求，现对公共模块绑定界面的资源做成可配置，本文介绍一下哪些资源可配置以及如何配置。<br></p>","more":"<p></p>\n<h3 id=\"颜色配置\"><a href=\"#颜色配置\" class=\"headerlink\" title=\"颜色配置\"></a>颜色配置</h3><p>  颜色的配置需要在<strong>res/values，res/values-v14，res/values-v19，res/values-v21</strong>等目录下新建<br>  <font color=\"red\" face=\"黑体\" size=\"4\">color.xml</font>。<br>  color.xml内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;resources&gt;</span><br><span class=\"line\">    &lt;color name=&quot;title_bar_bg_color&quot;&gt;#FFFF4444&lt;/color&gt;</span><br><span class=\"line\">&lt;/resources&gt;</span><br></pre></td></tr></table></figure>\n<p>  目录结构如图1所示</p>\n<p><img src=\"/2016/05/11/public-bind/values.png\" alt=\"img1\"><br><strong>图1</strong></p>\n<p><strong>1.标题颜</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;resources&gt;</span><br><span class=\"line\">    &lt;color name=&quot;title_bar_bg_color&quot;&gt;填入需要配置的颜色值（#FFFF0000）&lt;/color&gt;</span><br><span class=\"line\">&lt;/resources&gt;</span><br></pre></td></tr></table></figure></p>\n<p><strong>2.子分类列表背景色</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;resources&gt;</span><br><span class=\"line\">    &lt;color name=&quot;color_app_themes&quot;&gt;填入需要配置的颜色值（#FFFF0000）&lt;/color&gt;</span><br><span class=\"line\">&lt;/resources&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"绑定动画配置\"><a href=\"#绑定动画配置\" class=\"headerlink\" title=\"绑定动画配置\"></a>绑定动画配置</h3><blockquote>\n<p>在主工程<strong>res/drawable</strong>下分别新建<strong>bind_scanning_anim.xml、bind_bouding_anim.xml、bind_failed_anim.xml、bind_sucess_anim.xml</strong>资源文件；</p>\n</blockquote>\n<p>1.<strong>“扫描中“动画</strong>（bind_scanning_anim.xml），代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;!--</span><br><span class=\"line\">    根标签为animation-list，其中oneshot代表着是否只展示一遍，设置为false会不停的循环播放动画</span><br><span class=\"line\">    根标签下，通过item标签对动画中的每一个图片进行声明</span><br><span class=\"line\">    android:duration 表示展示所用的该图片的时间长度</span><br><span class=\"line\">    </span><br><span class=\"line\"> --&gt;</span><br><span class=\"line\">&lt;animation-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">    android:oneshot=&quot;false&quot;&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:drawable=&quot;@drawable/scan1&quot;</span><br><span class=\"line\">        android:duration=&quot;150&quot;&gt;&lt;/item&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:drawable=&quot;@drawable/scan2&quot;</span><br><span class=\"line\">        android:duration=&quot;150&quot;&gt;&lt;/item&gt;</span><br><span class=\"line\">&lt;/animation-list&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>扫描中 使用帧动画，默认配置中两帧，即：scan1.png和scan2.png</li>\n<li>图片分辨率:201x307</li>\n</ul>\n<p>2.<strong>绑定中 动画</strong>（bind_bouding_anim.xml），代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;!--</span><br><span class=\"line\">    根标签为animation-list，其中oneshot代表着是否只展示一遍，设置为false会不停的循环播放动画</span><br><span class=\"line\">    根标签下，通过item标签对动画中的每一个图片进行声明</span><br><span class=\"line\">    android:duration 表示展示所用的该图片的时间长度</span><br><span class=\"line\"> --&gt;</span><br><span class=\"line\">&lt;animation-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">    android:oneshot=&quot;false&quot;&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:drawable=&quot;@drawable/bouding1&quot;</span><br><span class=\"line\">        android:duration=&quot;150&quot;&gt;&lt;/item&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:drawable=&quot;@drawable/bouding2&quot;</span><br><span class=\"line\">        android:duration=&quot;150&quot;&gt;&lt;/item&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:drawable=&quot;@drawable/bouding3&quot;</span><br><span class=\"line\">        android:duration=&quot;150&quot;&gt;&lt;/item&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:drawable=&quot;@drawable/bouding4&quot;</span><br><span class=\"line\">        android:duration=&quot;150&quot;&gt;&lt;/item&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:drawable=&quot;@drawable/bouding5&quot;</span><br><span class=\"line\">        android:duration=&quot;150&quot;&gt;&lt;/item&gt;</span><br><span class=\"line\">&lt;/animation-list&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>绑定中 使用帧动画，默认配置使用5帧，即：bouding1.png、bouding2.png、bouding3.png、bouding4.png、bouding5.png</li>\n<li>图片分辨率：392x276</li>\n</ul>\n<p>3.<strong>失败 动画</strong>（bind_failed_anim.xml），代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;!--</span><br><span class=\"line\">    根标签为animation-list，其中oneshot代表着是否只展示一遍，设置为false会不停的循环播放动画</span><br><span class=\"line\">    根标签下，通过item标签对动画中的每一个图片进行声明</span><br><span class=\"line\">    android:duration 表示展示所用的该图片的时间长度</span><br><span class=\"line\"> --&gt;</span><br><span class=\"line\">&lt;animation-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">    android:oneshot=&quot;false&quot;&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:drawable=&quot;@drawable/failed1&quot;</span><br><span class=\"line\">        android:duration=&quot;150&quot;&gt;&lt;/item&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:drawable=&quot;@drawable/failed2&quot;</span><br><span class=\"line\">        android:duration=&quot;150&quot;&gt;&lt;/item&gt;</span><br><span class=\"line\">&lt;/animation-list&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>扫描中 使用帧动画，默认配置使用2帧，即：failed1.png和failed2.png</li>\n<li>图片分辨率:203x306</li>\n</ul>\n<p>4.<strong>成功 动画</strong>（bind_sucess_anim.xml），代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;!--</span><br><span class=\"line\">    根标签为animation-list，其中oneshot代表着是否只展示一遍，设置为false会不停的循环播放动画</span><br><span class=\"line\">    根标签下，通过item标签对动画中的每一个图片进行声明</span><br><span class=\"line\">    android:duration 表示展示所用的该图片的时间长度</span><br><span class=\"line\"> --&gt;</span><br><span class=\"line\">&lt;animation-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">    android:oneshot=&quot;false&quot;&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:drawable=&quot;@drawable/sucess1&quot;</span><br><span class=\"line\">        android:duration=&quot;150&quot;&gt;&lt;/item&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:drawable=&quot;@drawable/sucess2&quot;</span><br><span class=\"line\">        android:duration=&quot;150&quot;&gt;&lt;/item&gt;</span><br><span class=\"line\">&lt;/animation-list&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>扫描中 使用帧动画，默认配置使用2帧，即：sucess1.png和sucess2.png</li>\n<li>图片分辨率:203x306</li>\n</ul>\n<h3 id=\"网络请求loadding图标配置\"><a href=\"#网络请求loadding图标配置\" class=\"headerlink\" title=\"网络请求loadding图标配置\"></a>网络请求loadding图标配置</h3><p>在主工程<strong>res/drawable</strong>下分别新建<strong>bind_network_waiting.xml</strong>资源文件。<br>代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;animation-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">    android:oneshot=&quot;false&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:drawable=&quot;@drawable/load1&quot;</span><br><span class=\"line\">        android:duration=&quot;200&quot; /&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:drawable=&quot;@drawable/load2&quot;</span><br><span class=\"line\">        android:duration=&quot;200&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/animation-list&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>网络请求loadding 使用帧动画，默认配置使用2帧，即：load1.png和load2.png</li>\n<li>图片分辨率:126x126</li>\n</ul>\n<p>缺省配置如图2：</p>\n<p><img src=\"/2016/05/11/public-bind/loading.png\" alt=\"img1\"><br><strong>图2</strong></p>\n<h3 id=\"下拉列表Header动画配置\"><a href=\"#下拉列表Header动画配置\" class=\"headerlink\" title=\"下拉列表Header动画配置\"></a>下拉列表Header动画配置</h3><p>在主工程<strong>res/drawable</strong>下分别新建<strong>bind_droplistview_anim.xml</strong>资源文件。<br>代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;!--</span><br><span class=\"line\">    根标签为animation-list，其中oneshot代表着是否只展示一遍，设置为false会不停的循环播放动画</span><br><span class=\"line\">    根标签下，通过item标签对动画中的每一个图片进行声明</span><br><span class=\"line\">    android:duration 表示展示所用的该图片的时间长度</span><br><span class=\"line\"> --&gt;</span><br><span class=\"line\">&lt;animation-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">    android:oneshot=&quot;false&quot;&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:drawable=&quot;@drawable/list1&quot;</span><br><span class=\"line\">        android:duration=&quot;150&quot;&gt;&lt;/item&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:drawable=&quot;@drawable/list2&quot;</span><br><span class=\"line\">        android:duration=&quot;150&quot;&gt;&lt;/item&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:drawable=&quot;@drawable/list3&quot;</span><br><span class=\"line\">        android:duration=&quot;150&quot;&gt;&lt;/item&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:drawable=&quot;@drawable/list4&quot;</span><br><span class=\"line\">        android:duration=&quot;150&quot;&gt;&lt;/item&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:drawable=&quot;@drawable/list5&quot;</span><br><span class=\"line\">        android:duration=&quot;150&quot;&gt;&lt;/item&gt;</span><br><span class=\"line\">&lt;/animation-list&gt;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>下拉列表Header动画 使用帧动画，默认配置使用5帧，即：list1.png、list2.png、list3.png、list4.png、list5.png</li>\n<li>图片分辨率:72x72</li>\n</ul>\n<p>缺省配置如图3：</p>\n<p><img src=\"/2016/05/11/public-bind/droplist.png\" alt=\"img1\"><br><strong>图3</strong></p>"},{"title":"OkHttp使用教程","date":"2016-05-09T15:29:13.000Z","_content":"这是一个针对技术开发者的一个应用，你可以在掘金上获取最新最优质的技术干货，不仅仅是Android知识、前端、后端以至于产品和设计都有涉猎，想成为全栈工程师的朋友不要错过！\n<!--more-->\n# 入门 \nAndroid系统提供了两种HTTP通信类，HttpURLConnection和HttpClient。\n[关于HttpURLConnection和HttpClient的选择>>官方博客](http://android-developers.blogspot.com/2011/09/androids-http-clients.html)\n尽管Google在大部分安卓版本中推荐使用HttpURLConnection，但是这个类相比HttpClient实在是太难用，太弱爆了。\nOkHttp是一个相对成熟的解决方案，据说Android4.4的源码中可以看到HttpURLConnection已经替换成OkHttp实现了。所以我们更有理由相信OkHttp的强大。\n\nOkHttp 处理了很多网络疑难杂症：会从很多常用的连接问题中自动恢复。如果您的服务器配置了多个IP地址，当第一个IP连接失败的时候，OkHttp会自动尝试下一个IP。OkHttp还处理了代理服务器问题和SSL握手失败问题。\n\n使用 OkHttp 无需重写您程序中的网络代码。OkHttp实现了几乎和java.net.HttpURLConnection一样的API。如果你用了 Apache HttpClient，则OkHttp也提供了一个对应的okhttp-apache 模块。\n\n> 注：在国内使用OkHttp会因为这个问题导致部分酷派手机用户无法联网，所以对于大众app来说，需要等待这个bug修复后再使用。或者尝试使用OkHttp的老版本。\n截止到目前，OkHttp一直没有修复，并把修复计划延迟到了OkHttp2.3中。不是所有设备都能重现，仅少量设备会出现这个问题。（如果问题这么明显，OkHttp早就修复了）\n\n## 官方资料\n[官方介绍](http://square.github.io/okhttp/)\n[github源码](https://github.com/square/okhttp)\n## 使用范围\nOkHttp支持Android 2.3及其以上版本。\n对于Java, JDK1.7以上。\n\n## jar包准备\n官方介绍页面有链接位置。这里把下载链接也写在下面。\n[OkHttp](http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST)\n[Okio](http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okio&a=okio&v=LATEST)\n\n## 基本使用\n**HTTP GET**\n\n```\nOkHttpClient client = new OkHttpClient();\n \nString run(String url) throws IOException {\n    Request request = new Request.Builder().url(url).build();\n    Response response = client.newCall(request).execute();    if (response.isSuccessful()) {        return response.body().string();\n    } else {        throw new IOException(\"Unexpected code \" + response);\n    }\n}\n```\nRequest是OkHttp中访问的请求，Builder是辅助类。Response即OkHttp中的响应。\n**Response类：**\n\n```\npublic boolean isSuccessful()\nReturns true if the code is in [200..300),\n which means the request was successfully received, understood, and accepted.\n```\n**response.body()返回ResponseBody类**\n\n```\npublic final String string() throws IOException\nReturns the response as a string decoded with the charset of the Content-Type header. If that header is either absent or lacks a charset,\n this will attempt to decode the response body as UTF-8.Throws:\nIOException\n```\n当然也能获取到流的形式：\n\n```\npublic final InputStream byteStream()\n```\n**HTTP POST\nPOST提交Json数据**\n\n```\npublic static final MediaType JSON = MediaType.parse(\"application/json; charset=utf-8\");\nOkHttpClient client = new OkHttpClient();\nString post(String url, String json) throws IOException {\n     RequestBody body = RequestBody.create(JSON, json);\n      Request request = new Request.Builder()\n      .url(url)\n      .post(body)\n      .build();\n      Response response = client.newCall(request).execute();\n    f (response.isSuccessful()) {\n        return response.body().string();\n    } else {\n        throw new IOException(\"Unexpected code \" + response);\n    }\n}\n```\n使用Request的post方法来提交请求体RequestBody\n\n** POST提交键值对**\n很多时候我们会需要通过POST方式把键值对数据传送到服务器。 OkHttp提供了很方便的方式来做这件事情。\n\n```\nOkHttpClient client = new OkHttpClient();\nString post(String url, String json) throws IOException {\n \n     RequestBody formBody = new FormEncodingBuilder()\n    .add(\"platform\", \"android\")\n    .add(\"name\", \"bug\")\n    .add(\"subject\", \"XXXXXXXXXXXXXXX\")\n    .build();\n \n      Request request = new Request.Builder()\n      .url(url)\n      .post(body)\n      .build();\n \n      Response response = client.newCall(request).execute();\n    if (response.isSuccessful()) {\n        return response.body().string();\n    } else {\n        throw new IOException(\"Unexpected code \" + response);\n    }\n}\n```\n## 总结\n通过上面的例子我们可以发现，OkHttp在很多时候使用都是很方便的，而且很多代码也有重复，因此特地整理了下面的工具类。\n注意：\n\n - OkHttp官方文档并不建议我们创建多个OkHttpClient，因此全局使用一个。 如果有需要，可以使用clone方法，再进行自定义。这点在后面的高级教程里会提到。\n - enqueue为OkHttp提供的异步方法，入门教程中并没有提到，后面的高级教程里会有解释。\n\n```\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\nimport org.apache.http.client.utils.URLEncodedUtils;\nimport org.apache.http.message.BasicNameValuePair;\nimport cn.wiz.sdk.constant.WizConstant;\nimport com.squareup.okhttp.Callback;\nimport com.squareup.okhttp.OkHttpClient;\nimport com.squareup.okhttp.Request;\nimport com.squareup.okhttp.Response; \n  \npublic class OkHttpUtil {\n    private static final OkHttpClient mOkHttpClient = new OkHttpClient();\n    static{\n        mOkHttpClient.setConnectTimeout(30, TimeUnit.SECONDS);\n    }\n    /**\n     * 该不会开启异步线程。\n     * @param request\n     * @return\n     * @throws IOException\n     */\n    public static Response execute(Request request) throws IOException{\n        return mOkHttpClient.newCall(request).execute();\n    }\n    /**\n     * 开启异步线程访问网络\n     * @param request\n     * @param responseCallback\n     */\n    public static void enqueue(Request request, Callback responseCallback){\n        mOkHttpClient.newCall(request).enqueue(responseCallback);\n    }\n    /**\n     * 开启异步线程访问网络, 且不在意返回结果（实现空callback）\n     * @param request\n     */\n    public static void enqueue(Request request){\n        mOkHttpClient.newCall(request).enqueue(new Callback() {\n             \n            @Override\n            public void onResponse(Response arg0) throws IOException {\n                 \n            }\n             \n            @Override\n            public void onFailure(Request arg0, IOException arg1) {\n                 \n            }\n        });\n    }\n    public static String getStringFromServer(String url) throws IOException{\n        Request request = new Request.Builder().url(url).build();\n        Response response = execute(request);\n        if (response.isSuccessful()) {\n            String responseUrl = response.body().string();\n            return responseUrl;\n        } else {\n            throw new IOException(\"Unexpected code \" + response);\n        }\n    }\n    private static final String CHARSET_NAME = \"UTF-8\";\n    /**\n     * 这里使用了HttpClinet的API。只是为了方便\n     * @param params\n     * @return\n     */\n    public static String formatParams(List<BasicNameValuePair> params){\n        return URLEncodedUtils.format(params, CHARSET_NAME);\n    }\n    /**\n     * 为HttpGet 的 url 方便的添加多个name value 参数。\n     * @param url\n     * @param params\n     * @return\n     */\n    public static String attachHttpGetParams(String url, List<BasicNameValuePair> params){\n        return url + \"?\" + formatParams(params);\n    }\n    /**\n     * 为HttpGet 的 url 方便的添加1个name value 参数。\n     * @param url\n     * @param name\n     * @param value\n     * @return\n     */\n    public static String attachHttpGetParam(String url, String name, String value){\n        return url + \"?\" + name + \"=\" + value;\n    }\n}\n```\n\n## 高级\n高级属性其实用的不多，这里主要是对OkHttp github官方教程进行了翻译。\n\n## 同步get\n下载一个文件，打印他的响应头，以string形式打印响应体。\n响应体的 string() 方法对于小文档来说十分方便、高效。但是如果响应体太大（超过1MB），应避免适应 string()方法 ，因为他会将把整个文档加载到内存中。\n对于超过1MB的响应body，应使用流的方式来处理body。\n\n```\nprivate final OkHttpClient client = new OkHttpClient();\n \npublic void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"http://publicobject.com/helloworld.txt\")\n        .build();\n \n    Response response = client.newCall(request).execute();\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n \n    Headers responseHeaders = response.headers();\n    for (int i = 0; i < responseHeaders.size(); i++) {\n      System.out.println(responseHeaders.name(i) + \": \" + responseHeaders.value(i));\n    }\n \n    System.out.println(response.body().string());\n}\n```\n## 异步get\n在一个工作线程中下载文件，当响应可读时回调Callback接口。读取响应时会阻塞当前线程。OkHttp现阶段不提供异步api来接收响应体。\n\n```\nprivate final OkHttpClient client = new OkHttpClient();\n \npublic void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"http://publicobject.com/helloworld.txt\")\n        .build();\n \n    client.newCall(request).enqueue(new Callback() {\n      @Override public void onFailure(Request request, Throwable throwable) {\n        throwable.printStackTrace();\n      }\n \n      @Override public void onResponse(Response response) throws IOException {\n        if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n \n        Headers responseHeaders = response.headers();\n        for (int i = 0; i < responseHeaders.size(); i++) {\n          System.out.println(responseHeaders.name(i) + \": \" + responseHeaders.value(i));\n        }\n \n        System.out.println(response.body().string());\n      }\n    });\n}\n```\n## 提取响应头\n\n典型的HTTP头 像是一个 Map<String, String> :每个字段都有一个或没有值。但是一些头允许多个值，像Guava的Multimap。例如：HTTP响应里面提供的Vary响应头，就是多值的。OkHttp的api试图让这些情况都适用。\n当写请求头的时候，使用header(name, value)可以设置唯一的name、value。如果已经有值，旧的将被移除，然后添加新的。使用addHeader(name, value)可以添加多值（添加，不移除已有的）。\n当读取响应头时，使用header(name)返回最后出现的name、value。通常情况这也是唯一的name、value。如果没有值，那么header(name)将返回null。如果想读取字段对应的所有值，使用headers(name)会返回一个list。\n为了获取所有的Header，Headers类支持按index访问。\n\n```\nprivate final OkHttpClient client = new OkHttpClient();\n \npublic void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"https://api.github.com/repos/square/okhttp/issues\")\n        .header(\"User-Agent\", \"OkHttp Headers.java\")\n        .addHeader(\"Accept\", \"application/json; q=0.5\")\n        .addHeader(\"Accept\", \"application/vnd.github.v3+json\")\n        .build();\n \n    Response response = client.newCall(request).execute();\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n \n    System.out.println(\"Server: \" + response.header(\"Server\"));\n    System.out.println(\"Date: \" + response.header(\"Date\"));\n    System.out.println(\"Vary: \" + response.headers(\"Vary\"));\n}\n```\n## Post方式提交String\n使用HTTP POST提交请求到服务。这个例子提交了一个markdown文档到web服务，以HTML方式渲染markdown。因为整个请求体都在内存中，因此避免使用此api提交大文档（大于1MB）。\n\n```\npublic static final MediaType MEDIA_TYPE_MARKDOWN\n  = MediaType.parse(\"text/x-markdown; charset=utf-8\");\n \nprivate final OkHttpClient client = new OkHttpClient();\n \npublic void run() throws Exception {\n    String postBody = \"\"\n        + \"Releases\\n\"\n        + \"--------\\n\"\n        + \"\\n\"\n        + \" * _1.0_ May 6, 2013\\n\"\n        + \" * _1.1_ June 15, 2013\\n\"\n        + \" * _1.2_ August 11, 2013\\n\";\n \n    Request request = new Request.Builder()\n        .url(\"https://api.github.com/markdown/raw\")\n        .post(RequestBody.create(MEDIA_TYPE_MARKDOWN, postBody))\n        .build();\n \n    Response response = client.newCall(request).execute();\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n \n    System.out.println(response.body().string());\n}\n```\n## Post方式提交流\n以流的方式POST提交请求体。请求体的内容由流写入产生。这个例子是流直接写入Okio的BufferedSink。你的程序可能会使用OutputStream，你可以使用BufferedSink.outputStream()来获取。\n\n```\npublic static final MediaType MEDIA_TYPE_MARKDOWN\n      = MediaType.parse(\"text/x-markdown; charset=utf-8\");\n \nprivate final OkHttpClient client = new OkHttpClient();\n \npublic void run() throws Exception {\n    RequestBody requestBody = new RequestBody() {\n      @Override public MediaType contentType() {\n        return MEDIA_TYPE_MARKDOWN;\n      }\n \n      @Override public void writeTo(BufferedSink sink) throws IOException {\n        sink.writeUtf8(\"Numbers\\n\");\n        sink.writeUtf8(\"-------\\n\");\n        for (int i = 2; i <= 997; i++) {\n          sink.writeUtf8(String.format(\" * %s = %s\\n\", i, factor(i)));\n        }\n      }\n \n      private String factor(int n) {\n        for (int i = 2; i < n; i++) {\n          int x = n / i;\n          if (x * i == n) return factor(x) + \" × \" + i;\n        }\n        return Integer.toString(n);\n      }\n    };\n \n    Request request = new Request.Builder()\n        .url(\"https://api.github.com/markdown/raw\")\n        .post(requestBody)\n        .build();\n \n    Response response = client.newCall(request).execute();\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n \n    System.out.println(response.body().string());\n}\n```\n## Post方式提交文件\n以文件作为请求体是十分简单的。\n\n```\npublic static final MediaType MEDIA_TYPE_MARKDOWN\n  = MediaType.parse(\"text/x-markdown; charset=utf-8\");\n \nprivate final OkHttpClient client = new OkHttpClient();\n \npublic void run() throws Exception {\n    File file = new File(\"README.md\");\n \n    Request request = new Request.Builder()\n        .url(\"https://api.github.com/markdown/raw\")\n        .post(RequestBody.create(MEDIA_TYPE_MARKDOWN, file))\n        .build();\n \n    Response response = client.newCall(request).execute();\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n \n    System.out.println(response.body().string());\n}\n```\n## Post方式提交表单\n使用FormEncodingBuilder来构建和HTML<form>标签相同效果的请求体。键值对将使用一种HTML兼容形式的URL编码来进行编码。\n\n```\nprivate final OkHttpClient client = new OkHttpClient();\n \npublic void run() throws Exception {\n    RequestBody formBody = new FormEncodingBuilder()\n        .add(\"search\", \"Jurassic Park\")\n        .build();\n    Request request = new Request.Builder()\n        .url(\"https://en.wikipedia.org/w/index.php\")\n        .post(formBody)\n        .build();\n \n    Response response = client.newCall(request).execute();\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n \n    System.out.println(response.body().string());\n}\n```\n## Post方式提交分块请求\nMultipartBuilder可以构建复杂的请求体，与HTML文件上传形式兼容。多块请求体中每块请求都是一个请求体，可以定义自己的请求头。这些请求头可以用来描述这块请求，例如他的Content-Disposition。如果Content-Length和Content-Type可用的话，他们会被自动添加到请求头中。\n\n```\nprivate static final String IMGUR_CLIENT_ID = \"...\";\nprivate static final MediaType MEDIA_TYPE_PNG = MediaType.parse(\"image/png\");\n \nprivate final OkHttpClient client = new OkHttpClient();\n \npublic void run() throws Exception {\n    // Use the imgur image upload API as documented at https://api.imgur.com/endpoints/image\n    RequestBody requestBody = new MultipartBuilder()\n        .type(MultipartBuilder.FORM)\n        .addPart(\n            Headers.of(\"Content-Disposition\", \"form-data; name=\\\"title\\\"\"),\n            RequestBody.create(null, \"Square Logo\"))\n        .addPart(\n            Headers.of(\"Content-Disposition\", \"form-data; name=\\\"image\\\"\"),\n            RequestBody.create(MEDIA_TYPE_PNG, new File(\"website/static/logo-square.png\")))\n        .build();\n \n    Request request = new Request.Builder()\n        .header(\"Authorization\", \"Client-ID \" + IMGUR_CLIENT_ID)\n        .url(\"https://api.imgur.com/3/image\")\n        .post(requestBody)\n        .build();\n \n    Response response = client.newCall(request).execute();\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n \n    System.out.println(response.body().string());\n}\n```\n## 使用Gson来解析JSON响应\nGson是一个在JSON和Java对象之间转换非常方便的api。这里我们用Gson来解析Github API的JSON响应。\n注意：ResponseBody.charStream()使用响应头Content-Type指定的字符集来解析响应体。默认是UTF-8。\n\n```\nprivate final OkHttpClient client = new OkHttpClient();\nprivate final Gson gson = new Gson();\n \npublic void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"https://api.github.com/gists/c2a7c39532239ff261be\")\n        .build();\n    Response response = client.newCall(request).execute();\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n \n    Gist gist = gson.fromJson(response.body().charStream(), Gist.class);\n    for (Map.Entry<String, GistFile> entry : gist.files.entrySet()) {\n      System.out.println(entry.getKey());\n      System.out.println(entry.getValue().content);\n    }\n}\n \nstatic class Gist {\n    Map<String, GistFile> files;\n}\n \nstatic class GistFile {\n    String content;\n}\n```\n## 响应缓存\n为了缓存响应，你需要一个你可以读写的缓存目录，和缓存大小的限制。这个缓存目录应该是私有的，不信任的程序应不能读取缓存内容。\n一个缓存目录同时拥有多个缓存访问是错误的。大多数程序只需要调用一次new OkHttp()，在第一次调用时配置好缓存，然后其他地方只需要调用这个实例就可以了。否则两个缓存示例互相干扰，破坏响应缓存，而且有可能会导致程序崩溃。\n响应缓存使用HTTP头作为配置。你可以在请求头中添加Cache-Control: max-stale=3600 ,OkHttp缓存会支持。你的服务通过响应头确定响应缓存多长时间，例如使用Cache-Control: max-age=9600。\n\n```\nprivate final OkHttpClient client;\n \npublic CacheResponse(File cacheDirectory) throws Exception {\n    int cacheSize = 10 * 1024 * 1024; // 10 MiB\n    Cache cache = new Cache(cacheDirectory, cacheSize);\n \n    client = new OkHttpClient();\n    client.setCache(cache);\n}\n \npublic void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"http://publicobject.com/helloworld.txt\")\n        .build();\n \n    Response response1 = client.newCall(request).execute();\n    if (!response1.isSuccessful()) throw new IOException(\"Unexpected code \" + response1);\n \n    String response1Body = response1.body().string();\n    System.out.println(\"Response 1 response:          \" + response1);\n    System.out.println(\"Response 1 cache response:    \" + response1.cacheResponse());\n    System.out.println(\"Response 1 network response:  \" + response1.networkResponse());\n \n    Response response2 = client.newCall(request).execute();\n    if (!response2.isSuccessful()) throw new IOException(\"Unexpected code \" + response2);\n \n    String response2Body = response2.body().string();\n    System.out.println(\"Response 2 response:          \" + response2);\n    System.out.println(\"Response 2 cache response:    \" + response2.cacheResponse());\n    System.out.println(\"Response 2 network response:  \" + response2.networkResponse());\n \n    System.out.println(\"Response 2 equals Response 1? \" + response1Body.equals(response2Body));\n}\n```\n## 扩展\n在这一节还提到了下面一句：\nThere are cache headers to force a cached response, force a network response, or force the network response to be validated with a conditional GET.\n\n我不是很懂cache，平时用到的也不多，所以把Google在Android Developers一段相关的解析放到这里吧。\n\n## Force a Network Response\nIn some situations, such as after a user clicks a 'refresh' button, it may be necessary to skip the cache, and fetch data directly from the server. To force a full refresh, add the no-cache directive:\n\n> connection.addRequestProperty(\"Cache-Control\", \"no-cache\");\n\nIf it is only necessary to force a cached response to be validated by the server, use the more efficient max-age=0 instead:\n\n> connection.addRequestProperty(\"Cache-Control\", \"max-age=0\");\n\n##Force a Cache Response\nSometimes you'll want to show resources if they are available immediately, but not otherwise. This can be used so your application can show something while waiting for the latest data to be downloaded. To restrict a request to locally-cached resources, add the only-if-cached directive:\n\n```\ntry {\n     connection.addRequestProperty(\"Cache-Control\", \"only-if-cached\");\n     InputStream cached = connection.getInputStream();\n     // the resource was cached! show it\n  catch (FileNotFoundException e) {\n     // the resource was not cached\n }\n}\n```\nThis technique works even better in situations where a stale response is better than no response. To permit stale cached responses, use the max-stale directive with the maximum staleness in seconds:\n\n```\nint maxStale = 60 * 60 * 24 * 28; // tolerate 4-weeks staleconnection.addRequestProperty(\"Cache-Control\", \"max-stale=\" + maxStale);\n\n```\n以上信息来自：[HttpResponseCache - Android SDK | Android Developers](http://developer.android.com/reference/android/net/http/HttpResponseCache.html)\n\n\n## 取消一个Call\n使用Call.cancel()可以立即停止掉一个正在执行的call。如果一个线程正在写请求或者读响应，将会引发IOException。当call没有必要的时候，使用这个api可以节约网络资源。例如当用户离开一个应用时。不管同步还是异步的call都可以取消。\n你可以通过tags来同时取消多个请求。当你构建一请求时，使用RequestBuilder.tag(tag)来分配一个标签。之后你就可以用OkHttpClient.cancel(tag)来取消所有带有这个tag的call。\n\n```\nprivate final ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);\nprivate final OkHttpClient client = new OkHttpClient();\n \npublic void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"http://httpbin.org/delay/2\") // This URL is served with a 2 second delay.\n        .build();\n \n    final long startNanos = System.nanoTime();\n    final Call call = client.newCall(request);\n \n    // Schedule a job to cancel the call in 1 second.\n    executor.schedule(new Runnable() {\n      @Override public void run() {\n        System.out.printf(\"%.2f Canceling call.%n\", (System.nanoTime() - startNanos) / 1e9f);\n        call.cancel();\n        System.out.printf(\"%.2f Canceled call.%n\", (System.nanoTime() - startNanos) / 1e9f);\n      }\n    }, 1, TimeUnit.SECONDS);\n \n    try {\n      System.out.printf(\"%.2f Executing call.%n\", (System.nanoTime() - startNanos) / 1e9f);\n      Response response = call.execute();\n      System.out.printf(\"%.2f Call was expected to fail, but completed: %s%n\",\n          (System.nanoTime() - startNanos) / 1e9f, response);\n    } catch (IOException e) {\n      System.out.printf(\"%.2f Call failed as expected: %s%n\",\n          (System.nanoTime() - startNanos) / 1e9f, e);\n    }\n}\n```\n\n## 超时\n没有响应时使用超时结束call。没有响应的原因可能是客户点链接问题、服务器可用性问题或者这之间的其他东西。OkHttp支持连接，读取和写入超时\n\n```\nprivate final OkHttpClient client;\n \npublic ConfigureTimeouts() throws Exception {\n    client = new OkHttpClient();\n    client.setConnectTimeout(10, TimeUnit.SECONDS);\n    client.setWriteTimeout(10, TimeUnit.SECONDS);\n    client.setReadTimeout(30, TimeUnit.SECONDS);\n}\n \npublic void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"http://httpbin.org/delay/2\") // This URL is served with a 2 second delay.\n        .build();\n \n    Response response = client.newCall(request).execute();\n    System.out.println(\"Response completed: \" + response);\n}\n```\n\n## 每个call的配置\n使用OkHttpClient，所有的HTTP Client配置包括代理设置、超时设置、缓存设置。当你需要为单个call改变配置的时候，clone 一个 OkHttpClient。这个api将会返回一个浅拷贝（shallow copy），你可以用来单独自定义。下面的例子中，我们让一个请求是500ms的超时、另一个是3000ms的超时。\n\n\n```\nprivate final OkHttpClient client = new OkHttpClient();\n \npublic void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"http://httpbin.org/delay/1\") // This URL is served with a 1 second delay.\n        .build();\n \n    try {\n      Response response = client.clone() // Clone to make a customized OkHttp for this request.\n          .setReadTimeout(500, TimeUnit.MILLISECONDS)\n          .newCall(request)\n          .execute();\n      System.out.println(\"Response 1 succeeded: \" + response);\n    } catch (IOException e) {\n      System.out.println(\"Response 1 failed: \" + e);\n    }\n \n    try {\n      Response response = client.clone() // Clone to make a customized OkHttp for this request.\n          .setReadTimeout(3000, TimeUnit.MILLISECONDS)\n          .newCall(request)\n          .execute();\n      System.out.println(\"Response 2 succeeded: \" + response);\n    } catch (IOException e) {\n      System.out.println(\"Response 2 failed: \" + e);\n    }\n}\n```\n\n## 处理验证\n这部分和HTTP AUTH有关。\n相关资料：[HTTP AUTH 那些事 - 王绍全的博客 - 博客频道 - CSDN.NET](http://blog.csdn.net/wwwsq/article/details/7255062)\n\nOkHttp会自动重试未验证的请求。当响应是401 Not Authorized时，Authenticator会被要求提供证书。Authenticator的实现中需要建立一个新的包含证书的请求。如果没有证书可用，返回null来跳过尝试。\n\n```\npublic List<Challenge> challenges()\nReturns the authorization challenges appropriate for this response's code. \nIf the response code is 401 unauthorized, \nthis returns the \"WWW-Authenticate\" challenges.\nIf the response code is 407 proxy unauthorized, this returns the \"Proxy-Authenticate\" challenges.\nOtherwise this returns an empty list of challenges.\n```\n\n当需要实现一个Basic challenge， 使用Credentials.basic(username, password)来编码请求头。\n\n```\nprivate final OkHttpClient client = new OkHttpClient();\n \npublic void run() throws Exception {\n    client.setAuthenticator(new Authenticator() {\n      @Override public Request authenticate(Proxy proxy, Response response) {\n        System.out.println(\"Authenticating for response: \" + response);\n        System.out.println(\"Challenges: \" + response.challenges());\n        String credential = Credentials.basic(\"jesse\", \"password1\");\n        return response.request().newBuilder()\n            .header(\"Authorization\", credential)\n            .build();\n      }\n \n      @Override public Request authenticateProxy(Proxy proxy, Response response) {\n        return null; // Null indicates no attempt to authenticate.\n      }\n    });\n \n    Request request = new Request.Builder()\n        .url(\"http://publicobject.com/secrets/hellosecret.txt\")\n        .build();\n \n    Response response = client.newCall(request).execute();\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n \n    System.out.println(response.body().string());\n}\n```\n\n转自 [OkHttp使用介绍](http://www.cnblogs.com/ct2011/p/4001708.html) 同时整合了 [OkHttp使用进阶](http://www.cnblogs.com/ct2011/p/3997368.html) 这篇文章以及其中的评论。","source":"_posts/okhttphelp.md","raw":"---\ntitle: OkHttp使用教程\ndate: 2016-05-09 23:29:13\ntags: [okhttp,android]\ncategories: android\n---\n这是一个针对技术开发者的一个应用，你可以在掘金上获取最新最优质的技术干货，不仅仅是Android知识、前端、后端以至于产品和设计都有涉猎，想成为全栈工程师的朋友不要错过！\n<!--more-->\n# 入门 \nAndroid系统提供了两种HTTP通信类，HttpURLConnection和HttpClient。\n[关于HttpURLConnection和HttpClient的选择>>官方博客](http://android-developers.blogspot.com/2011/09/androids-http-clients.html)\n尽管Google在大部分安卓版本中推荐使用HttpURLConnection，但是这个类相比HttpClient实在是太难用，太弱爆了。\nOkHttp是一个相对成熟的解决方案，据说Android4.4的源码中可以看到HttpURLConnection已经替换成OkHttp实现了。所以我们更有理由相信OkHttp的强大。\n\nOkHttp 处理了很多网络疑难杂症：会从很多常用的连接问题中自动恢复。如果您的服务器配置了多个IP地址，当第一个IP连接失败的时候，OkHttp会自动尝试下一个IP。OkHttp还处理了代理服务器问题和SSL握手失败问题。\n\n使用 OkHttp 无需重写您程序中的网络代码。OkHttp实现了几乎和java.net.HttpURLConnection一样的API。如果你用了 Apache HttpClient，则OkHttp也提供了一个对应的okhttp-apache 模块。\n\n> 注：在国内使用OkHttp会因为这个问题导致部分酷派手机用户无法联网，所以对于大众app来说，需要等待这个bug修复后再使用。或者尝试使用OkHttp的老版本。\n截止到目前，OkHttp一直没有修复，并把修复计划延迟到了OkHttp2.3中。不是所有设备都能重现，仅少量设备会出现这个问题。（如果问题这么明显，OkHttp早就修复了）\n\n## 官方资料\n[官方介绍](http://square.github.io/okhttp/)\n[github源码](https://github.com/square/okhttp)\n## 使用范围\nOkHttp支持Android 2.3及其以上版本。\n对于Java, JDK1.7以上。\n\n## jar包准备\n官方介绍页面有链接位置。这里把下载链接也写在下面。\n[OkHttp](http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST)\n[Okio](http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okio&a=okio&v=LATEST)\n\n## 基本使用\n**HTTP GET**\n\n```\nOkHttpClient client = new OkHttpClient();\n \nString run(String url) throws IOException {\n    Request request = new Request.Builder().url(url).build();\n    Response response = client.newCall(request).execute();    if (response.isSuccessful()) {        return response.body().string();\n    } else {        throw new IOException(\"Unexpected code \" + response);\n    }\n}\n```\nRequest是OkHttp中访问的请求，Builder是辅助类。Response即OkHttp中的响应。\n**Response类：**\n\n```\npublic boolean isSuccessful()\nReturns true if the code is in [200..300),\n which means the request was successfully received, understood, and accepted.\n```\n**response.body()返回ResponseBody类**\n\n```\npublic final String string() throws IOException\nReturns the response as a string decoded with the charset of the Content-Type header. If that header is either absent or lacks a charset,\n this will attempt to decode the response body as UTF-8.Throws:\nIOException\n```\n当然也能获取到流的形式：\n\n```\npublic final InputStream byteStream()\n```\n**HTTP POST\nPOST提交Json数据**\n\n```\npublic static final MediaType JSON = MediaType.parse(\"application/json; charset=utf-8\");\nOkHttpClient client = new OkHttpClient();\nString post(String url, String json) throws IOException {\n     RequestBody body = RequestBody.create(JSON, json);\n      Request request = new Request.Builder()\n      .url(url)\n      .post(body)\n      .build();\n      Response response = client.newCall(request).execute();\n    f (response.isSuccessful()) {\n        return response.body().string();\n    } else {\n        throw new IOException(\"Unexpected code \" + response);\n    }\n}\n```\n使用Request的post方法来提交请求体RequestBody\n\n** POST提交键值对**\n很多时候我们会需要通过POST方式把键值对数据传送到服务器。 OkHttp提供了很方便的方式来做这件事情。\n\n```\nOkHttpClient client = new OkHttpClient();\nString post(String url, String json) throws IOException {\n \n     RequestBody formBody = new FormEncodingBuilder()\n    .add(\"platform\", \"android\")\n    .add(\"name\", \"bug\")\n    .add(\"subject\", \"XXXXXXXXXXXXXXX\")\n    .build();\n \n      Request request = new Request.Builder()\n      .url(url)\n      .post(body)\n      .build();\n \n      Response response = client.newCall(request).execute();\n    if (response.isSuccessful()) {\n        return response.body().string();\n    } else {\n        throw new IOException(\"Unexpected code \" + response);\n    }\n}\n```\n## 总结\n通过上面的例子我们可以发现，OkHttp在很多时候使用都是很方便的，而且很多代码也有重复，因此特地整理了下面的工具类。\n注意：\n\n - OkHttp官方文档并不建议我们创建多个OkHttpClient，因此全局使用一个。 如果有需要，可以使用clone方法，再进行自定义。这点在后面的高级教程里会提到。\n - enqueue为OkHttp提供的异步方法，入门教程中并没有提到，后面的高级教程里会有解释。\n\n```\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\nimport org.apache.http.client.utils.URLEncodedUtils;\nimport org.apache.http.message.BasicNameValuePair;\nimport cn.wiz.sdk.constant.WizConstant;\nimport com.squareup.okhttp.Callback;\nimport com.squareup.okhttp.OkHttpClient;\nimport com.squareup.okhttp.Request;\nimport com.squareup.okhttp.Response; \n  \npublic class OkHttpUtil {\n    private static final OkHttpClient mOkHttpClient = new OkHttpClient();\n    static{\n        mOkHttpClient.setConnectTimeout(30, TimeUnit.SECONDS);\n    }\n    /**\n     * 该不会开启异步线程。\n     * @param request\n     * @return\n     * @throws IOException\n     */\n    public static Response execute(Request request) throws IOException{\n        return mOkHttpClient.newCall(request).execute();\n    }\n    /**\n     * 开启异步线程访问网络\n     * @param request\n     * @param responseCallback\n     */\n    public static void enqueue(Request request, Callback responseCallback){\n        mOkHttpClient.newCall(request).enqueue(responseCallback);\n    }\n    /**\n     * 开启异步线程访问网络, 且不在意返回结果（实现空callback）\n     * @param request\n     */\n    public static void enqueue(Request request){\n        mOkHttpClient.newCall(request).enqueue(new Callback() {\n             \n            @Override\n            public void onResponse(Response arg0) throws IOException {\n                 \n            }\n             \n            @Override\n            public void onFailure(Request arg0, IOException arg1) {\n                 \n            }\n        });\n    }\n    public static String getStringFromServer(String url) throws IOException{\n        Request request = new Request.Builder().url(url).build();\n        Response response = execute(request);\n        if (response.isSuccessful()) {\n            String responseUrl = response.body().string();\n            return responseUrl;\n        } else {\n            throw new IOException(\"Unexpected code \" + response);\n        }\n    }\n    private static final String CHARSET_NAME = \"UTF-8\";\n    /**\n     * 这里使用了HttpClinet的API。只是为了方便\n     * @param params\n     * @return\n     */\n    public static String formatParams(List<BasicNameValuePair> params){\n        return URLEncodedUtils.format(params, CHARSET_NAME);\n    }\n    /**\n     * 为HttpGet 的 url 方便的添加多个name value 参数。\n     * @param url\n     * @param params\n     * @return\n     */\n    public static String attachHttpGetParams(String url, List<BasicNameValuePair> params){\n        return url + \"?\" + formatParams(params);\n    }\n    /**\n     * 为HttpGet 的 url 方便的添加1个name value 参数。\n     * @param url\n     * @param name\n     * @param value\n     * @return\n     */\n    public static String attachHttpGetParam(String url, String name, String value){\n        return url + \"?\" + name + \"=\" + value;\n    }\n}\n```\n\n## 高级\n高级属性其实用的不多，这里主要是对OkHttp github官方教程进行了翻译。\n\n## 同步get\n下载一个文件，打印他的响应头，以string形式打印响应体。\n响应体的 string() 方法对于小文档来说十分方便、高效。但是如果响应体太大（超过1MB），应避免适应 string()方法 ，因为他会将把整个文档加载到内存中。\n对于超过1MB的响应body，应使用流的方式来处理body。\n\n```\nprivate final OkHttpClient client = new OkHttpClient();\n \npublic void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"http://publicobject.com/helloworld.txt\")\n        .build();\n \n    Response response = client.newCall(request).execute();\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n \n    Headers responseHeaders = response.headers();\n    for (int i = 0; i < responseHeaders.size(); i++) {\n      System.out.println(responseHeaders.name(i) + \": \" + responseHeaders.value(i));\n    }\n \n    System.out.println(response.body().string());\n}\n```\n## 异步get\n在一个工作线程中下载文件，当响应可读时回调Callback接口。读取响应时会阻塞当前线程。OkHttp现阶段不提供异步api来接收响应体。\n\n```\nprivate final OkHttpClient client = new OkHttpClient();\n \npublic void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"http://publicobject.com/helloworld.txt\")\n        .build();\n \n    client.newCall(request).enqueue(new Callback() {\n      @Override public void onFailure(Request request, Throwable throwable) {\n        throwable.printStackTrace();\n      }\n \n      @Override public void onResponse(Response response) throws IOException {\n        if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n \n        Headers responseHeaders = response.headers();\n        for (int i = 0; i < responseHeaders.size(); i++) {\n          System.out.println(responseHeaders.name(i) + \": \" + responseHeaders.value(i));\n        }\n \n        System.out.println(response.body().string());\n      }\n    });\n}\n```\n## 提取响应头\n\n典型的HTTP头 像是一个 Map<String, String> :每个字段都有一个或没有值。但是一些头允许多个值，像Guava的Multimap。例如：HTTP响应里面提供的Vary响应头，就是多值的。OkHttp的api试图让这些情况都适用。\n当写请求头的时候，使用header(name, value)可以设置唯一的name、value。如果已经有值，旧的将被移除，然后添加新的。使用addHeader(name, value)可以添加多值（添加，不移除已有的）。\n当读取响应头时，使用header(name)返回最后出现的name、value。通常情况这也是唯一的name、value。如果没有值，那么header(name)将返回null。如果想读取字段对应的所有值，使用headers(name)会返回一个list。\n为了获取所有的Header，Headers类支持按index访问。\n\n```\nprivate final OkHttpClient client = new OkHttpClient();\n \npublic void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"https://api.github.com/repos/square/okhttp/issues\")\n        .header(\"User-Agent\", \"OkHttp Headers.java\")\n        .addHeader(\"Accept\", \"application/json; q=0.5\")\n        .addHeader(\"Accept\", \"application/vnd.github.v3+json\")\n        .build();\n \n    Response response = client.newCall(request).execute();\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n \n    System.out.println(\"Server: \" + response.header(\"Server\"));\n    System.out.println(\"Date: \" + response.header(\"Date\"));\n    System.out.println(\"Vary: \" + response.headers(\"Vary\"));\n}\n```\n## Post方式提交String\n使用HTTP POST提交请求到服务。这个例子提交了一个markdown文档到web服务，以HTML方式渲染markdown。因为整个请求体都在内存中，因此避免使用此api提交大文档（大于1MB）。\n\n```\npublic static final MediaType MEDIA_TYPE_MARKDOWN\n  = MediaType.parse(\"text/x-markdown; charset=utf-8\");\n \nprivate final OkHttpClient client = new OkHttpClient();\n \npublic void run() throws Exception {\n    String postBody = \"\"\n        + \"Releases\\n\"\n        + \"--------\\n\"\n        + \"\\n\"\n        + \" * _1.0_ May 6, 2013\\n\"\n        + \" * _1.1_ June 15, 2013\\n\"\n        + \" * _1.2_ August 11, 2013\\n\";\n \n    Request request = new Request.Builder()\n        .url(\"https://api.github.com/markdown/raw\")\n        .post(RequestBody.create(MEDIA_TYPE_MARKDOWN, postBody))\n        .build();\n \n    Response response = client.newCall(request).execute();\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n \n    System.out.println(response.body().string());\n}\n```\n## Post方式提交流\n以流的方式POST提交请求体。请求体的内容由流写入产生。这个例子是流直接写入Okio的BufferedSink。你的程序可能会使用OutputStream，你可以使用BufferedSink.outputStream()来获取。\n\n```\npublic static final MediaType MEDIA_TYPE_MARKDOWN\n      = MediaType.parse(\"text/x-markdown; charset=utf-8\");\n \nprivate final OkHttpClient client = new OkHttpClient();\n \npublic void run() throws Exception {\n    RequestBody requestBody = new RequestBody() {\n      @Override public MediaType contentType() {\n        return MEDIA_TYPE_MARKDOWN;\n      }\n \n      @Override public void writeTo(BufferedSink sink) throws IOException {\n        sink.writeUtf8(\"Numbers\\n\");\n        sink.writeUtf8(\"-------\\n\");\n        for (int i = 2; i <= 997; i++) {\n          sink.writeUtf8(String.format(\" * %s = %s\\n\", i, factor(i)));\n        }\n      }\n \n      private String factor(int n) {\n        for (int i = 2; i < n; i++) {\n          int x = n / i;\n          if (x * i == n) return factor(x) + \" × \" + i;\n        }\n        return Integer.toString(n);\n      }\n    };\n \n    Request request = new Request.Builder()\n        .url(\"https://api.github.com/markdown/raw\")\n        .post(requestBody)\n        .build();\n \n    Response response = client.newCall(request).execute();\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n \n    System.out.println(response.body().string());\n}\n```\n## Post方式提交文件\n以文件作为请求体是十分简单的。\n\n```\npublic static final MediaType MEDIA_TYPE_MARKDOWN\n  = MediaType.parse(\"text/x-markdown; charset=utf-8\");\n \nprivate final OkHttpClient client = new OkHttpClient();\n \npublic void run() throws Exception {\n    File file = new File(\"README.md\");\n \n    Request request = new Request.Builder()\n        .url(\"https://api.github.com/markdown/raw\")\n        .post(RequestBody.create(MEDIA_TYPE_MARKDOWN, file))\n        .build();\n \n    Response response = client.newCall(request).execute();\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n \n    System.out.println(response.body().string());\n}\n```\n## Post方式提交表单\n使用FormEncodingBuilder来构建和HTML<form>标签相同效果的请求体。键值对将使用一种HTML兼容形式的URL编码来进行编码。\n\n```\nprivate final OkHttpClient client = new OkHttpClient();\n \npublic void run() throws Exception {\n    RequestBody formBody = new FormEncodingBuilder()\n        .add(\"search\", \"Jurassic Park\")\n        .build();\n    Request request = new Request.Builder()\n        .url(\"https://en.wikipedia.org/w/index.php\")\n        .post(formBody)\n        .build();\n \n    Response response = client.newCall(request).execute();\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n \n    System.out.println(response.body().string());\n}\n```\n## Post方式提交分块请求\nMultipartBuilder可以构建复杂的请求体，与HTML文件上传形式兼容。多块请求体中每块请求都是一个请求体，可以定义自己的请求头。这些请求头可以用来描述这块请求，例如他的Content-Disposition。如果Content-Length和Content-Type可用的话，他们会被自动添加到请求头中。\n\n```\nprivate static final String IMGUR_CLIENT_ID = \"...\";\nprivate static final MediaType MEDIA_TYPE_PNG = MediaType.parse(\"image/png\");\n \nprivate final OkHttpClient client = new OkHttpClient();\n \npublic void run() throws Exception {\n    // Use the imgur image upload API as documented at https://api.imgur.com/endpoints/image\n    RequestBody requestBody = new MultipartBuilder()\n        .type(MultipartBuilder.FORM)\n        .addPart(\n            Headers.of(\"Content-Disposition\", \"form-data; name=\\\"title\\\"\"),\n            RequestBody.create(null, \"Square Logo\"))\n        .addPart(\n            Headers.of(\"Content-Disposition\", \"form-data; name=\\\"image\\\"\"),\n            RequestBody.create(MEDIA_TYPE_PNG, new File(\"website/static/logo-square.png\")))\n        .build();\n \n    Request request = new Request.Builder()\n        .header(\"Authorization\", \"Client-ID \" + IMGUR_CLIENT_ID)\n        .url(\"https://api.imgur.com/3/image\")\n        .post(requestBody)\n        .build();\n \n    Response response = client.newCall(request).execute();\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n \n    System.out.println(response.body().string());\n}\n```\n## 使用Gson来解析JSON响应\nGson是一个在JSON和Java对象之间转换非常方便的api。这里我们用Gson来解析Github API的JSON响应。\n注意：ResponseBody.charStream()使用响应头Content-Type指定的字符集来解析响应体。默认是UTF-8。\n\n```\nprivate final OkHttpClient client = new OkHttpClient();\nprivate final Gson gson = new Gson();\n \npublic void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"https://api.github.com/gists/c2a7c39532239ff261be\")\n        .build();\n    Response response = client.newCall(request).execute();\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n \n    Gist gist = gson.fromJson(response.body().charStream(), Gist.class);\n    for (Map.Entry<String, GistFile> entry : gist.files.entrySet()) {\n      System.out.println(entry.getKey());\n      System.out.println(entry.getValue().content);\n    }\n}\n \nstatic class Gist {\n    Map<String, GistFile> files;\n}\n \nstatic class GistFile {\n    String content;\n}\n```\n## 响应缓存\n为了缓存响应，你需要一个你可以读写的缓存目录，和缓存大小的限制。这个缓存目录应该是私有的，不信任的程序应不能读取缓存内容。\n一个缓存目录同时拥有多个缓存访问是错误的。大多数程序只需要调用一次new OkHttp()，在第一次调用时配置好缓存，然后其他地方只需要调用这个实例就可以了。否则两个缓存示例互相干扰，破坏响应缓存，而且有可能会导致程序崩溃。\n响应缓存使用HTTP头作为配置。你可以在请求头中添加Cache-Control: max-stale=3600 ,OkHttp缓存会支持。你的服务通过响应头确定响应缓存多长时间，例如使用Cache-Control: max-age=9600。\n\n```\nprivate final OkHttpClient client;\n \npublic CacheResponse(File cacheDirectory) throws Exception {\n    int cacheSize = 10 * 1024 * 1024; // 10 MiB\n    Cache cache = new Cache(cacheDirectory, cacheSize);\n \n    client = new OkHttpClient();\n    client.setCache(cache);\n}\n \npublic void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"http://publicobject.com/helloworld.txt\")\n        .build();\n \n    Response response1 = client.newCall(request).execute();\n    if (!response1.isSuccessful()) throw new IOException(\"Unexpected code \" + response1);\n \n    String response1Body = response1.body().string();\n    System.out.println(\"Response 1 response:          \" + response1);\n    System.out.println(\"Response 1 cache response:    \" + response1.cacheResponse());\n    System.out.println(\"Response 1 network response:  \" + response1.networkResponse());\n \n    Response response2 = client.newCall(request).execute();\n    if (!response2.isSuccessful()) throw new IOException(\"Unexpected code \" + response2);\n \n    String response2Body = response2.body().string();\n    System.out.println(\"Response 2 response:          \" + response2);\n    System.out.println(\"Response 2 cache response:    \" + response2.cacheResponse());\n    System.out.println(\"Response 2 network response:  \" + response2.networkResponse());\n \n    System.out.println(\"Response 2 equals Response 1? \" + response1Body.equals(response2Body));\n}\n```\n## 扩展\n在这一节还提到了下面一句：\nThere are cache headers to force a cached response, force a network response, or force the network response to be validated with a conditional GET.\n\n我不是很懂cache，平时用到的也不多，所以把Google在Android Developers一段相关的解析放到这里吧。\n\n## Force a Network Response\nIn some situations, such as after a user clicks a 'refresh' button, it may be necessary to skip the cache, and fetch data directly from the server. To force a full refresh, add the no-cache directive:\n\n> connection.addRequestProperty(\"Cache-Control\", \"no-cache\");\n\nIf it is only necessary to force a cached response to be validated by the server, use the more efficient max-age=0 instead:\n\n> connection.addRequestProperty(\"Cache-Control\", \"max-age=0\");\n\n##Force a Cache Response\nSometimes you'll want to show resources if they are available immediately, but not otherwise. This can be used so your application can show something while waiting for the latest data to be downloaded. To restrict a request to locally-cached resources, add the only-if-cached directive:\n\n```\ntry {\n     connection.addRequestProperty(\"Cache-Control\", \"only-if-cached\");\n     InputStream cached = connection.getInputStream();\n     // the resource was cached! show it\n  catch (FileNotFoundException e) {\n     // the resource was not cached\n }\n}\n```\nThis technique works even better in situations where a stale response is better than no response. To permit stale cached responses, use the max-stale directive with the maximum staleness in seconds:\n\n```\nint maxStale = 60 * 60 * 24 * 28; // tolerate 4-weeks staleconnection.addRequestProperty(\"Cache-Control\", \"max-stale=\" + maxStale);\n\n```\n以上信息来自：[HttpResponseCache - Android SDK | Android Developers](http://developer.android.com/reference/android/net/http/HttpResponseCache.html)\n\n\n## 取消一个Call\n使用Call.cancel()可以立即停止掉一个正在执行的call。如果一个线程正在写请求或者读响应，将会引发IOException。当call没有必要的时候，使用这个api可以节约网络资源。例如当用户离开一个应用时。不管同步还是异步的call都可以取消。\n你可以通过tags来同时取消多个请求。当你构建一请求时，使用RequestBuilder.tag(tag)来分配一个标签。之后你就可以用OkHttpClient.cancel(tag)来取消所有带有这个tag的call。\n\n```\nprivate final ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);\nprivate final OkHttpClient client = new OkHttpClient();\n \npublic void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"http://httpbin.org/delay/2\") // This URL is served with a 2 second delay.\n        .build();\n \n    final long startNanos = System.nanoTime();\n    final Call call = client.newCall(request);\n \n    // Schedule a job to cancel the call in 1 second.\n    executor.schedule(new Runnable() {\n      @Override public void run() {\n        System.out.printf(\"%.2f Canceling call.%n\", (System.nanoTime() - startNanos) / 1e9f);\n        call.cancel();\n        System.out.printf(\"%.2f Canceled call.%n\", (System.nanoTime() - startNanos) / 1e9f);\n      }\n    }, 1, TimeUnit.SECONDS);\n \n    try {\n      System.out.printf(\"%.2f Executing call.%n\", (System.nanoTime() - startNanos) / 1e9f);\n      Response response = call.execute();\n      System.out.printf(\"%.2f Call was expected to fail, but completed: %s%n\",\n          (System.nanoTime() - startNanos) / 1e9f, response);\n    } catch (IOException e) {\n      System.out.printf(\"%.2f Call failed as expected: %s%n\",\n          (System.nanoTime() - startNanos) / 1e9f, e);\n    }\n}\n```\n\n## 超时\n没有响应时使用超时结束call。没有响应的原因可能是客户点链接问题、服务器可用性问题或者这之间的其他东西。OkHttp支持连接，读取和写入超时\n\n```\nprivate final OkHttpClient client;\n \npublic ConfigureTimeouts() throws Exception {\n    client = new OkHttpClient();\n    client.setConnectTimeout(10, TimeUnit.SECONDS);\n    client.setWriteTimeout(10, TimeUnit.SECONDS);\n    client.setReadTimeout(30, TimeUnit.SECONDS);\n}\n \npublic void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"http://httpbin.org/delay/2\") // This URL is served with a 2 second delay.\n        .build();\n \n    Response response = client.newCall(request).execute();\n    System.out.println(\"Response completed: \" + response);\n}\n```\n\n## 每个call的配置\n使用OkHttpClient，所有的HTTP Client配置包括代理设置、超时设置、缓存设置。当你需要为单个call改变配置的时候，clone 一个 OkHttpClient。这个api将会返回一个浅拷贝（shallow copy），你可以用来单独自定义。下面的例子中，我们让一个请求是500ms的超时、另一个是3000ms的超时。\n\n\n```\nprivate final OkHttpClient client = new OkHttpClient();\n \npublic void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"http://httpbin.org/delay/1\") // This URL is served with a 1 second delay.\n        .build();\n \n    try {\n      Response response = client.clone() // Clone to make a customized OkHttp for this request.\n          .setReadTimeout(500, TimeUnit.MILLISECONDS)\n          .newCall(request)\n          .execute();\n      System.out.println(\"Response 1 succeeded: \" + response);\n    } catch (IOException e) {\n      System.out.println(\"Response 1 failed: \" + e);\n    }\n \n    try {\n      Response response = client.clone() // Clone to make a customized OkHttp for this request.\n          .setReadTimeout(3000, TimeUnit.MILLISECONDS)\n          .newCall(request)\n          .execute();\n      System.out.println(\"Response 2 succeeded: \" + response);\n    } catch (IOException e) {\n      System.out.println(\"Response 2 failed: \" + e);\n    }\n}\n```\n\n## 处理验证\n这部分和HTTP AUTH有关。\n相关资料：[HTTP AUTH 那些事 - 王绍全的博客 - 博客频道 - CSDN.NET](http://blog.csdn.net/wwwsq/article/details/7255062)\n\nOkHttp会自动重试未验证的请求。当响应是401 Not Authorized时，Authenticator会被要求提供证书。Authenticator的实现中需要建立一个新的包含证书的请求。如果没有证书可用，返回null来跳过尝试。\n\n```\npublic List<Challenge> challenges()\nReturns the authorization challenges appropriate for this response's code. \nIf the response code is 401 unauthorized, \nthis returns the \"WWW-Authenticate\" challenges.\nIf the response code is 407 proxy unauthorized, this returns the \"Proxy-Authenticate\" challenges.\nOtherwise this returns an empty list of challenges.\n```\n\n当需要实现一个Basic challenge， 使用Credentials.basic(username, password)来编码请求头。\n\n```\nprivate final OkHttpClient client = new OkHttpClient();\n \npublic void run() throws Exception {\n    client.setAuthenticator(new Authenticator() {\n      @Override public Request authenticate(Proxy proxy, Response response) {\n        System.out.println(\"Authenticating for response: \" + response);\n        System.out.println(\"Challenges: \" + response.challenges());\n        String credential = Credentials.basic(\"jesse\", \"password1\");\n        return response.request().newBuilder()\n            .header(\"Authorization\", credential)\n            .build();\n      }\n \n      @Override public Request authenticateProxy(Proxy proxy, Response response) {\n        return null; // Null indicates no attempt to authenticate.\n      }\n    });\n \n    Request request = new Request.Builder()\n        .url(\"http://publicobject.com/secrets/hellosecret.txt\")\n        .build();\n \n    Response response = client.newCall(request).execute();\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n \n    System.out.println(response.body().string());\n}\n```\n\n转自 [OkHttp使用介绍](http://www.cnblogs.com/ct2011/p/4001708.html) 同时整合了 [OkHttp使用进阶](http://www.cnblogs.com/ct2011/p/3997368.html) 这篇文章以及其中的评论。","slug":"okhttphelp","published":1,"updated":"2018-04-03T07:05:42.842Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfjja6ps001864v4fj0i8glm","content":"<p>这是一个针对技术开发者的一个应用，你可以在掘金上获取最新最优质的技术干货，不仅仅是Android知识、前端、后端以至于产品和设计都有涉猎，想成为全栈工程师的朋友不要错过！<br><a id=\"more\"></a></p>\n<h1 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h1><p>Android系统提供了两种HTTP通信类，HttpURLConnection和HttpClient。<br><a href=\"http://android-developers.blogspot.com/2011/09/androids-http-clients.html\" target=\"_blank\" rel=\"noopener\">关于HttpURLConnection和HttpClient的选择&gt;&gt;官方博客</a><br>尽管Google在大部分安卓版本中推荐使用HttpURLConnection，但是这个类相比HttpClient实在是太难用，太弱爆了。<br>OkHttp是一个相对成熟的解决方案，据说Android4.4的源码中可以看到HttpURLConnection已经替换成OkHttp实现了。所以我们更有理由相信OkHttp的强大。</p>\n<p>OkHttp 处理了很多网络疑难杂症：会从很多常用的连接问题中自动恢复。如果您的服务器配置了多个IP地址，当第一个IP连接失败的时候，OkHttp会自动尝试下一个IP。OkHttp还处理了代理服务器问题和SSL握手失败问题。</p>\n<p>使用 OkHttp 无需重写您程序中的网络代码。OkHttp实现了几乎和java.net.HttpURLConnection一样的API。如果你用了 Apache HttpClient，则OkHttp也提供了一个对应的okhttp-apache 模块。</p>\n<blockquote>\n<p>注：在国内使用OkHttp会因为这个问题导致部分酷派手机用户无法联网，所以对于大众app来说，需要等待这个bug修复后再使用。或者尝试使用OkHttp的老版本。<br>截止到目前，OkHttp一直没有修复，并把修复计划延迟到了OkHttp2.3中。不是所有设备都能重现，仅少量设备会出现这个问题。（如果问题这么明显，OkHttp早就修复了）</p>\n</blockquote>\n<h2 id=\"官方资料\"><a href=\"#官方资料\" class=\"headerlink\" title=\"官方资料\"></a>官方资料</h2><p><a href=\"http://square.github.io/okhttp/\" target=\"_blank\" rel=\"noopener\">官方介绍</a><br><a href=\"https://github.com/square/okhttp\" target=\"_blank\" rel=\"noopener\">github源码</a></p>\n<h2 id=\"使用范围\"><a href=\"#使用范围\" class=\"headerlink\" title=\"使用范围\"></a>使用范围</h2><p>OkHttp支持Android 2.3及其以上版本。<br>对于Java, JDK1.7以上。</p>\n<h2 id=\"jar包准备\"><a href=\"#jar包准备\" class=\"headerlink\" title=\"jar包准备\"></a>jar包准备</h2><p>官方介绍页面有链接位置。这里把下载链接也写在下面。<br><a href=\"http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&amp;g=com.squareup.okhttp&amp;a=okhttp&amp;v=LATEST\" target=\"_blank\" rel=\"noopener\">OkHttp</a><br><a href=\"http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&amp;g=com.squareup.okio&amp;a=okio&amp;v=LATEST\" target=\"_blank\" rel=\"noopener\">Okio</a></p>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><p><strong>HTTP GET</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OkHttpClient client = new OkHttpClient();</span><br><span class=\"line\"> </span><br><span class=\"line\">String run(String url) throws IOException &#123;</span><br><span class=\"line\">    Request request = new Request.Builder().url(url).build();</span><br><span class=\"line\">    Response response = client.newCall(request).execute();    if (response.isSuccessful()) &#123;        return response.body().string();</span><br><span class=\"line\">    &#125; else &#123;        throw new IOException(&quot;Unexpected code &quot; + response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Request是OkHttp中访问的请求，Builder是辅助类。Response即OkHttp中的响应。<br><strong>Response类：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean isSuccessful()</span><br><span class=\"line\">Returns true if the code is in [200..300),</span><br><span class=\"line\"> which means the request was successfully received, understood, and accepted.</span><br></pre></td></tr></table></figure>\n<p><strong>response.body()返回ResponseBody类</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final String string() throws IOException</span><br><span class=\"line\">Returns the response as a string decoded with the charset of the Content-Type header. If that header is either absent or lacks a charset,</span><br><span class=\"line\"> this will attempt to decode the response body as UTF-8.Throws:</span><br><span class=\"line\">IOException</span><br></pre></td></tr></table></figure>\n<p>当然也能获取到流的形式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final InputStream byteStream()</span><br></pre></td></tr></table></figure>\n<p><strong>HTTP POST<br>POST提交Json数据</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static final MediaType JSON = MediaType.parse(&quot;application/json; charset=utf-8&quot;);</span><br><span class=\"line\">OkHttpClient client = new OkHttpClient();</span><br><span class=\"line\">String post(String url, String json) throws IOException &#123;</span><br><span class=\"line\">     RequestBody body = RequestBody.create(JSON, json);</span><br><span class=\"line\">      Request request = new Request.Builder()</span><br><span class=\"line\">      .url(url)</span><br><span class=\"line\">      .post(body)</span><br><span class=\"line\">      .build();</span><br><span class=\"line\">      Response response = client.newCall(request).execute();</span><br><span class=\"line\">    f (response.isSuccessful()) &#123;</span><br><span class=\"line\">        return response.body().string();</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        throw new IOException(&quot;Unexpected code &quot; + response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用Request的post方法来提交请求体RequestBody</p>\n<p><strong> POST提交键值对</strong><br>很多时候我们会需要通过POST方式把键值对数据传送到服务器。 OkHttp提供了很方便的方式来做这件事情。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OkHttpClient client = new OkHttpClient();</span><br><span class=\"line\">String post(String url, String json) throws IOException &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">     RequestBody formBody = new FormEncodingBuilder()</span><br><span class=\"line\">    .add(&quot;platform&quot;, &quot;android&quot;)</span><br><span class=\"line\">    .add(&quot;name&quot;, &quot;bug&quot;)</span><br><span class=\"line\">    .add(&quot;subject&quot;, &quot;XXXXXXXXXXXXXXX&quot;)</span><br><span class=\"line\">    .build();</span><br><span class=\"line\"> </span><br><span class=\"line\">      Request request = new Request.Builder()</span><br><span class=\"line\">      .url(url)</span><br><span class=\"line\">      .post(body)</span><br><span class=\"line\">      .build();</span><br><span class=\"line\"> </span><br><span class=\"line\">      Response response = client.newCall(request).execute();</span><br><span class=\"line\">    if (response.isSuccessful()) &#123;</span><br><span class=\"line\">        return response.body().string();</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        throw new IOException(&quot;Unexpected code &quot; + response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过上面的例子我们可以发现，OkHttp在很多时候使用都是很方便的，而且很多代码也有重复，因此特地整理了下面的工具类。<br>注意：</p>\n<ul>\n<li>OkHttp官方文档并不建议我们创建多个OkHttpClient，因此全局使用一个。 如果有需要，可以使用clone方法，再进行自定义。这点在后面的高级教程里会提到。</li>\n<li>enqueue为OkHttp提供的异步方法，入门教程中并没有提到，后面的高级教程里会有解释。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.concurrent.TimeUnit;</span><br><span class=\"line\">import org.apache.http.client.utils.URLEncodedUtils;</span><br><span class=\"line\">import org.apache.http.message.BasicNameValuePair;</span><br><span class=\"line\">import cn.wiz.sdk.constant.WizConstant;</span><br><span class=\"line\">import com.squareup.okhttp.Callback;</span><br><span class=\"line\">import com.squareup.okhttp.OkHttpClient;</span><br><span class=\"line\">import com.squareup.okhttp.Request;</span><br><span class=\"line\">import com.squareup.okhttp.Response; </span><br><span class=\"line\">  </span><br><span class=\"line\">public class OkHttpUtil &#123;</span><br><span class=\"line\">    private static final OkHttpClient mOkHttpClient = new OkHttpClient();</span><br><span class=\"line\">    static&#123;</span><br><span class=\"line\">        mOkHttpClient.setConnectTimeout(30, TimeUnit.SECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 该不会开启异步线程。</span><br><span class=\"line\">     * @param request</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     * @throws IOException</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static Response execute(Request request) throws IOException&#123;</span><br><span class=\"line\">        return mOkHttpClient.newCall(request).execute();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 开启异步线程访问网络</span><br><span class=\"line\">     * @param request</span><br><span class=\"line\">     * @param responseCallback</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void enqueue(Request request, Callback responseCallback)&#123;</span><br><span class=\"line\">        mOkHttpClient.newCall(request).enqueue(responseCallback);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 开启异步线程访问网络, 且不在意返回结果（实现空callback）</span><br><span class=\"line\">     * @param request</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void enqueue(Request request)&#123;</span><br><span class=\"line\">        mOkHttpClient.newCall(request).enqueue(new Callback() &#123;</span><br><span class=\"line\">             </span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onResponse(Response arg0) throws IOException &#123;</span><br><span class=\"line\">                 </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">             </span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onFailure(Request arg0, IOException arg1) &#123;</span><br><span class=\"line\">                 </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static String getStringFromServer(String url) throws IOException&#123;</span><br><span class=\"line\">        Request request = new Request.Builder().url(url).build();</span><br><span class=\"line\">        Response response = execute(request);</span><br><span class=\"line\">        if (response.isSuccessful()) &#123;</span><br><span class=\"line\">            String responseUrl = response.body().string();</span><br><span class=\"line\">            return responseUrl;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            throw new IOException(&quot;Unexpected code &quot; + response);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private static final String CHARSET_NAME = &quot;UTF-8&quot;;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 这里使用了HttpClinet的API。只是为了方便</span><br><span class=\"line\">     * @param params</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String formatParams(List&lt;BasicNameValuePair&gt; params)&#123;</span><br><span class=\"line\">        return URLEncodedUtils.format(params, CHARSET_NAME);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 为HttpGet 的 url 方便的添加多个name value 参数。</span><br><span class=\"line\">     * @param url</span><br><span class=\"line\">     * @param params</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String attachHttpGetParams(String url, List&lt;BasicNameValuePair&gt; params)&#123;</span><br><span class=\"line\">        return url + &quot;?&quot; + formatParams(params);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 为HttpGet 的 url 方便的添加1个name value 参数。</span><br><span class=\"line\">     * @param url</span><br><span class=\"line\">     * @param name</span><br><span class=\"line\">     * @param value</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String attachHttpGetParam(String url, String name, String value)&#123;</span><br><span class=\"line\">        return url + &quot;?&quot; + name + &quot;=&quot; + value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"高级\"><a href=\"#高级\" class=\"headerlink\" title=\"高级\"></a>高级</h2><p>高级属性其实用的不多，这里主要是对OkHttp github官方教程进行了翻译。</p>\n<h2 id=\"同步get\"><a href=\"#同步get\" class=\"headerlink\" title=\"同步get\"></a>同步get</h2><p>下载一个文件，打印他的响应头，以string形式打印响应体。<br>响应体的 string() 方法对于小文档来说十分方便、高效。但是如果响应体太大（超过1MB），应避免适应 string()方法 ，因为他会将把整个文档加载到内存中。<br>对于超过1MB的响应body，应使用流的方式来处理body。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final OkHttpClient client = new OkHttpClient();</span><br><span class=\"line\"> </span><br><span class=\"line\">public void run() throws Exception &#123;</span><br><span class=\"line\">    Request request = new Request.Builder()</span><br><span class=\"line\">        .url(&quot;http://publicobject.com/helloworld.txt&quot;)</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"> </span><br><span class=\"line\">    Response response = client.newCall(request).execute();</span><br><span class=\"line\">    if (!response.isSuccessful()) throw new IOException(&quot;Unexpected code &quot; + response);</span><br><span class=\"line\"> </span><br><span class=\"line\">    Headers responseHeaders = response.headers();</span><br><span class=\"line\">    for (int i = 0; i &lt; responseHeaders.size(); i++) &#123;</span><br><span class=\"line\">      System.out.println(responseHeaders.name(i) + &quot;: &quot; + responseHeaders.value(i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    System.out.println(response.body().string());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"异步get\"><a href=\"#异步get\" class=\"headerlink\" title=\"异步get\"></a>异步get</h2><p>在一个工作线程中下载文件，当响应可读时回调Callback接口。读取响应时会阻塞当前线程。OkHttp现阶段不提供异步api来接收响应体。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final OkHttpClient client = new OkHttpClient();</span><br><span class=\"line\"> </span><br><span class=\"line\">public void run() throws Exception &#123;</span><br><span class=\"line\">    Request request = new Request.Builder()</span><br><span class=\"line\">        .url(&quot;http://publicobject.com/helloworld.txt&quot;)</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"> </span><br><span class=\"line\">    client.newCall(request).enqueue(new Callback() &#123;</span><br><span class=\"line\">      @Override public void onFailure(Request request, Throwable throwable) &#123;</span><br><span class=\"line\">        throwable.printStackTrace();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">      @Override public void onResponse(Response response) throws IOException &#123;</span><br><span class=\"line\">        if (!response.isSuccessful()) throw new IOException(&quot;Unexpected code &quot; + response);</span><br><span class=\"line\"> </span><br><span class=\"line\">        Headers responseHeaders = response.headers();</span><br><span class=\"line\">        for (int i = 0; i &lt; responseHeaders.size(); i++) &#123;</span><br><span class=\"line\">          System.out.println(responseHeaders.name(i) + &quot;: &quot; + responseHeaders.value(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        System.out.println(response.body().string());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"提取响应头\"><a href=\"#提取响应头\" class=\"headerlink\" title=\"提取响应头\"></a>提取响应头</h2><p>典型的HTTP头 像是一个 Map&lt;String, String&gt; :每个字段都有一个或没有值。但是一些头允许多个值，像Guava的Multimap。例如：HTTP响应里面提供的Vary响应头，就是多值的。OkHttp的api试图让这些情况都适用。<br>当写请求头的时候，使用header(name, value)可以设置唯一的name、value。如果已经有值，旧的将被移除，然后添加新的。使用addHeader(name, value)可以添加多值（添加，不移除已有的）。<br>当读取响应头时，使用header(name)返回最后出现的name、value。通常情况这也是唯一的name、value。如果没有值，那么header(name)将返回null。如果想读取字段对应的所有值，使用headers(name)会返回一个list。<br>为了获取所有的Header，Headers类支持按index访问。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final OkHttpClient client = new OkHttpClient();</span><br><span class=\"line\"> </span><br><span class=\"line\">public void run() throws Exception &#123;</span><br><span class=\"line\">    Request request = new Request.Builder()</span><br><span class=\"line\">        .url(&quot;https://api.github.com/repos/square/okhttp/issues&quot;)</span><br><span class=\"line\">        .header(&quot;User-Agent&quot;, &quot;OkHttp Headers.java&quot;)</span><br><span class=\"line\">        .addHeader(&quot;Accept&quot;, &quot;application/json; q=0.5&quot;)</span><br><span class=\"line\">        .addHeader(&quot;Accept&quot;, &quot;application/vnd.github.v3+json&quot;)</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"> </span><br><span class=\"line\">    Response response = client.newCall(request).execute();</span><br><span class=\"line\">    if (!response.isSuccessful()) throw new IOException(&quot;Unexpected code &quot; + response);</span><br><span class=\"line\"> </span><br><span class=\"line\">    System.out.println(&quot;Server: &quot; + response.header(&quot;Server&quot;));</span><br><span class=\"line\">    System.out.println(&quot;Date: &quot; + response.header(&quot;Date&quot;));</span><br><span class=\"line\">    System.out.println(&quot;Vary: &quot; + response.headers(&quot;Vary&quot;));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Post方式提交String\"><a href=\"#Post方式提交String\" class=\"headerlink\" title=\"Post方式提交String\"></a>Post方式提交String</h2><p>使用HTTP POST提交请求到服务。这个例子提交了一个markdown文档到web服务，以HTML方式渲染markdown。因为整个请求体都在内存中，因此避免使用此api提交大文档（大于1MB）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static final MediaType MEDIA_TYPE_MARKDOWN</span><br><span class=\"line\">  = MediaType.parse(&quot;text/x-markdown; charset=utf-8&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">private final OkHttpClient client = new OkHttpClient();</span><br><span class=\"line\"> </span><br><span class=\"line\">public void run() throws Exception &#123;</span><br><span class=\"line\">    String postBody = &quot;&quot;</span><br><span class=\"line\">        + &quot;Releases\\n&quot;</span><br><span class=\"line\">        + &quot;--------\\n&quot;</span><br><span class=\"line\">        + &quot;\\n&quot;</span><br><span class=\"line\">        + &quot; * _1.0_ May 6, 2013\\n&quot;</span><br><span class=\"line\">        + &quot; * _1.1_ June 15, 2013\\n&quot;</span><br><span class=\"line\">        + &quot; * _1.2_ August 11, 2013\\n&quot;;</span><br><span class=\"line\"> </span><br><span class=\"line\">    Request request = new Request.Builder()</span><br><span class=\"line\">        .url(&quot;https://api.github.com/markdown/raw&quot;)</span><br><span class=\"line\">        .post(RequestBody.create(MEDIA_TYPE_MARKDOWN, postBody))</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"> </span><br><span class=\"line\">    Response response = client.newCall(request).execute();</span><br><span class=\"line\">    if (!response.isSuccessful()) throw new IOException(&quot;Unexpected code &quot; + response);</span><br><span class=\"line\"> </span><br><span class=\"line\">    System.out.println(response.body().string());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Post方式提交流\"><a href=\"#Post方式提交流\" class=\"headerlink\" title=\"Post方式提交流\"></a>Post方式提交流</h2><p>以流的方式POST提交请求体。请求体的内容由流写入产生。这个例子是流直接写入Okio的BufferedSink。你的程序可能会使用OutputStream，你可以使用BufferedSink.outputStream()来获取。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static final MediaType MEDIA_TYPE_MARKDOWN</span><br><span class=\"line\">      = MediaType.parse(&quot;text/x-markdown; charset=utf-8&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">private final OkHttpClient client = new OkHttpClient();</span><br><span class=\"line\"> </span><br><span class=\"line\">public void run() throws Exception &#123;</span><br><span class=\"line\">    RequestBody requestBody = new RequestBody() &#123;</span><br><span class=\"line\">      @Override public MediaType contentType() &#123;</span><br><span class=\"line\">        return MEDIA_TYPE_MARKDOWN;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">      @Override public void writeTo(BufferedSink sink) throws IOException &#123;</span><br><span class=\"line\">        sink.writeUtf8(&quot;Numbers\\n&quot;);</span><br><span class=\"line\">        sink.writeUtf8(&quot;-------\\n&quot;);</span><br><span class=\"line\">        for (int i = 2; i &lt;= 997; i++) &#123;</span><br><span class=\"line\">          sink.writeUtf8(String.format(&quot; * %s = %s\\n&quot;, i, factor(i)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">      private String factor(int n) &#123;</span><br><span class=\"line\">        for (int i = 2; i &lt; n; i++) &#123;</span><br><span class=\"line\">          int x = n / i;</span><br><span class=\"line\">          if (x * i == n) return factor(x) + &quot; × &quot; + i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return Integer.toString(n);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">    Request request = new Request.Builder()</span><br><span class=\"line\">        .url(&quot;https://api.github.com/markdown/raw&quot;)</span><br><span class=\"line\">        .post(requestBody)</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"> </span><br><span class=\"line\">    Response response = client.newCall(request).execute();</span><br><span class=\"line\">    if (!response.isSuccessful()) throw new IOException(&quot;Unexpected code &quot; + response);</span><br><span class=\"line\"> </span><br><span class=\"line\">    System.out.println(response.body().string());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Post方式提交文件\"><a href=\"#Post方式提交文件\" class=\"headerlink\" title=\"Post方式提交文件\"></a>Post方式提交文件</h2><p>以文件作为请求体是十分简单的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static final MediaType MEDIA_TYPE_MARKDOWN</span><br><span class=\"line\">  = MediaType.parse(&quot;text/x-markdown; charset=utf-8&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">private final OkHttpClient client = new OkHttpClient();</span><br><span class=\"line\"> </span><br><span class=\"line\">public void run() throws Exception &#123;</span><br><span class=\"line\">    File file = new File(&quot;README.md&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">    Request request = new Request.Builder()</span><br><span class=\"line\">        .url(&quot;https://api.github.com/markdown/raw&quot;)</span><br><span class=\"line\">        .post(RequestBody.create(MEDIA_TYPE_MARKDOWN, file))</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"> </span><br><span class=\"line\">    Response response = client.newCall(request).execute();</span><br><span class=\"line\">    if (!response.isSuccessful()) throw new IOException(&quot;Unexpected code &quot; + response);</span><br><span class=\"line\"> </span><br><span class=\"line\">    System.out.println(response.body().string());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Post方式提交表单\"><a href=\"#Post方式提交表单\" class=\"headerlink\" title=\"Post方式提交表单\"></a>Post方式提交表单</h2><p>使用FormEncodingBuilder来构建和HTML<form>标签相同效果的请求体。键值对将使用一种HTML兼容形式的URL编码来进行编码。</form></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final OkHttpClient client = new OkHttpClient();</span><br><span class=\"line\"> </span><br><span class=\"line\">public void run() throws Exception &#123;</span><br><span class=\"line\">    RequestBody formBody = new FormEncodingBuilder()</span><br><span class=\"line\">        .add(&quot;search&quot;, &quot;Jurassic Park&quot;)</span><br><span class=\"line\">        .build();</span><br><span class=\"line\">    Request request = new Request.Builder()</span><br><span class=\"line\">        .url(&quot;https://en.wikipedia.org/w/index.php&quot;)</span><br><span class=\"line\">        .post(formBody)</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"> </span><br><span class=\"line\">    Response response = client.newCall(request).execute();</span><br><span class=\"line\">    if (!response.isSuccessful()) throw new IOException(&quot;Unexpected code &quot; + response);</span><br><span class=\"line\"> </span><br><span class=\"line\">    System.out.println(response.body().string());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Post方式提交分块请求\"><a href=\"#Post方式提交分块请求\" class=\"headerlink\" title=\"Post方式提交分块请求\"></a>Post方式提交分块请求</h2><p>MultipartBuilder可以构建复杂的请求体，与HTML文件上传形式兼容。多块请求体中每块请求都是一个请求体，可以定义自己的请求头。这些请求头可以用来描述这块请求，例如他的Content-Disposition。如果Content-Length和Content-Type可用的话，他们会被自动添加到请求头中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static final String IMGUR_CLIENT_ID = &quot;...&quot;;</span><br><span class=\"line\">private static final MediaType MEDIA_TYPE_PNG = MediaType.parse(&quot;image/png&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">private final OkHttpClient client = new OkHttpClient();</span><br><span class=\"line\"> </span><br><span class=\"line\">public void run() throws Exception &#123;</span><br><span class=\"line\">    // Use the imgur image upload API as documented at https://api.imgur.com/endpoints/image</span><br><span class=\"line\">    RequestBody requestBody = new MultipartBuilder()</span><br><span class=\"line\">        .type(MultipartBuilder.FORM)</span><br><span class=\"line\">        .addPart(</span><br><span class=\"line\">            Headers.of(&quot;Content-Disposition&quot;, &quot;form-data; name=\\&quot;title\\&quot;&quot;),</span><br><span class=\"line\">            RequestBody.create(null, &quot;Square Logo&quot;))</span><br><span class=\"line\">        .addPart(</span><br><span class=\"line\">            Headers.of(&quot;Content-Disposition&quot;, &quot;form-data; name=\\&quot;image\\&quot;&quot;),</span><br><span class=\"line\">            RequestBody.create(MEDIA_TYPE_PNG, new File(&quot;website/static/logo-square.png&quot;)))</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"> </span><br><span class=\"line\">    Request request = new Request.Builder()</span><br><span class=\"line\">        .header(&quot;Authorization&quot;, &quot;Client-ID &quot; + IMGUR_CLIENT_ID)</span><br><span class=\"line\">        .url(&quot;https://api.imgur.com/3/image&quot;)</span><br><span class=\"line\">        .post(requestBody)</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"> </span><br><span class=\"line\">    Response response = client.newCall(request).execute();</span><br><span class=\"line\">    if (!response.isSuccessful()) throw new IOException(&quot;Unexpected code &quot; + response);</span><br><span class=\"line\"> </span><br><span class=\"line\">    System.out.println(response.body().string());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用Gson来解析JSON响应\"><a href=\"#使用Gson来解析JSON响应\" class=\"headerlink\" title=\"使用Gson来解析JSON响应\"></a>使用Gson来解析JSON响应</h2><p>Gson是一个在JSON和Java对象之间转换非常方便的api。这里我们用Gson来解析Github API的JSON响应。<br>注意：ResponseBody.charStream()使用响应头Content-Type指定的字符集来解析响应体。默认是UTF-8。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final OkHttpClient client = new OkHttpClient();</span><br><span class=\"line\">private final Gson gson = new Gson();</span><br><span class=\"line\"> </span><br><span class=\"line\">public void run() throws Exception &#123;</span><br><span class=\"line\">    Request request = new Request.Builder()</span><br><span class=\"line\">        .url(&quot;https://api.github.com/gists/c2a7c39532239ff261be&quot;)</span><br><span class=\"line\">        .build();</span><br><span class=\"line\">    Response response = client.newCall(request).execute();</span><br><span class=\"line\">    if (!response.isSuccessful()) throw new IOException(&quot;Unexpected code &quot; + response);</span><br><span class=\"line\"> </span><br><span class=\"line\">    Gist gist = gson.fromJson(response.body().charStream(), Gist.class);</span><br><span class=\"line\">    for (Map.Entry&lt;String, GistFile&gt; entry : gist.files.entrySet()) &#123;</span><br><span class=\"line\">      System.out.println(entry.getKey());</span><br><span class=\"line\">      System.out.println(entry.getValue().content);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">static class Gist &#123;</span><br><span class=\"line\">    Map&lt;String, GistFile&gt; files;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">static class GistFile &#123;</span><br><span class=\"line\">    String content;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"响应缓存\"><a href=\"#响应缓存\" class=\"headerlink\" title=\"响应缓存\"></a>响应缓存</h2><p>为了缓存响应，你需要一个你可以读写的缓存目录，和缓存大小的限制。这个缓存目录应该是私有的，不信任的程序应不能读取缓存内容。<br>一个缓存目录同时拥有多个缓存访问是错误的。大多数程序只需要调用一次new OkHttp()，在第一次调用时配置好缓存，然后其他地方只需要调用这个实例就可以了。否则两个缓存示例互相干扰，破坏响应缓存，而且有可能会导致程序崩溃。<br>响应缓存使用HTTP头作为配置。你可以在请求头中添加Cache-Control: max-stale=3600 ,OkHttp缓存会支持。你的服务通过响应头确定响应缓存多长时间，例如使用Cache-Control: max-age=9600。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final OkHttpClient client;</span><br><span class=\"line\"> </span><br><span class=\"line\">public CacheResponse(File cacheDirectory) throws Exception &#123;</span><br><span class=\"line\">    int cacheSize = 10 * 1024 * 1024; // 10 MiB</span><br><span class=\"line\">    Cache cache = new Cache(cacheDirectory, cacheSize);</span><br><span class=\"line\"> </span><br><span class=\"line\">    client = new OkHttpClient();</span><br><span class=\"line\">    client.setCache(cache);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">public void run() throws Exception &#123;</span><br><span class=\"line\">    Request request = new Request.Builder()</span><br><span class=\"line\">        .url(&quot;http://publicobject.com/helloworld.txt&quot;)</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"> </span><br><span class=\"line\">    Response response1 = client.newCall(request).execute();</span><br><span class=\"line\">    if (!response1.isSuccessful()) throw new IOException(&quot;Unexpected code &quot; + response1);</span><br><span class=\"line\"> </span><br><span class=\"line\">    String response1Body = response1.body().string();</span><br><span class=\"line\">    System.out.println(&quot;Response 1 response:          &quot; + response1);</span><br><span class=\"line\">    System.out.println(&quot;Response 1 cache response:    &quot; + response1.cacheResponse());</span><br><span class=\"line\">    System.out.println(&quot;Response 1 network response:  &quot; + response1.networkResponse());</span><br><span class=\"line\"> </span><br><span class=\"line\">    Response response2 = client.newCall(request).execute();</span><br><span class=\"line\">    if (!response2.isSuccessful()) throw new IOException(&quot;Unexpected code &quot; + response2);</span><br><span class=\"line\"> </span><br><span class=\"line\">    String response2Body = response2.body().string();</span><br><span class=\"line\">    System.out.println(&quot;Response 2 response:          &quot; + response2);</span><br><span class=\"line\">    System.out.println(&quot;Response 2 cache response:    &quot; + response2.cacheResponse());</span><br><span class=\"line\">    System.out.println(&quot;Response 2 network response:  &quot; + response2.networkResponse());</span><br><span class=\"line\"> </span><br><span class=\"line\">    System.out.println(&quot;Response 2 equals Response 1? &quot; + response1Body.equals(response2Body));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h2><p>在这一节还提到了下面一句：<br>There are cache headers to force a cached response, force a network response, or force the network response to be validated with a conditional GET.</p>\n<p>我不是很懂cache，平时用到的也不多，所以把Google在Android Developers一段相关的解析放到这里吧。</p>\n<h2 id=\"Force-a-Network-Response\"><a href=\"#Force-a-Network-Response\" class=\"headerlink\" title=\"Force a Network Response\"></a>Force a Network Response</h2><p>In some situations, such as after a user clicks a ‘refresh’ button, it may be necessary to skip the cache, and fetch data directly from the server. To force a full refresh, add the no-cache directive:</p>\n<blockquote>\n<p>connection.addRequestProperty(“Cache-Control”, “no-cache”);</p>\n</blockquote>\n<p>If it is only necessary to force a cached response to be validated by the server, use the more efficient max-age=0 instead:</p>\n<blockquote>\n<p>connection.addRequestProperty(“Cache-Control”, “max-age=0”);</p>\n</blockquote>\n<p>##Force a Cache Response<br>Sometimes you’ll want to show resources if they are available immediately, but not otherwise. This can be used so your application can show something while waiting for the latest data to be downloaded. To restrict a request to locally-cached resources, add the only-if-cached directive:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">     connection.addRequestProperty(&quot;Cache-Control&quot;, &quot;only-if-cached&quot;);</span><br><span class=\"line\">     InputStream cached = connection.getInputStream();</span><br><span class=\"line\">     // the resource was cached! show it</span><br><span class=\"line\">  catch (FileNotFoundException e) &#123;</span><br><span class=\"line\">     // the resource was not cached</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This technique works even better in situations where a stale response is better than no response. To permit stale cached responses, use the max-stale directive with the maximum staleness in seconds:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int maxStale = 60 * 60 * 24 * 28; // tolerate 4-weeks staleconnection.addRequestProperty(&quot;Cache-Control&quot;, &quot;max-stale=&quot; + maxStale);</span><br></pre></td></tr></table></figure>\n<p>以上信息来自：<a href=\"http://developer.android.com/reference/android/net/http/HttpResponseCache.html\" target=\"_blank\" rel=\"noopener\">HttpResponseCache - Android SDK | Android Developers</a></p>\n<h2 id=\"取消一个Call\"><a href=\"#取消一个Call\" class=\"headerlink\" title=\"取消一个Call\"></a>取消一个Call</h2><p>使用Call.cancel()可以立即停止掉一个正在执行的call。如果一个线程正在写请求或者读响应，将会引发IOException。当call没有必要的时候，使用这个api可以节约网络资源。例如当用户离开一个应用时。不管同步还是异步的call都可以取消。<br>你可以通过tags来同时取消多个请求。当你构建一请求时，使用RequestBuilder.tag(tag)来分配一个标签。之后你就可以用OkHttpClient.cancel(tag)来取消所有带有这个tag的call。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);</span><br><span class=\"line\">private final OkHttpClient client = new OkHttpClient();</span><br><span class=\"line\"> </span><br><span class=\"line\">public void run() throws Exception &#123;</span><br><span class=\"line\">    Request request = new Request.Builder()</span><br><span class=\"line\">        .url(&quot;http://httpbin.org/delay/2&quot;) // This URL is served with a 2 second delay.</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"> </span><br><span class=\"line\">    final long startNanos = System.nanoTime();</span><br><span class=\"line\">    final Call call = client.newCall(request);</span><br><span class=\"line\"> </span><br><span class=\"line\">    // Schedule a job to cancel the call in 1 second.</span><br><span class=\"line\">    executor.schedule(new Runnable() &#123;</span><br><span class=\"line\">      @Override public void run() &#123;</span><br><span class=\"line\">        System.out.printf(&quot;%.2f Canceling call.%n&quot;, (System.nanoTime() - startNanos) / 1e9f);</span><br><span class=\"line\">        call.cancel();</span><br><span class=\"line\">        System.out.printf(&quot;%.2f Canceled call.%n&quot;, (System.nanoTime() - startNanos) / 1e9f);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;, 1, TimeUnit.SECONDS);</span><br><span class=\"line\"> </span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      System.out.printf(&quot;%.2f Executing call.%n&quot;, (System.nanoTime() - startNanos) / 1e9f);</span><br><span class=\"line\">      Response response = call.execute();</span><br><span class=\"line\">      System.out.printf(&quot;%.2f Call was expected to fail, but completed: %s%n&quot;,</span><br><span class=\"line\">          (System.nanoTime() - startNanos) / 1e9f, response);</span><br><span class=\"line\">    &#125; catch (IOException e) &#123;</span><br><span class=\"line\">      System.out.printf(&quot;%.2f Call failed as expected: %s%n&quot;,</span><br><span class=\"line\">          (System.nanoTime() - startNanos) / 1e9f, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"超时\"><a href=\"#超时\" class=\"headerlink\" title=\"超时\"></a>超时</h2><p>没有响应时使用超时结束call。没有响应的原因可能是客户点链接问题、服务器可用性问题或者这之间的其他东西。OkHttp支持连接，读取和写入超时</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final OkHttpClient client;</span><br><span class=\"line\"> </span><br><span class=\"line\">public ConfigureTimeouts() throws Exception &#123;</span><br><span class=\"line\">    client = new OkHttpClient();</span><br><span class=\"line\">    client.setConnectTimeout(10, TimeUnit.SECONDS);</span><br><span class=\"line\">    client.setWriteTimeout(10, TimeUnit.SECONDS);</span><br><span class=\"line\">    client.setReadTimeout(30, TimeUnit.SECONDS);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">public void run() throws Exception &#123;</span><br><span class=\"line\">    Request request = new Request.Builder()</span><br><span class=\"line\">        .url(&quot;http://httpbin.org/delay/2&quot;) // This URL is served with a 2 second delay.</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"> </span><br><span class=\"line\">    Response response = client.newCall(request).execute();</span><br><span class=\"line\">    System.out.println(&quot;Response completed: &quot; + response);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"每个call的配置\"><a href=\"#每个call的配置\" class=\"headerlink\" title=\"每个call的配置\"></a>每个call的配置</h2><p>使用OkHttpClient，所有的HTTP Client配置包括代理设置、超时设置、缓存设置。当你需要为单个call改变配置的时候，clone 一个 OkHttpClient。这个api将会返回一个浅拷贝（shallow copy），你可以用来单独自定义。下面的例子中，我们让一个请求是500ms的超时、另一个是3000ms的超时。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final OkHttpClient client = new OkHttpClient();</span><br><span class=\"line\"> </span><br><span class=\"line\">public void run() throws Exception &#123;</span><br><span class=\"line\">    Request request = new Request.Builder()</span><br><span class=\"line\">        .url(&quot;http://httpbin.org/delay/1&quot;) // This URL is served with a 1 second delay.</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"> </span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      Response response = client.clone() // Clone to make a customized OkHttp for this request.</span><br><span class=\"line\">          .setReadTimeout(500, TimeUnit.MILLISECONDS)</span><br><span class=\"line\">          .newCall(request)</span><br><span class=\"line\">          .execute();</span><br><span class=\"line\">      System.out.println(&quot;Response 1 succeeded: &quot; + response);</span><br><span class=\"line\">    &#125; catch (IOException e) &#123;</span><br><span class=\"line\">      System.out.println(&quot;Response 1 failed: &quot; + e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      Response response = client.clone() // Clone to make a customized OkHttp for this request.</span><br><span class=\"line\">          .setReadTimeout(3000, TimeUnit.MILLISECONDS)</span><br><span class=\"line\">          .newCall(request)</span><br><span class=\"line\">          .execute();</span><br><span class=\"line\">      System.out.println(&quot;Response 2 succeeded: &quot; + response);</span><br><span class=\"line\">    &#125; catch (IOException e) &#123;</span><br><span class=\"line\">      System.out.println(&quot;Response 2 failed: &quot; + e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"处理验证\"><a href=\"#处理验证\" class=\"headerlink\" title=\"处理验证\"></a>处理验证</h2><p>这部分和HTTP AUTH有关。<br>相关资料：<a href=\"http://blog.csdn.net/wwwsq/article/details/7255062\" target=\"_blank\" rel=\"noopener\">HTTP AUTH 那些事 - 王绍全的博客 - 博客频道 - CSDN.NET</a></p>\n<p>OkHttp会自动重试未验证的请求。当响应是401 Not Authorized时，Authenticator会被要求提供证书。Authenticator的实现中需要建立一个新的包含证书的请求。如果没有证书可用，返回null来跳过尝试。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public List&lt;Challenge&gt; challenges()</span><br><span class=\"line\">Returns the authorization challenges appropriate for this response&apos;s code. </span><br><span class=\"line\">If the response code is 401 unauthorized, </span><br><span class=\"line\">this returns the &quot;WWW-Authenticate&quot; challenges.</span><br><span class=\"line\">If the response code is 407 proxy unauthorized, this returns the &quot;Proxy-Authenticate&quot; challenges.</span><br><span class=\"line\">Otherwise this returns an empty list of challenges.</span><br></pre></td></tr></table></figure>\n<p>当需要实现一个Basic challenge， 使用Credentials.basic(username, password)来编码请求头。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final OkHttpClient client = new OkHttpClient();</span><br><span class=\"line\"> </span><br><span class=\"line\">public void run() throws Exception &#123;</span><br><span class=\"line\">    client.setAuthenticator(new Authenticator() &#123;</span><br><span class=\"line\">      @Override public Request authenticate(Proxy proxy, Response response) &#123;</span><br><span class=\"line\">        System.out.println(&quot;Authenticating for response: &quot; + response);</span><br><span class=\"line\">        System.out.println(&quot;Challenges: &quot; + response.challenges());</span><br><span class=\"line\">        String credential = Credentials.basic(&quot;jesse&quot;, &quot;password1&quot;);</span><br><span class=\"line\">        return response.request().newBuilder()</span><br><span class=\"line\">            .header(&quot;Authorization&quot;, credential)</span><br><span class=\"line\">            .build();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">      @Override public Request authenticateProxy(Proxy proxy, Response response) &#123;</span><br><span class=\"line\">        return null; // Null indicates no attempt to authenticate.</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">    Request request = new Request.Builder()</span><br><span class=\"line\">        .url(&quot;http://publicobject.com/secrets/hellosecret.txt&quot;)</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"> </span><br><span class=\"line\">    Response response = client.newCall(request).execute();</span><br><span class=\"line\">    if (!response.isSuccessful()) throw new IOException(&quot;Unexpected code &quot; + response);</span><br><span class=\"line\"> </span><br><span class=\"line\">    System.out.println(response.body().string());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>转自 <a href=\"http://www.cnblogs.com/ct2011/p/4001708.html\" target=\"_blank\" rel=\"noopener\">OkHttp使用介绍</a> 同时整合了 <a href=\"http://www.cnblogs.com/ct2011/p/3997368.html\" target=\"_blank\" rel=\"noopener\">OkHttp使用进阶</a> 这篇文章以及其中的评论。</p>\n","site":{"data":{"hint":{"new":{"selector":[".menu-reading",".menu-about"]}},"link":{"social":{"weibo":"http://weibo.com/","github":"https://github.com/xxl6097","rss":"/atom.xml"},"extern":{"raytaylorism主题作者的技术博客":"http://raytaylorlin.com/","Github地址（测试友情链接）":"https://github.com/xxl6097"}},"about":{"avatar":"http://uuxia.cn/image/icon.png","name":"你的大名","tag":"Web前端/Android/Java/C++/技术宅","desc":"在浮躁的世界安安静静地敲代码","skills":{"Javascript":8,"Python":6,"invisible-split-line-1":-1,"Node.js":4},"projects":[{"name":"你的项目A","image":"https://d13yacurqjgara.cloudfront.net/users/138819/screenshots/2578899/dribbble_800x600_01_1x.png","tags":["2016年","项目标签"],"description":"你的项目A的简介","link_text":"网站链接","link":"https://dribbble.com/"},{"name":"你的作品B","image":"https://d13yacurqjgara.cloudfront.net/users/4094/screenshots/2578885/time-lords-drib_1x.jpg","description":"你的作品B的简介","tags":["Github","设计"],"link_text":"Github地址","link":"https://github.com/"}],"reward":["http://uuxia.cn/image/wechat.png","http://uuxia.cn/image/alipay.png"]},"reading":{"define":{"readed":"已读","reading":"在读","wanted":"想读"},"contents":{"readed":[{"title":"众妙之门：网站UI设计之道","cover":"http://img3.douban.com/lpic/s23139051.jpg","review":"推荐非UI人士了解UI阅读。","score":"7","doubanLink":"http://book.douban.com/subject/20281463/"},{"title":"JavaScript模式","cover":"http://img5.douban.com/lpic/s11337059.jpg","review":"书很薄，但内容相当实用。","score":"8.5","doubanLink":"http://book.douban.com/subject/11506062/"},{"title":"JavaScript语言精粹","cover":"http://img3.douban.com/lpic/s11373174.jpg","review":"这是一本前端人员的基础书，强烈推荐阅读，而且越早看受益越多！","score":"9.5","doubanLink":"http://book.douban.com/subject/11874748/"}],"reading":[{"title":"网络游戏核心技术与实战","cover":"http://img4.douban.com/lpic/s27881888.jpg","review":"","score":null,"doubanLink":"http://book.douban.com/subject/25850090/"}],"wanted":[{"title":"计算机程序的构造和解释","cover":"http://img4.douban.com/lpic/s1113106.jpg","review":"","score":null,"doubanLink":"http://book.douban.com/subject/1148282/"}]}}}},"excerpt":"<p>这是一个针对技术开发者的一个应用，你可以在掘金上获取最新最优质的技术干货，不仅仅是Android知识、前端、后端以至于产品和设计都有涉猎，想成为全栈工程师的朋友不要错过！<br></p>","more":"<p></p>\n<h1 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h1><p>Android系统提供了两种HTTP通信类，HttpURLConnection和HttpClient。<br><a href=\"http://android-developers.blogspot.com/2011/09/androids-http-clients.html\" target=\"_blank\" rel=\"noopener\">关于HttpURLConnection和HttpClient的选择&gt;&gt;官方博客</a><br>尽管Google在大部分安卓版本中推荐使用HttpURLConnection，但是这个类相比HttpClient实在是太难用，太弱爆了。<br>OkHttp是一个相对成熟的解决方案，据说Android4.4的源码中可以看到HttpURLConnection已经替换成OkHttp实现了。所以我们更有理由相信OkHttp的强大。</p>\n<p>OkHttp 处理了很多网络疑难杂症：会从很多常用的连接问题中自动恢复。如果您的服务器配置了多个IP地址，当第一个IP连接失败的时候，OkHttp会自动尝试下一个IP。OkHttp还处理了代理服务器问题和SSL握手失败问题。</p>\n<p>使用 OkHttp 无需重写您程序中的网络代码。OkHttp实现了几乎和java.net.HttpURLConnection一样的API。如果你用了 Apache HttpClient，则OkHttp也提供了一个对应的okhttp-apache 模块。</p>\n<blockquote>\n<p>注：在国内使用OkHttp会因为这个问题导致部分酷派手机用户无法联网，所以对于大众app来说，需要等待这个bug修复后再使用。或者尝试使用OkHttp的老版本。<br>截止到目前，OkHttp一直没有修复，并把修复计划延迟到了OkHttp2.3中。不是所有设备都能重现，仅少量设备会出现这个问题。（如果问题这么明显，OkHttp早就修复了）</p>\n</blockquote>\n<h2 id=\"官方资料\"><a href=\"#官方资料\" class=\"headerlink\" title=\"官方资料\"></a>官方资料</h2><p><a href=\"http://square.github.io/okhttp/\" target=\"_blank\" rel=\"noopener\">官方介绍</a><br><a href=\"https://github.com/square/okhttp\" target=\"_blank\" rel=\"noopener\">github源码</a></p>\n<h2 id=\"使用范围\"><a href=\"#使用范围\" class=\"headerlink\" title=\"使用范围\"></a>使用范围</h2><p>OkHttp支持Android 2.3及其以上版本。<br>对于Java, JDK1.7以上。</p>\n<h2 id=\"jar包准备\"><a href=\"#jar包准备\" class=\"headerlink\" title=\"jar包准备\"></a>jar包准备</h2><p>官方介绍页面有链接位置。这里把下载链接也写在下面。<br><a href=\"http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&amp;g=com.squareup.okhttp&amp;a=okhttp&amp;v=LATEST\" target=\"_blank\" rel=\"noopener\">OkHttp</a><br><a href=\"http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&amp;g=com.squareup.okio&amp;a=okio&amp;v=LATEST\" target=\"_blank\" rel=\"noopener\">Okio</a></p>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><p><strong>HTTP GET</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OkHttpClient client = new OkHttpClient();</span><br><span class=\"line\"> </span><br><span class=\"line\">String run(String url) throws IOException &#123;</span><br><span class=\"line\">    Request request = new Request.Builder().url(url).build();</span><br><span class=\"line\">    Response response = client.newCall(request).execute();    if (response.isSuccessful()) &#123;        return response.body().string();</span><br><span class=\"line\">    &#125; else &#123;        throw new IOException(&quot;Unexpected code &quot; + response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Request是OkHttp中访问的请求，Builder是辅助类。Response即OkHttp中的响应。<br><strong>Response类：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean isSuccessful()</span><br><span class=\"line\">Returns true if the code is in [200..300),</span><br><span class=\"line\"> which means the request was successfully received, understood, and accepted.</span><br></pre></td></tr></table></figure>\n<p><strong>response.body()返回ResponseBody类</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final String string() throws IOException</span><br><span class=\"line\">Returns the response as a string decoded with the charset of the Content-Type header. If that header is either absent or lacks a charset,</span><br><span class=\"line\"> this will attempt to decode the response body as UTF-8.Throws:</span><br><span class=\"line\">IOException</span><br></pre></td></tr></table></figure>\n<p>当然也能获取到流的形式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final InputStream byteStream()</span><br></pre></td></tr></table></figure>\n<p><strong>HTTP POST<br>POST提交Json数据</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static final MediaType JSON = MediaType.parse(&quot;application/json; charset=utf-8&quot;);</span><br><span class=\"line\">OkHttpClient client = new OkHttpClient();</span><br><span class=\"line\">String post(String url, String json) throws IOException &#123;</span><br><span class=\"line\">     RequestBody body = RequestBody.create(JSON, json);</span><br><span class=\"line\">      Request request = new Request.Builder()</span><br><span class=\"line\">      .url(url)</span><br><span class=\"line\">      .post(body)</span><br><span class=\"line\">      .build();</span><br><span class=\"line\">      Response response = client.newCall(request).execute();</span><br><span class=\"line\">    f (response.isSuccessful()) &#123;</span><br><span class=\"line\">        return response.body().string();</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        throw new IOException(&quot;Unexpected code &quot; + response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用Request的post方法来提交请求体RequestBody</p>\n<p><strong> POST提交键值对</strong><br>很多时候我们会需要通过POST方式把键值对数据传送到服务器。 OkHttp提供了很方便的方式来做这件事情。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OkHttpClient client = new OkHttpClient();</span><br><span class=\"line\">String post(String url, String json) throws IOException &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">     RequestBody formBody = new FormEncodingBuilder()</span><br><span class=\"line\">    .add(&quot;platform&quot;, &quot;android&quot;)</span><br><span class=\"line\">    .add(&quot;name&quot;, &quot;bug&quot;)</span><br><span class=\"line\">    .add(&quot;subject&quot;, &quot;XXXXXXXXXXXXXXX&quot;)</span><br><span class=\"line\">    .build();</span><br><span class=\"line\"> </span><br><span class=\"line\">      Request request = new Request.Builder()</span><br><span class=\"line\">      .url(url)</span><br><span class=\"line\">      .post(body)</span><br><span class=\"line\">      .build();</span><br><span class=\"line\"> </span><br><span class=\"line\">      Response response = client.newCall(request).execute();</span><br><span class=\"line\">    if (response.isSuccessful()) &#123;</span><br><span class=\"line\">        return response.body().string();</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        throw new IOException(&quot;Unexpected code &quot; + response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过上面的例子我们可以发现，OkHttp在很多时候使用都是很方便的，而且很多代码也有重复，因此特地整理了下面的工具类。<br>注意：</p>\n<ul>\n<li>OkHttp官方文档并不建议我们创建多个OkHttpClient，因此全局使用一个。 如果有需要，可以使用clone方法，再进行自定义。这点在后面的高级教程里会提到。</li>\n<li>enqueue为OkHttp提供的异步方法，入门教程中并没有提到，后面的高级教程里会有解释。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.concurrent.TimeUnit;</span><br><span class=\"line\">import org.apache.http.client.utils.URLEncodedUtils;</span><br><span class=\"line\">import org.apache.http.message.BasicNameValuePair;</span><br><span class=\"line\">import cn.wiz.sdk.constant.WizConstant;</span><br><span class=\"line\">import com.squareup.okhttp.Callback;</span><br><span class=\"line\">import com.squareup.okhttp.OkHttpClient;</span><br><span class=\"line\">import com.squareup.okhttp.Request;</span><br><span class=\"line\">import com.squareup.okhttp.Response; </span><br><span class=\"line\">  </span><br><span class=\"line\">public class OkHttpUtil &#123;</span><br><span class=\"line\">    private static final OkHttpClient mOkHttpClient = new OkHttpClient();</span><br><span class=\"line\">    static&#123;</span><br><span class=\"line\">        mOkHttpClient.setConnectTimeout(30, TimeUnit.SECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 该不会开启异步线程。</span><br><span class=\"line\">     * @param request</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     * @throws IOException</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static Response execute(Request request) throws IOException&#123;</span><br><span class=\"line\">        return mOkHttpClient.newCall(request).execute();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 开启异步线程访问网络</span><br><span class=\"line\">     * @param request</span><br><span class=\"line\">     * @param responseCallback</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void enqueue(Request request, Callback responseCallback)&#123;</span><br><span class=\"line\">        mOkHttpClient.newCall(request).enqueue(responseCallback);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 开启异步线程访问网络, 且不在意返回结果（实现空callback）</span><br><span class=\"line\">     * @param request</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void enqueue(Request request)&#123;</span><br><span class=\"line\">        mOkHttpClient.newCall(request).enqueue(new Callback() &#123;</span><br><span class=\"line\">             </span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onResponse(Response arg0) throws IOException &#123;</span><br><span class=\"line\">                 </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">             </span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onFailure(Request arg0, IOException arg1) &#123;</span><br><span class=\"line\">                 </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static String getStringFromServer(String url) throws IOException&#123;</span><br><span class=\"line\">        Request request = new Request.Builder().url(url).build();</span><br><span class=\"line\">        Response response = execute(request);</span><br><span class=\"line\">        if (response.isSuccessful()) &#123;</span><br><span class=\"line\">            String responseUrl = response.body().string();</span><br><span class=\"line\">            return responseUrl;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            throw new IOException(&quot;Unexpected code &quot; + response);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private static final String CHARSET_NAME = &quot;UTF-8&quot;;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 这里使用了HttpClinet的API。只是为了方便</span><br><span class=\"line\">     * @param params</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String formatParams(List&lt;BasicNameValuePair&gt; params)&#123;</span><br><span class=\"line\">        return URLEncodedUtils.format(params, CHARSET_NAME);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 为HttpGet 的 url 方便的添加多个name value 参数。</span><br><span class=\"line\">     * @param url</span><br><span class=\"line\">     * @param params</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String attachHttpGetParams(String url, List&lt;BasicNameValuePair&gt; params)&#123;</span><br><span class=\"line\">        return url + &quot;?&quot; + formatParams(params);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 为HttpGet 的 url 方便的添加1个name value 参数。</span><br><span class=\"line\">     * @param url</span><br><span class=\"line\">     * @param name</span><br><span class=\"line\">     * @param value</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String attachHttpGetParam(String url, String name, String value)&#123;</span><br><span class=\"line\">        return url + &quot;?&quot; + name + &quot;=&quot; + value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"高级\"><a href=\"#高级\" class=\"headerlink\" title=\"高级\"></a>高级</h2><p>高级属性其实用的不多，这里主要是对OkHttp github官方教程进行了翻译。</p>\n<h2 id=\"同步get\"><a href=\"#同步get\" class=\"headerlink\" title=\"同步get\"></a>同步get</h2><p>下载一个文件，打印他的响应头，以string形式打印响应体。<br>响应体的 string() 方法对于小文档来说十分方便、高效。但是如果响应体太大（超过1MB），应避免适应 string()方法 ，因为他会将把整个文档加载到内存中。<br>对于超过1MB的响应body，应使用流的方式来处理body。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final OkHttpClient client = new OkHttpClient();</span><br><span class=\"line\"> </span><br><span class=\"line\">public void run() throws Exception &#123;</span><br><span class=\"line\">    Request request = new Request.Builder()</span><br><span class=\"line\">        .url(&quot;http://publicobject.com/helloworld.txt&quot;)</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"> </span><br><span class=\"line\">    Response response = client.newCall(request).execute();</span><br><span class=\"line\">    if (!response.isSuccessful()) throw new IOException(&quot;Unexpected code &quot; + response);</span><br><span class=\"line\"> </span><br><span class=\"line\">    Headers responseHeaders = response.headers();</span><br><span class=\"line\">    for (int i = 0; i &lt; responseHeaders.size(); i++) &#123;</span><br><span class=\"line\">      System.out.println(responseHeaders.name(i) + &quot;: &quot; + responseHeaders.value(i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    System.out.println(response.body().string());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"异步get\"><a href=\"#异步get\" class=\"headerlink\" title=\"异步get\"></a>异步get</h2><p>在一个工作线程中下载文件，当响应可读时回调Callback接口。读取响应时会阻塞当前线程。OkHttp现阶段不提供异步api来接收响应体。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final OkHttpClient client = new OkHttpClient();</span><br><span class=\"line\"> </span><br><span class=\"line\">public void run() throws Exception &#123;</span><br><span class=\"line\">    Request request = new Request.Builder()</span><br><span class=\"line\">        .url(&quot;http://publicobject.com/helloworld.txt&quot;)</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"> </span><br><span class=\"line\">    client.newCall(request).enqueue(new Callback() &#123;</span><br><span class=\"line\">      @Override public void onFailure(Request request, Throwable throwable) &#123;</span><br><span class=\"line\">        throwable.printStackTrace();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">      @Override public void onResponse(Response response) throws IOException &#123;</span><br><span class=\"line\">        if (!response.isSuccessful()) throw new IOException(&quot;Unexpected code &quot; + response);</span><br><span class=\"line\"> </span><br><span class=\"line\">        Headers responseHeaders = response.headers();</span><br><span class=\"line\">        for (int i = 0; i &lt; responseHeaders.size(); i++) &#123;</span><br><span class=\"line\">          System.out.println(responseHeaders.name(i) + &quot;: &quot; + responseHeaders.value(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        System.out.println(response.body().string());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"提取响应头\"><a href=\"#提取响应头\" class=\"headerlink\" title=\"提取响应头\"></a>提取响应头</h2><p>典型的HTTP头 像是一个 Map&lt;String, String&gt; :每个字段都有一个或没有值。但是一些头允许多个值，像Guava的Multimap。例如：HTTP响应里面提供的Vary响应头，就是多值的。OkHttp的api试图让这些情况都适用。<br>当写请求头的时候，使用header(name, value)可以设置唯一的name、value。如果已经有值，旧的将被移除，然后添加新的。使用addHeader(name, value)可以添加多值（添加，不移除已有的）。<br>当读取响应头时，使用header(name)返回最后出现的name、value。通常情况这也是唯一的name、value。如果没有值，那么header(name)将返回null。如果想读取字段对应的所有值，使用headers(name)会返回一个list。<br>为了获取所有的Header，Headers类支持按index访问。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final OkHttpClient client = new OkHttpClient();</span><br><span class=\"line\"> </span><br><span class=\"line\">public void run() throws Exception &#123;</span><br><span class=\"line\">    Request request = new Request.Builder()</span><br><span class=\"line\">        .url(&quot;https://api.github.com/repos/square/okhttp/issues&quot;)</span><br><span class=\"line\">        .header(&quot;User-Agent&quot;, &quot;OkHttp Headers.java&quot;)</span><br><span class=\"line\">        .addHeader(&quot;Accept&quot;, &quot;application/json; q=0.5&quot;)</span><br><span class=\"line\">        .addHeader(&quot;Accept&quot;, &quot;application/vnd.github.v3+json&quot;)</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"> </span><br><span class=\"line\">    Response response = client.newCall(request).execute();</span><br><span class=\"line\">    if (!response.isSuccessful()) throw new IOException(&quot;Unexpected code &quot; + response);</span><br><span class=\"line\"> </span><br><span class=\"line\">    System.out.println(&quot;Server: &quot; + response.header(&quot;Server&quot;));</span><br><span class=\"line\">    System.out.println(&quot;Date: &quot; + response.header(&quot;Date&quot;));</span><br><span class=\"line\">    System.out.println(&quot;Vary: &quot; + response.headers(&quot;Vary&quot;));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Post方式提交String\"><a href=\"#Post方式提交String\" class=\"headerlink\" title=\"Post方式提交String\"></a>Post方式提交String</h2><p>使用HTTP POST提交请求到服务。这个例子提交了一个markdown文档到web服务，以HTML方式渲染markdown。因为整个请求体都在内存中，因此避免使用此api提交大文档（大于1MB）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static final MediaType MEDIA_TYPE_MARKDOWN</span><br><span class=\"line\">  = MediaType.parse(&quot;text/x-markdown; charset=utf-8&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">private final OkHttpClient client = new OkHttpClient();</span><br><span class=\"line\"> </span><br><span class=\"line\">public void run() throws Exception &#123;</span><br><span class=\"line\">    String postBody = &quot;&quot;</span><br><span class=\"line\">        + &quot;Releases\\n&quot;</span><br><span class=\"line\">        + &quot;--------\\n&quot;</span><br><span class=\"line\">        + &quot;\\n&quot;</span><br><span class=\"line\">        + &quot; * _1.0_ May 6, 2013\\n&quot;</span><br><span class=\"line\">        + &quot; * _1.1_ June 15, 2013\\n&quot;</span><br><span class=\"line\">        + &quot; * _1.2_ August 11, 2013\\n&quot;;</span><br><span class=\"line\"> </span><br><span class=\"line\">    Request request = new Request.Builder()</span><br><span class=\"line\">        .url(&quot;https://api.github.com/markdown/raw&quot;)</span><br><span class=\"line\">        .post(RequestBody.create(MEDIA_TYPE_MARKDOWN, postBody))</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"> </span><br><span class=\"line\">    Response response = client.newCall(request).execute();</span><br><span class=\"line\">    if (!response.isSuccessful()) throw new IOException(&quot;Unexpected code &quot; + response);</span><br><span class=\"line\"> </span><br><span class=\"line\">    System.out.println(response.body().string());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Post方式提交流\"><a href=\"#Post方式提交流\" class=\"headerlink\" title=\"Post方式提交流\"></a>Post方式提交流</h2><p>以流的方式POST提交请求体。请求体的内容由流写入产生。这个例子是流直接写入Okio的BufferedSink。你的程序可能会使用OutputStream，你可以使用BufferedSink.outputStream()来获取。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static final MediaType MEDIA_TYPE_MARKDOWN</span><br><span class=\"line\">      = MediaType.parse(&quot;text/x-markdown; charset=utf-8&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">private final OkHttpClient client = new OkHttpClient();</span><br><span class=\"line\"> </span><br><span class=\"line\">public void run() throws Exception &#123;</span><br><span class=\"line\">    RequestBody requestBody = new RequestBody() &#123;</span><br><span class=\"line\">      @Override public MediaType contentType() &#123;</span><br><span class=\"line\">        return MEDIA_TYPE_MARKDOWN;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">      @Override public void writeTo(BufferedSink sink) throws IOException &#123;</span><br><span class=\"line\">        sink.writeUtf8(&quot;Numbers\\n&quot;);</span><br><span class=\"line\">        sink.writeUtf8(&quot;-------\\n&quot;);</span><br><span class=\"line\">        for (int i = 2; i &lt;= 997; i++) &#123;</span><br><span class=\"line\">          sink.writeUtf8(String.format(&quot; * %s = %s\\n&quot;, i, factor(i)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">      private String factor(int n) &#123;</span><br><span class=\"line\">        for (int i = 2; i &lt; n; i++) &#123;</span><br><span class=\"line\">          int x = n / i;</span><br><span class=\"line\">          if (x * i == n) return factor(x) + &quot; × &quot; + i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return Integer.toString(n);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">    Request request = new Request.Builder()</span><br><span class=\"line\">        .url(&quot;https://api.github.com/markdown/raw&quot;)</span><br><span class=\"line\">        .post(requestBody)</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"> </span><br><span class=\"line\">    Response response = client.newCall(request).execute();</span><br><span class=\"line\">    if (!response.isSuccessful()) throw new IOException(&quot;Unexpected code &quot; + response);</span><br><span class=\"line\"> </span><br><span class=\"line\">    System.out.println(response.body().string());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Post方式提交文件\"><a href=\"#Post方式提交文件\" class=\"headerlink\" title=\"Post方式提交文件\"></a>Post方式提交文件</h2><p>以文件作为请求体是十分简单的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static final MediaType MEDIA_TYPE_MARKDOWN</span><br><span class=\"line\">  = MediaType.parse(&quot;text/x-markdown; charset=utf-8&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">private final OkHttpClient client = new OkHttpClient();</span><br><span class=\"line\"> </span><br><span class=\"line\">public void run() throws Exception &#123;</span><br><span class=\"line\">    File file = new File(&quot;README.md&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">    Request request = new Request.Builder()</span><br><span class=\"line\">        .url(&quot;https://api.github.com/markdown/raw&quot;)</span><br><span class=\"line\">        .post(RequestBody.create(MEDIA_TYPE_MARKDOWN, file))</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"> </span><br><span class=\"line\">    Response response = client.newCall(request).execute();</span><br><span class=\"line\">    if (!response.isSuccessful()) throw new IOException(&quot;Unexpected code &quot; + response);</span><br><span class=\"line\"> </span><br><span class=\"line\">    System.out.println(response.body().string());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Post方式提交表单\"><a href=\"#Post方式提交表单\" class=\"headerlink\" title=\"Post方式提交表单\"></a>Post方式提交表单</h2><p>使用FormEncodingBuilder来构建和HTML<form>标签相同效果的请求体。键值对将使用一种HTML兼容形式的URL编码来进行编码。</form></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final OkHttpClient client = new OkHttpClient();</span><br><span class=\"line\"> </span><br><span class=\"line\">public void run() throws Exception &#123;</span><br><span class=\"line\">    RequestBody formBody = new FormEncodingBuilder()</span><br><span class=\"line\">        .add(&quot;search&quot;, &quot;Jurassic Park&quot;)</span><br><span class=\"line\">        .build();</span><br><span class=\"line\">    Request request = new Request.Builder()</span><br><span class=\"line\">        .url(&quot;https://en.wikipedia.org/w/index.php&quot;)</span><br><span class=\"line\">        .post(formBody)</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"> </span><br><span class=\"line\">    Response response = client.newCall(request).execute();</span><br><span class=\"line\">    if (!response.isSuccessful()) throw new IOException(&quot;Unexpected code &quot; + response);</span><br><span class=\"line\"> </span><br><span class=\"line\">    System.out.println(response.body().string());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Post方式提交分块请求\"><a href=\"#Post方式提交分块请求\" class=\"headerlink\" title=\"Post方式提交分块请求\"></a>Post方式提交分块请求</h2><p>MultipartBuilder可以构建复杂的请求体，与HTML文件上传形式兼容。多块请求体中每块请求都是一个请求体，可以定义自己的请求头。这些请求头可以用来描述这块请求，例如他的Content-Disposition。如果Content-Length和Content-Type可用的话，他们会被自动添加到请求头中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static final String IMGUR_CLIENT_ID = &quot;...&quot;;</span><br><span class=\"line\">private static final MediaType MEDIA_TYPE_PNG = MediaType.parse(&quot;image/png&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">private final OkHttpClient client = new OkHttpClient();</span><br><span class=\"line\"> </span><br><span class=\"line\">public void run() throws Exception &#123;</span><br><span class=\"line\">    // Use the imgur image upload API as documented at https://api.imgur.com/endpoints/image</span><br><span class=\"line\">    RequestBody requestBody = new MultipartBuilder()</span><br><span class=\"line\">        .type(MultipartBuilder.FORM)</span><br><span class=\"line\">        .addPart(</span><br><span class=\"line\">            Headers.of(&quot;Content-Disposition&quot;, &quot;form-data; name=\\&quot;title\\&quot;&quot;),</span><br><span class=\"line\">            RequestBody.create(null, &quot;Square Logo&quot;))</span><br><span class=\"line\">        .addPart(</span><br><span class=\"line\">            Headers.of(&quot;Content-Disposition&quot;, &quot;form-data; name=\\&quot;image\\&quot;&quot;),</span><br><span class=\"line\">            RequestBody.create(MEDIA_TYPE_PNG, new File(&quot;website/static/logo-square.png&quot;)))</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"> </span><br><span class=\"line\">    Request request = new Request.Builder()</span><br><span class=\"line\">        .header(&quot;Authorization&quot;, &quot;Client-ID &quot; + IMGUR_CLIENT_ID)</span><br><span class=\"line\">        .url(&quot;https://api.imgur.com/3/image&quot;)</span><br><span class=\"line\">        .post(requestBody)</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"> </span><br><span class=\"line\">    Response response = client.newCall(request).execute();</span><br><span class=\"line\">    if (!response.isSuccessful()) throw new IOException(&quot;Unexpected code &quot; + response);</span><br><span class=\"line\"> </span><br><span class=\"line\">    System.out.println(response.body().string());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用Gson来解析JSON响应\"><a href=\"#使用Gson来解析JSON响应\" class=\"headerlink\" title=\"使用Gson来解析JSON响应\"></a>使用Gson来解析JSON响应</h2><p>Gson是一个在JSON和Java对象之间转换非常方便的api。这里我们用Gson来解析Github API的JSON响应。<br>注意：ResponseBody.charStream()使用响应头Content-Type指定的字符集来解析响应体。默认是UTF-8。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final OkHttpClient client = new OkHttpClient();</span><br><span class=\"line\">private final Gson gson = new Gson();</span><br><span class=\"line\"> </span><br><span class=\"line\">public void run() throws Exception &#123;</span><br><span class=\"line\">    Request request = new Request.Builder()</span><br><span class=\"line\">        .url(&quot;https://api.github.com/gists/c2a7c39532239ff261be&quot;)</span><br><span class=\"line\">        .build();</span><br><span class=\"line\">    Response response = client.newCall(request).execute();</span><br><span class=\"line\">    if (!response.isSuccessful()) throw new IOException(&quot;Unexpected code &quot; + response);</span><br><span class=\"line\"> </span><br><span class=\"line\">    Gist gist = gson.fromJson(response.body().charStream(), Gist.class);</span><br><span class=\"line\">    for (Map.Entry&lt;String, GistFile&gt; entry : gist.files.entrySet()) &#123;</span><br><span class=\"line\">      System.out.println(entry.getKey());</span><br><span class=\"line\">      System.out.println(entry.getValue().content);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">static class Gist &#123;</span><br><span class=\"line\">    Map&lt;String, GistFile&gt; files;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">static class GistFile &#123;</span><br><span class=\"line\">    String content;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"响应缓存\"><a href=\"#响应缓存\" class=\"headerlink\" title=\"响应缓存\"></a>响应缓存</h2><p>为了缓存响应，你需要一个你可以读写的缓存目录，和缓存大小的限制。这个缓存目录应该是私有的，不信任的程序应不能读取缓存内容。<br>一个缓存目录同时拥有多个缓存访问是错误的。大多数程序只需要调用一次new OkHttp()，在第一次调用时配置好缓存，然后其他地方只需要调用这个实例就可以了。否则两个缓存示例互相干扰，破坏响应缓存，而且有可能会导致程序崩溃。<br>响应缓存使用HTTP头作为配置。你可以在请求头中添加Cache-Control: max-stale=3600 ,OkHttp缓存会支持。你的服务通过响应头确定响应缓存多长时间，例如使用Cache-Control: max-age=9600。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final OkHttpClient client;</span><br><span class=\"line\"> </span><br><span class=\"line\">public CacheResponse(File cacheDirectory) throws Exception &#123;</span><br><span class=\"line\">    int cacheSize = 10 * 1024 * 1024; // 10 MiB</span><br><span class=\"line\">    Cache cache = new Cache(cacheDirectory, cacheSize);</span><br><span class=\"line\"> </span><br><span class=\"line\">    client = new OkHttpClient();</span><br><span class=\"line\">    client.setCache(cache);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">public void run() throws Exception &#123;</span><br><span class=\"line\">    Request request = new Request.Builder()</span><br><span class=\"line\">        .url(&quot;http://publicobject.com/helloworld.txt&quot;)</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"> </span><br><span class=\"line\">    Response response1 = client.newCall(request).execute();</span><br><span class=\"line\">    if (!response1.isSuccessful()) throw new IOException(&quot;Unexpected code &quot; + response1);</span><br><span class=\"line\"> </span><br><span class=\"line\">    String response1Body = response1.body().string();</span><br><span class=\"line\">    System.out.println(&quot;Response 1 response:          &quot; + response1);</span><br><span class=\"line\">    System.out.println(&quot;Response 1 cache response:    &quot; + response1.cacheResponse());</span><br><span class=\"line\">    System.out.println(&quot;Response 1 network response:  &quot; + response1.networkResponse());</span><br><span class=\"line\"> </span><br><span class=\"line\">    Response response2 = client.newCall(request).execute();</span><br><span class=\"line\">    if (!response2.isSuccessful()) throw new IOException(&quot;Unexpected code &quot; + response2);</span><br><span class=\"line\"> </span><br><span class=\"line\">    String response2Body = response2.body().string();</span><br><span class=\"line\">    System.out.println(&quot;Response 2 response:          &quot; + response2);</span><br><span class=\"line\">    System.out.println(&quot;Response 2 cache response:    &quot; + response2.cacheResponse());</span><br><span class=\"line\">    System.out.println(&quot;Response 2 network response:  &quot; + response2.networkResponse());</span><br><span class=\"line\"> </span><br><span class=\"line\">    System.out.println(&quot;Response 2 equals Response 1? &quot; + response1Body.equals(response2Body));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h2><p>在这一节还提到了下面一句：<br>There are cache headers to force a cached response, force a network response, or force the network response to be validated with a conditional GET.</p>\n<p>我不是很懂cache，平时用到的也不多，所以把Google在Android Developers一段相关的解析放到这里吧。</p>\n<h2 id=\"Force-a-Network-Response\"><a href=\"#Force-a-Network-Response\" class=\"headerlink\" title=\"Force a Network Response\"></a>Force a Network Response</h2><p>In some situations, such as after a user clicks a ‘refresh’ button, it may be necessary to skip the cache, and fetch data directly from the server. To force a full refresh, add the no-cache directive:</p>\n<blockquote>\n<p>connection.addRequestProperty(“Cache-Control”, “no-cache”);</p>\n</blockquote>\n<p>If it is only necessary to force a cached response to be validated by the server, use the more efficient max-age=0 instead:</p>\n<blockquote>\n<p>connection.addRequestProperty(“Cache-Control”, “max-age=0”);</p>\n</blockquote>\n<p>##Force a Cache Response<br>Sometimes you’ll want to show resources if they are available immediately, but not otherwise. This can be used so your application can show something while waiting for the latest data to be downloaded. To restrict a request to locally-cached resources, add the only-if-cached directive:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">     connection.addRequestProperty(&quot;Cache-Control&quot;, &quot;only-if-cached&quot;);</span><br><span class=\"line\">     InputStream cached = connection.getInputStream();</span><br><span class=\"line\">     // the resource was cached! show it</span><br><span class=\"line\">  catch (FileNotFoundException e) &#123;</span><br><span class=\"line\">     // the resource was not cached</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This technique works even better in situations where a stale response is better than no response. To permit stale cached responses, use the max-stale directive with the maximum staleness in seconds:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int maxStale = 60 * 60 * 24 * 28; // tolerate 4-weeks staleconnection.addRequestProperty(&quot;Cache-Control&quot;, &quot;max-stale=&quot; + maxStale);</span><br></pre></td></tr></table></figure>\n<p>以上信息来自：<a href=\"http://developer.android.com/reference/android/net/http/HttpResponseCache.html\" target=\"_blank\" rel=\"noopener\">HttpResponseCache - Android SDK | Android Developers</a></p>\n<h2 id=\"取消一个Call\"><a href=\"#取消一个Call\" class=\"headerlink\" title=\"取消一个Call\"></a>取消一个Call</h2><p>使用Call.cancel()可以立即停止掉一个正在执行的call。如果一个线程正在写请求或者读响应，将会引发IOException。当call没有必要的时候，使用这个api可以节约网络资源。例如当用户离开一个应用时。不管同步还是异步的call都可以取消。<br>你可以通过tags来同时取消多个请求。当你构建一请求时，使用RequestBuilder.tag(tag)来分配一个标签。之后你就可以用OkHttpClient.cancel(tag)来取消所有带有这个tag的call。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);</span><br><span class=\"line\">private final OkHttpClient client = new OkHttpClient();</span><br><span class=\"line\"> </span><br><span class=\"line\">public void run() throws Exception &#123;</span><br><span class=\"line\">    Request request = new Request.Builder()</span><br><span class=\"line\">        .url(&quot;http://httpbin.org/delay/2&quot;) // This URL is served with a 2 second delay.</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"> </span><br><span class=\"line\">    final long startNanos = System.nanoTime();</span><br><span class=\"line\">    final Call call = client.newCall(request);</span><br><span class=\"line\"> </span><br><span class=\"line\">    // Schedule a job to cancel the call in 1 second.</span><br><span class=\"line\">    executor.schedule(new Runnable() &#123;</span><br><span class=\"line\">      @Override public void run() &#123;</span><br><span class=\"line\">        System.out.printf(&quot;%.2f Canceling call.%n&quot;, (System.nanoTime() - startNanos) / 1e9f);</span><br><span class=\"line\">        call.cancel();</span><br><span class=\"line\">        System.out.printf(&quot;%.2f Canceled call.%n&quot;, (System.nanoTime() - startNanos) / 1e9f);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;, 1, TimeUnit.SECONDS);</span><br><span class=\"line\"> </span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      System.out.printf(&quot;%.2f Executing call.%n&quot;, (System.nanoTime() - startNanos) / 1e9f);</span><br><span class=\"line\">      Response response = call.execute();</span><br><span class=\"line\">      System.out.printf(&quot;%.2f Call was expected to fail, but completed: %s%n&quot;,</span><br><span class=\"line\">          (System.nanoTime() - startNanos) / 1e9f, response);</span><br><span class=\"line\">    &#125; catch (IOException e) &#123;</span><br><span class=\"line\">      System.out.printf(&quot;%.2f Call failed as expected: %s%n&quot;,</span><br><span class=\"line\">          (System.nanoTime() - startNanos) / 1e9f, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"超时\"><a href=\"#超时\" class=\"headerlink\" title=\"超时\"></a>超时</h2><p>没有响应时使用超时结束call。没有响应的原因可能是客户点链接问题、服务器可用性问题或者这之间的其他东西。OkHttp支持连接，读取和写入超时</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final OkHttpClient client;</span><br><span class=\"line\"> </span><br><span class=\"line\">public ConfigureTimeouts() throws Exception &#123;</span><br><span class=\"line\">    client = new OkHttpClient();</span><br><span class=\"line\">    client.setConnectTimeout(10, TimeUnit.SECONDS);</span><br><span class=\"line\">    client.setWriteTimeout(10, TimeUnit.SECONDS);</span><br><span class=\"line\">    client.setReadTimeout(30, TimeUnit.SECONDS);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">public void run() throws Exception &#123;</span><br><span class=\"line\">    Request request = new Request.Builder()</span><br><span class=\"line\">        .url(&quot;http://httpbin.org/delay/2&quot;) // This URL is served with a 2 second delay.</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"> </span><br><span class=\"line\">    Response response = client.newCall(request).execute();</span><br><span class=\"line\">    System.out.println(&quot;Response completed: &quot; + response);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"每个call的配置\"><a href=\"#每个call的配置\" class=\"headerlink\" title=\"每个call的配置\"></a>每个call的配置</h2><p>使用OkHttpClient，所有的HTTP Client配置包括代理设置、超时设置、缓存设置。当你需要为单个call改变配置的时候，clone 一个 OkHttpClient。这个api将会返回一个浅拷贝（shallow copy），你可以用来单独自定义。下面的例子中，我们让一个请求是500ms的超时、另一个是3000ms的超时。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final OkHttpClient client = new OkHttpClient();</span><br><span class=\"line\"> </span><br><span class=\"line\">public void run() throws Exception &#123;</span><br><span class=\"line\">    Request request = new Request.Builder()</span><br><span class=\"line\">        .url(&quot;http://httpbin.org/delay/1&quot;) // This URL is served with a 1 second delay.</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"> </span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      Response response = client.clone() // Clone to make a customized OkHttp for this request.</span><br><span class=\"line\">          .setReadTimeout(500, TimeUnit.MILLISECONDS)</span><br><span class=\"line\">          .newCall(request)</span><br><span class=\"line\">          .execute();</span><br><span class=\"line\">      System.out.println(&quot;Response 1 succeeded: &quot; + response);</span><br><span class=\"line\">    &#125; catch (IOException e) &#123;</span><br><span class=\"line\">      System.out.println(&quot;Response 1 failed: &quot; + e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      Response response = client.clone() // Clone to make a customized OkHttp for this request.</span><br><span class=\"line\">          .setReadTimeout(3000, TimeUnit.MILLISECONDS)</span><br><span class=\"line\">          .newCall(request)</span><br><span class=\"line\">          .execute();</span><br><span class=\"line\">      System.out.println(&quot;Response 2 succeeded: &quot; + response);</span><br><span class=\"line\">    &#125; catch (IOException e) &#123;</span><br><span class=\"line\">      System.out.println(&quot;Response 2 failed: &quot; + e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"处理验证\"><a href=\"#处理验证\" class=\"headerlink\" title=\"处理验证\"></a>处理验证</h2><p>这部分和HTTP AUTH有关。<br>相关资料：<a href=\"http://blog.csdn.net/wwwsq/article/details/7255062\" target=\"_blank\" rel=\"noopener\">HTTP AUTH 那些事 - 王绍全的博客 - 博客频道 - CSDN.NET</a></p>\n<p>OkHttp会自动重试未验证的请求。当响应是401 Not Authorized时，Authenticator会被要求提供证书。Authenticator的实现中需要建立一个新的包含证书的请求。如果没有证书可用，返回null来跳过尝试。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public List&lt;Challenge&gt; challenges()</span><br><span class=\"line\">Returns the authorization challenges appropriate for this response&apos;s code. </span><br><span class=\"line\">If the response code is 401 unauthorized, </span><br><span class=\"line\">this returns the &quot;WWW-Authenticate&quot; challenges.</span><br><span class=\"line\">If the response code is 407 proxy unauthorized, this returns the &quot;Proxy-Authenticate&quot; challenges.</span><br><span class=\"line\">Otherwise this returns an empty list of challenges.</span><br></pre></td></tr></table></figure>\n<p>当需要实现一个Basic challenge， 使用Credentials.basic(username, password)来编码请求头。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final OkHttpClient client = new OkHttpClient();</span><br><span class=\"line\"> </span><br><span class=\"line\">public void run() throws Exception &#123;</span><br><span class=\"line\">    client.setAuthenticator(new Authenticator() &#123;</span><br><span class=\"line\">      @Override public Request authenticate(Proxy proxy, Response response) &#123;</span><br><span class=\"line\">        System.out.println(&quot;Authenticating for response: &quot; + response);</span><br><span class=\"line\">        System.out.println(&quot;Challenges: &quot; + response.challenges());</span><br><span class=\"line\">        String credential = Credentials.basic(&quot;jesse&quot;, &quot;password1&quot;);</span><br><span class=\"line\">        return response.request().newBuilder()</span><br><span class=\"line\">            .header(&quot;Authorization&quot;, credential)</span><br><span class=\"line\">            .build();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">      @Override public Request authenticateProxy(Proxy proxy, Response response) &#123;</span><br><span class=\"line\">        return null; // Null indicates no attempt to authenticate.</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">    Request request = new Request.Builder()</span><br><span class=\"line\">        .url(&quot;http://publicobject.com/secrets/hellosecret.txt&quot;)</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"> </span><br><span class=\"line\">    Response response = client.newCall(request).execute();</span><br><span class=\"line\">    if (!response.isSuccessful()) throw new IOException(&quot;Unexpected code &quot; + response);</span><br><span class=\"line\"> </span><br><span class=\"line\">    System.out.println(response.body().string());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>转自 <a href=\"http://www.cnblogs.com/ct2011/p/4001708.html\" target=\"_blank\" rel=\"noopener\">OkHttp使用介绍</a> 同时整合了 <a href=\"http://www.cnblogs.com/ct2011/p/3997368.html\" target=\"_blank\" rel=\"noopener\">OkHttp使用进阶</a> 这篇文章以及其中的评论。</p>"},{"title":"喜马拉雅WiFi音响绑定及通讯协议初稿","date":"2016-05-11T14:54:48.000Z","_content":"喜马拉雅WiFi音响绑定及通讯协议初稿\n<!--more-->\n# **通讯协议**\n|0x5A|数据长度|框架版本|协议类型|设备编码|Mac地址|数据帧序列号|保留字|数据类型|数据内容|检验码FCS|\n|----|:----:|\n|1字节|2字节|1字节|1字节|8字节|6字节|4字节|8字节|2字节|N字节|2字节|\n\n \n\n# **通讯Json格式**：\n\t\n\t{ \n     \"cmd\": 0 ,//命令码\n\t\"code\": 0,\t//返回码\n\t\"msg\": \"\",\t//状态消息\n\t\"data\": ......\t//数据节点\n\t}\n\n\n## **参数说明**\n\n|参数名称|是否必须|字段类型|参数说明|\n|:----|:----|:----|:----|\n|cmd|YES|int|命令码|\n|code|NO|int|返回码|\n|msg|NO|String|状态消息|\n|data|NO|String|数据节点|\n\n## **全局命令码**\n> 每一种操作对用一个命令码，用作标识指令。\n \n#### 全局命令码说明如下：\n\n|命令码（十六进制）\t|十进制\t|说明|\n|:----|:----|:----|:----|\n|0x0001\t|1|\t添加歌曲|\n|0x0002\t|2|\tApp查询歌曲列表|\n|0x0003\t|3|\t升级操作|\n|0x0004\t|4|\t播放|\n|0x0005\t|5|\t关机|\n|0x0006\t|6|\t静音/解除静音|\n|0x0007\t|7|\t音量+|\n|0x0008\t|8|\t音量-|\n|0x0009\t|9|\t切换aux状态|\n|0x000a\t|10|\t下一曲|\n|0x000b\t|11|\t上一曲|\n|0x000c\t|12|\t暂停|\n|0x000d\t|13|\tApp查询播放状态|\n|0x000e\t|14|\tWIFI 无线简易连接|\n|0x000f\t|15|\t设备回复心跳|\n|0x400f\t|16399|\tApp发送心跳|\n|0x0011\t|17|palyMode(顺序播放/随机播放/列表循环/单曲循环/)|\n|0x0012\t|18|\t音量设置（直接设置音量值）|\n|0x0013\t|19|\t设备推送播放状态|\n|0x0014\t|20|\t设备推送播放列表|\n|0x0015|21|\t拖拽进度条|\n\n\n## **全局返回码**\n\n> 每次调用接口时，可能获得正确或错误的返回码，可以根据返回码信息调试接口，排查错误。\n####全局返回码说明如下：\n|0|\t请求成功|\n|:-----|:---|\n|200|\t无错误|\n|400\t|不支持此接口|\n|401\t|JSON数据解析错误|\n\n\n## **示例**\n### **字符串**\n\n    { \n    \"cmd\": 0x0001 ,//命令码\n    \"code\": 0,  //返回码\n    \"msg\": \"\",  //状态消息\n    \"data\": \"This is string\"  //数据节点\n    }\n\n### **整形参数**\n\n    { \n    \"cmd\": 0x0001 ,//命令码\n    \"code\": 0,  //返回码\n    \"msg\": \"\",  //状态消息\n    \"data\": 1  //数据节点\n    }\n\n### **对象**\n    { \n    \"cmd\": 0x0001 ,//命令码\n    \"code\": 0,  //返回码\n    \"msg\": \"\",  //状态消息\n    \"data\":  {\n          \"ssid\":\"TP-link\",  //连接的路由名称\n          \"password\":\"12345678\",  //路由密码,需要加密\n      }  \n    }\n\n### **数组**\n    { \n    \"cmd\": 0x001 ,//命令码\n    \"code\": 0,  //返回码\n    \"msg\": \"\",  //状态消息\n    \"data\":[\n      {\n            \"id\"      ：   \"0\"\n            \"name\" ： “xxxx\",\n            \"artist\" ： “xxxx\",\n            \"album_title\"： “xxxx\",\n            \"cover_url_small”：“xxxx\",\n            \"cover_url_middle\":\"xxxx\",\n            \"cover_url_large\":\"xxxx\",\n            \"url\":\"xxxxxxxxx\"  {详细规格见规格说明url部分},\n      },\n      {\n            \"id\":\"1\"\n            \"name\":\"xxxx1\",\n            \"artist\":\"xxxx1\",\n            \"album\":\"xxxx1\",\n            \"cover_url_small\":\"xxxx\",\n            \"cover_url_middle\":\"xxxx\",\n            \"cover_url_large\":\"xxxx\",\n            \"url\":\"xxxxxxxxxx\"{详细规格见规格说明url部分},\n      }\n       ]\n    }\n\n## **指令说明**\n### **一、设备基础指令**\n\n 1. **App扫描设备**\n|0x5A\t|数据长度\t|框架版本\t|协议类型\t|设备编码\t|Mac地址\t|数据帧序列号\t|保留字\t|数据类型\t|数据内容\t|检验码FCS|\n|:----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|\n|5A\t|0022|\t40|\t01|\t0000000000000000|\t000000000000|\t20000000|\t0000000000000000\t|0405|\tdata|\t381a|\n - <font color=#c00>**命令字：0x0405**</font>\n - <font color=#c00>**data区：NULL**</font>\n\n 2. **设备回复自身信息**\n|0x5A\t|数据长度\t|框架版本\t|协议类型\t|设备编码\t|Mac地址\t|数据帧序列号\t|保留字\t|数据类型\t|数据内容\t|检验码FCS|\n|:----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|\n|5A\t|xxxx\t|\t40|\t01|\t00000199001b0300\t|\td8f710e019b0\t|\t00000000|\t0000000000000000\t|0305\t|\tdata|\txxxx|\n\n - <font color=#c00>**命令字：0x0305**</font>\n -  <font color=#c00>**厂商ID：0x0199** </font>\n -  <font color=#c00>**大分类：0x1b**  </font>\n -  <font color=#c00>**小分类：0x03**</font> \n\n 3. **App发送心跳包**\n|0x5A\t|数据长度\t|框架版本\t|协议类型\t|设备编码\t|Mac地址\t|数据帧序列号\t|保留字\t|数据类型\t|数据内容\t|检验码FCS|\n|:----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|\n|5A\t|xxxx\t|\t40|\t01|\t0000000000000000|\t000000000000|\t20000000|\t0000000000000000\t|0104|\tdata|\txxxx|\n\n -  <font color=#c00>**命令字：0x0104**</font> \n -  <font color=#c00>**data区：json**</font> \n\n示例：\n\t\n\t\t{ \n\t     \"cmd\": 0x400f ,//命令码\n\t\t\"code\": 0,\t//返回码\n\t\t\"msg\": \"\",\t//状态消息\n\t\t\"data\": ......\t//数据节点\n\t\t}\n\n\t\n4.  **设备回复心跳**\n|0x5A\t|数据长度\t|框架版本\t|协议类型\t|设备编码\t|Mac地址\t|数据帧序列号\t|保留字\t|数据类型\t|数据内容\t|检验码FCS|\n|:----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|\n|5A\t|xxxx\t|\t40|\t01|\t0000000000000000|\t000000000000|\t00000000|\t0000000000000000\t|0204|\tdata|\txxxx|\n\n\n - <font color=#c00> **命令字：0x0204**</font> \n -  <font color=#c00> **data区：json**</font> \n\n\n示例：\n\t\n\t\t{ \n\t     \"cmd\": 0x000f ,//命令码\n\t\t\"code\": 0,\t//返回码\n\t\t\"msg\": \"\",\t//状态消息\n\t\t\"data\":  {\n\t              \"deviceId\": \"SPK设备序列号\"\n\t          }  \n\t\t}\n\n### **二、App主动控制终端指令**\n\n**1.App控制终端**\n\n|0x5A\t|数据长度\t|框架版本\t|协议类型\t|设备编码\t|Mac地址\t|数据帧序列号\t|保留字\t|数据类型\t|数据内容\t|检验码FCS|\n|:----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|\n|5A\t|xxxx\t|\t40|\t01|\t0000000000000000|\t000000000000|\t00000000|\t0000000000000000\t|0104|\tdata|\txxxx|\n\n\n -  <font color=#c00> **命令字：0x0104**</font> \n -  <font color=#c00> **data区：json数据**</font> \n\n 示例：\n\t\n\t\t{ \n\t     \"cmd\": 0x00xx ,//命令码\n\t\t\"code\": 0,\t//返回码\n\t\t\"msg\": \"\",\t//状态消息\n\t\t\"data\": ......\t//数据节点\n\t\t}\n\n**2.终端回复App**\n\n|0x5A\t|数据长度\t|框架版本\t|协议类型\t|设备编码\t|Mac地址\t|数据帧序列号\t|保留字\t|数据类型\t|数据内容\t|检验码FCS|\n|:----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|\n|5A\t|xxxx\t|\t40|\t01|\t0000000000000000|\t000000000000|\t00000000|\t0000000000000000\t|0204|\tdata|\txxxx|\n\n\n -  <font color=#c00> **命令字：0x0204**</font> \n -  <font color=#c00> **data区：json数据**</font> \n\n 示例：\n\t\n\t\t{ \n\t     \"cmd\": 0x00xx ,//命令码\n\t\t\"code\": 0,\t//返回码\n\t\t\"msg\": \"\",\t//状态消息\n\t\t\"data\": ......\t//数据节点\n\t\t}\n\n### **三、终端主动发送控制数据给App**\n**1.周期上传运行数据**\n\n|0x5A|数据长度|框架版本|协议类型|设备编码|Mac地址|数据帧序列号|保留字|数据类型|数据内容|检验码FCS|\n|:----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|\n|5A\t|xxxx|40|01|0000000000000000|000000000000|00000000|0000000000000000|0105|data|xxxx|\n\n\n -  <font color=#c00> **命令字：0x0105**</font> \n -  <font color=#c00> **data区：json数据**</font> \n\n 示例：\n\t\n\t\t{ \n\t     \"cmd\": 0x0013 ,//命令码\n\t\t\"code\": 0,\t//返回码\n\t\t\"msg\": \"\",\t//状态消息\n\t\t\"data\": ......\t//数据节点\n\t\t}\n\n\n# **音箱数据模型**\n## **一、歌单**\n**参数说明**\n\n|参数名称|是否必须\t|字段类型|参数说明|\n|:----|:-----|:-----|:-----|\n|id\t|是|\tint|\t歌曲ID|\n|name|\t否|\tstring\t|演唱者|\n|artist|\t否|\tString\t|艺术家|\n|album_title|\t否|\tString\t|专辑标题|\n|lrc_id|\t否\t|String\t|歌词ID|\n|image_url_small|\t否\t|String|\t歌曲海报1|\n|image_url_middle|\t否|\tString|\t歌曲海报2|\n|image_url_large|\t否\t|String|\t歌曲海报3|\n|mac|\t否\t|String\t|Mac地址|\n|total_time\t|否\t|int|\t歌曲时长|\n|album_id|\t否|\tint|\t专辑ID|\n|utype\t|否|\tint|\t比如 虾米音乐 考虑 喜马拉雅 之类的|\n|uri\t|是|\tint\t|歌曲URL|\n|downloadurl|\t是\t|String|\t下载url|\n\n\n## **二、播放状态**\n**参数说明**\n|参数名称|是否必须\t|字段类型|参数说明|\n|:----|:-----|:-----|:-----|\n|id\t是\t|int|\t歌曲ID|\n|mtype\t|是\t|String\t|虾米，百度云盘，本地音乐…|\n|p_status|\t否\t|int\t|“0/1/2/3/4”, //准备播放，播放,暂停,停止,播放结束(用于网络收音机)|\n|type|\t否\t|String|\t当前播放源(预设preset),收藏,实时推送|\n|name\t|否\t|string\t|演唱者|\n|artist\t|否\t|String|\t艺术家|\n|album|\t否\t|String|\t专辑|\n|next_id|\t是|\tint|\t下一首歌曲id|\n|total_time|\t是|\tint|\t歌曲总时间|\n|current_time|\t是|\tint|\t歌曲当前播放时间|\n|play_mode|\t否|\tint|\t模式（//顺序播放/随机播放列表循环/单曲循环/）|\n|volume\t|是\t|int|\t音量|\n\n\n# **绑定流程**\n\n\n![这里写图片描述](http://img.blog.csdn.net/20160226142156953)\n***[点击看大图](http://img.blog.csdn.net/20160226142156953)***\n\n\n\n\n[**\\[原文链接地址\\]http://blog.csdn.net/xxl6097/article/details/50127949**](http://blog.csdn.net/xxl6097/article/details/50127949)\n\n\n","source":"_posts/ximalaya.md","raw":"---\ntitle: 喜马拉雅WiFi音响绑定及通讯协议初稿\ndate: 2016-05-11 22:54:48\ntags: [智能家居,喜马拉雅,Andorid]\ncategories: 智能家居\n---\n喜马拉雅WiFi音响绑定及通讯协议初稿\n<!--more-->\n# **通讯协议**\n|0x5A|数据长度|框架版本|协议类型|设备编码|Mac地址|数据帧序列号|保留字|数据类型|数据内容|检验码FCS|\n|----|:----:|\n|1字节|2字节|1字节|1字节|8字节|6字节|4字节|8字节|2字节|N字节|2字节|\n\n \n\n# **通讯Json格式**：\n\t\n\t{ \n     \"cmd\": 0 ,//命令码\n\t\"code\": 0,\t//返回码\n\t\"msg\": \"\",\t//状态消息\n\t\"data\": ......\t//数据节点\n\t}\n\n\n## **参数说明**\n\n|参数名称|是否必须|字段类型|参数说明|\n|:----|:----|:----|:----|\n|cmd|YES|int|命令码|\n|code|NO|int|返回码|\n|msg|NO|String|状态消息|\n|data|NO|String|数据节点|\n\n## **全局命令码**\n> 每一种操作对用一个命令码，用作标识指令。\n \n#### 全局命令码说明如下：\n\n|命令码（十六进制）\t|十进制\t|说明|\n|:----|:----|:----|:----|\n|0x0001\t|1|\t添加歌曲|\n|0x0002\t|2|\tApp查询歌曲列表|\n|0x0003\t|3|\t升级操作|\n|0x0004\t|4|\t播放|\n|0x0005\t|5|\t关机|\n|0x0006\t|6|\t静音/解除静音|\n|0x0007\t|7|\t音量+|\n|0x0008\t|8|\t音量-|\n|0x0009\t|9|\t切换aux状态|\n|0x000a\t|10|\t下一曲|\n|0x000b\t|11|\t上一曲|\n|0x000c\t|12|\t暂停|\n|0x000d\t|13|\tApp查询播放状态|\n|0x000e\t|14|\tWIFI 无线简易连接|\n|0x000f\t|15|\t设备回复心跳|\n|0x400f\t|16399|\tApp发送心跳|\n|0x0011\t|17|palyMode(顺序播放/随机播放/列表循环/单曲循环/)|\n|0x0012\t|18|\t音量设置（直接设置音量值）|\n|0x0013\t|19|\t设备推送播放状态|\n|0x0014\t|20|\t设备推送播放列表|\n|0x0015|21|\t拖拽进度条|\n\n\n## **全局返回码**\n\n> 每次调用接口时，可能获得正确或错误的返回码，可以根据返回码信息调试接口，排查错误。\n####全局返回码说明如下：\n|0|\t请求成功|\n|:-----|:---|\n|200|\t无错误|\n|400\t|不支持此接口|\n|401\t|JSON数据解析错误|\n\n\n## **示例**\n### **字符串**\n\n    { \n    \"cmd\": 0x0001 ,//命令码\n    \"code\": 0,  //返回码\n    \"msg\": \"\",  //状态消息\n    \"data\": \"This is string\"  //数据节点\n    }\n\n### **整形参数**\n\n    { \n    \"cmd\": 0x0001 ,//命令码\n    \"code\": 0,  //返回码\n    \"msg\": \"\",  //状态消息\n    \"data\": 1  //数据节点\n    }\n\n### **对象**\n    { \n    \"cmd\": 0x0001 ,//命令码\n    \"code\": 0,  //返回码\n    \"msg\": \"\",  //状态消息\n    \"data\":  {\n          \"ssid\":\"TP-link\",  //连接的路由名称\n          \"password\":\"12345678\",  //路由密码,需要加密\n      }  \n    }\n\n### **数组**\n    { \n    \"cmd\": 0x001 ,//命令码\n    \"code\": 0,  //返回码\n    \"msg\": \"\",  //状态消息\n    \"data\":[\n      {\n            \"id\"      ：   \"0\"\n            \"name\" ： “xxxx\",\n            \"artist\" ： “xxxx\",\n            \"album_title\"： “xxxx\",\n            \"cover_url_small”：“xxxx\",\n            \"cover_url_middle\":\"xxxx\",\n            \"cover_url_large\":\"xxxx\",\n            \"url\":\"xxxxxxxxx\"  {详细规格见规格说明url部分},\n      },\n      {\n            \"id\":\"1\"\n            \"name\":\"xxxx1\",\n            \"artist\":\"xxxx1\",\n            \"album\":\"xxxx1\",\n            \"cover_url_small\":\"xxxx\",\n            \"cover_url_middle\":\"xxxx\",\n            \"cover_url_large\":\"xxxx\",\n            \"url\":\"xxxxxxxxxx\"{详细规格见规格说明url部分},\n      }\n       ]\n    }\n\n## **指令说明**\n### **一、设备基础指令**\n\n 1. **App扫描设备**\n|0x5A\t|数据长度\t|框架版本\t|协议类型\t|设备编码\t|Mac地址\t|数据帧序列号\t|保留字\t|数据类型\t|数据内容\t|检验码FCS|\n|:----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|\n|5A\t|0022|\t40|\t01|\t0000000000000000|\t000000000000|\t20000000|\t0000000000000000\t|0405|\tdata|\t381a|\n - <font color=#c00>**命令字：0x0405**</font>\n - <font color=#c00>**data区：NULL**</font>\n\n 2. **设备回复自身信息**\n|0x5A\t|数据长度\t|框架版本\t|协议类型\t|设备编码\t|Mac地址\t|数据帧序列号\t|保留字\t|数据类型\t|数据内容\t|检验码FCS|\n|:----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|\n|5A\t|xxxx\t|\t40|\t01|\t00000199001b0300\t|\td8f710e019b0\t|\t00000000|\t0000000000000000\t|0305\t|\tdata|\txxxx|\n\n - <font color=#c00>**命令字：0x0305**</font>\n -  <font color=#c00>**厂商ID：0x0199** </font>\n -  <font color=#c00>**大分类：0x1b**  </font>\n -  <font color=#c00>**小分类：0x03**</font> \n\n 3. **App发送心跳包**\n|0x5A\t|数据长度\t|框架版本\t|协议类型\t|设备编码\t|Mac地址\t|数据帧序列号\t|保留字\t|数据类型\t|数据内容\t|检验码FCS|\n|:----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|\n|5A\t|xxxx\t|\t40|\t01|\t0000000000000000|\t000000000000|\t20000000|\t0000000000000000\t|0104|\tdata|\txxxx|\n\n -  <font color=#c00>**命令字：0x0104**</font> \n -  <font color=#c00>**data区：json**</font> \n\n示例：\n\t\n\t\t{ \n\t     \"cmd\": 0x400f ,//命令码\n\t\t\"code\": 0,\t//返回码\n\t\t\"msg\": \"\",\t//状态消息\n\t\t\"data\": ......\t//数据节点\n\t\t}\n\n\t\n4.  **设备回复心跳**\n|0x5A\t|数据长度\t|框架版本\t|协议类型\t|设备编码\t|Mac地址\t|数据帧序列号\t|保留字\t|数据类型\t|数据内容\t|检验码FCS|\n|:----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|\n|5A\t|xxxx\t|\t40|\t01|\t0000000000000000|\t000000000000|\t00000000|\t0000000000000000\t|0204|\tdata|\txxxx|\n\n\n - <font color=#c00> **命令字：0x0204**</font> \n -  <font color=#c00> **data区：json**</font> \n\n\n示例：\n\t\n\t\t{ \n\t     \"cmd\": 0x000f ,//命令码\n\t\t\"code\": 0,\t//返回码\n\t\t\"msg\": \"\",\t//状态消息\n\t\t\"data\":  {\n\t              \"deviceId\": \"SPK设备序列号\"\n\t          }  \n\t\t}\n\n### **二、App主动控制终端指令**\n\n**1.App控制终端**\n\n|0x5A\t|数据长度\t|框架版本\t|协议类型\t|设备编码\t|Mac地址\t|数据帧序列号\t|保留字\t|数据类型\t|数据内容\t|检验码FCS|\n|:----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|\n|5A\t|xxxx\t|\t40|\t01|\t0000000000000000|\t000000000000|\t00000000|\t0000000000000000\t|0104|\tdata|\txxxx|\n\n\n -  <font color=#c00> **命令字：0x0104**</font> \n -  <font color=#c00> **data区：json数据**</font> \n\n 示例：\n\t\n\t\t{ \n\t     \"cmd\": 0x00xx ,//命令码\n\t\t\"code\": 0,\t//返回码\n\t\t\"msg\": \"\",\t//状态消息\n\t\t\"data\": ......\t//数据节点\n\t\t}\n\n**2.终端回复App**\n\n|0x5A\t|数据长度\t|框架版本\t|协议类型\t|设备编码\t|Mac地址\t|数据帧序列号\t|保留字\t|数据类型\t|数据内容\t|检验码FCS|\n|:----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|\n|5A\t|xxxx\t|\t40|\t01|\t0000000000000000|\t000000000000|\t00000000|\t0000000000000000\t|0204|\tdata|\txxxx|\n\n\n -  <font color=#c00> **命令字：0x0204**</font> \n -  <font color=#c00> **data区：json数据**</font> \n\n 示例：\n\t\n\t\t{ \n\t     \"cmd\": 0x00xx ,//命令码\n\t\t\"code\": 0,\t//返回码\n\t\t\"msg\": \"\",\t//状态消息\n\t\t\"data\": ......\t//数据节点\n\t\t}\n\n### **三、终端主动发送控制数据给App**\n**1.周期上传运行数据**\n\n|0x5A|数据长度|框架版本|协议类型|设备编码|Mac地址|数据帧序列号|保留字|数据类型|数据内容|检验码FCS|\n|:----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|:-----|\n|5A\t|xxxx|40|01|0000000000000000|000000000000|00000000|0000000000000000|0105|data|xxxx|\n\n\n -  <font color=#c00> **命令字：0x0105**</font> \n -  <font color=#c00> **data区：json数据**</font> \n\n 示例：\n\t\n\t\t{ \n\t     \"cmd\": 0x0013 ,//命令码\n\t\t\"code\": 0,\t//返回码\n\t\t\"msg\": \"\",\t//状态消息\n\t\t\"data\": ......\t//数据节点\n\t\t}\n\n\n# **音箱数据模型**\n## **一、歌单**\n**参数说明**\n\n|参数名称|是否必须\t|字段类型|参数说明|\n|:----|:-----|:-----|:-----|\n|id\t|是|\tint|\t歌曲ID|\n|name|\t否|\tstring\t|演唱者|\n|artist|\t否|\tString\t|艺术家|\n|album_title|\t否|\tString\t|专辑标题|\n|lrc_id|\t否\t|String\t|歌词ID|\n|image_url_small|\t否\t|String|\t歌曲海报1|\n|image_url_middle|\t否|\tString|\t歌曲海报2|\n|image_url_large|\t否\t|String|\t歌曲海报3|\n|mac|\t否\t|String\t|Mac地址|\n|total_time\t|否\t|int|\t歌曲时长|\n|album_id|\t否|\tint|\t专辑ID|\n|utype\t|否|\tint|\t比如 虾米音乐 考虑 喜马拉雅 之类的|\n|uri\t|是|\tint\t|歌曲URL|\n|downloadurl|\t是\t|String|\t下载url|\n\n\n## **二、播放状态**\n**参数说明**\n|参数名称|是否必须\t|字段类型|参数说明|\n|:----|:-----|:-----|:-----|\n|id\t是\t|int|\t歌曲ID|\n|mtype\t|是\t|String\t|虾米，百度云盘，本地音乐…|\n|p_status|\t否\t|int\t|“0/1/2/3/4”, //准备播放，播放,暂停,停止,播放结束(用于网络收音机)|\n|type|\t否\t|String|\t当前播放源(预设preset),收藏,实时推送|\n|name\t|否\t|string\t|演唱者|\n|artist\t|否\t|String|\t艺术家|\n|album|\t否\t|String|\t专辑|\n|next_id|\t是|\tint|\t下一首歌曲id|\n|total_time|\t是|\tint|\t歌曲总时间|\n|current_time|\t是|\tint|\t歌曲当前播放时间|\n|play_mode|\t否|\tint|\t模式（//顺序播放/随机播放列表循环/单曲循环/）|\n|volume\t|是\t|int|\t音量|\n\n\n# **绑定流程**\n\n\n![这里写图片描述](http://img.blog.csdn.net/20160226142156953)\n***[点击看大图](http://img.blog.csdn.net/20160226142156953)***\n\n\n\n\n[**\\[原文链接地址\\]http://blog.csdn.net/xxl6097/article/details/50127949**](http://blog.csdn.net/xxl6097/article/details/50127949)\n\n\n","slug":"ximalaya","published":1,"updated":"2018-04-03T07:05:42.977Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfjja6q0001t64v41jjxznep","content":"<p>喜马拉雅WiFi音响绑定及通讯协议初稿<br><a id=\"more\"></a></p>\n<h1 id=\"通讯协议\"><a href=\"#通讯协议\" class=\"headerlink\" title=\"通讯协议\"></a><strong>通讯协议</strong></h1><table>\n<thead>\n<tr>\n<th>0x5A</th>\n<th style=\"text-align:center\">数据长度</th>\n<th>框架版本</th>\n<th>协议类型</th>\n<th>设备编码</th>\n<th>Mac地址</th>\n<th>数据帧序列号</th>\n<th>保留字</th>\n<th>数据类型</th>\n<th>数据内容</th>\n<th>检验码FCS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1字节</td>\n<td style=\"text-align:center\">2字节</td>\n<td>1字节</td>\n<td>1字节</td>\n<td>8字节</td>\n<td>6字节</td>\n<td>4字节</td>\n<td>8字节</td>\n<td>2字节</td>\n<td>N字节</td>\n<td>2字节</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"通讯Json格式：\"><a href=\"#通讯Json格式：\" class=\"headerlink\" title=\"通讯Json格式：\"></a><strong>通讯Json格式</strong>：</h1><pre><code>{ \n &quot;cmd&quot;: 0 ,//命令码\n&quot;code&quot;: 0,    //返回码\n&quot;msg&quot;: &quot;&quot;,    //状态消息\n&quot;data&quot;: ......    //数据节点\n}\n</code></pre><h2 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a><strong>参数说明</strong></h2><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数名称</th>\n<th style=\"text-align:left\">是否必须</th>\n<th style=\"text-align:left\">字段类型</th>\n<th style=\"text-align:left\">参数说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">cmd</td>\n<td style=\"text-align:left\">YES</td>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">命令码</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">code</td>\n<td style=\"text-align:left\">NO</td>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">返回码</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">msg</td>\n<td style=\"text-align:left\">NO</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">状态消息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">data</td>\n<td style=\"text-align:left\">NO</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">数据节点</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"全局命令码\"><a href=\"#全局命令码\" class=\"headerlink\" title=\"全局命令码\"></a><strong>全局命令码</strong></h2><blockquote>\n<p>每一种操作对用一个命令码，用作标识指令。</p>\n</blockquote>\n<h4 id=\"全局命令码说明如下：\"><a href=\"#全局命令码说明如下：\" class=\"headerlink\" title=\"全局命令码说明如下：\"></a>全局命令码说明如下：</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令码（十六进制）</th>\n<th style=\"text-align:left\">十进制</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">0x0001</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">添加歌曲</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x0002</td>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">App查询歌曲列表</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x0003</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">升级操作</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x0004</td>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">播放</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x0005</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">关机</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x0006</td>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\">静音/解除静音</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x0007</td>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:left\">音量+</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x0008</td>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\">音量-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x0009</td>\n<td style=\"text-align:left\">9</td>\n<td style=\"text-align:left\">切换aux状态</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x000a</td>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">下一曲</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x000b</td>\n<td style=\"text-align:left\">11</td>\n<td style=\"text-align:left\">上一曲</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x000c</td>\n<td style=\"text-align:left\">12</td>\n<td style=\"text-align:left\">暂停</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x000d</td>\n<td style=\"text-align:left\">13</td>\n<td style=\"text-align:left\">App查询播放状态</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x000e</td>\n<td style=\"text-align:left\">14</td>\n<td style=\"text-align:left\">WIFI 无线简易连接</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x000f</td>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\">设备回复心跳</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x400f</td>\n<td style=\"text-align:left\">16399</td>\n<td style=\"text-align:left\">App发送心跳</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x0011</td>\n<td style=\"text-align:left\">17</td>\n<td style=\"text-align:left\">palyMode(顺序播放/随机播放/列表循环/单曲循环/)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x0012</td>\n<td style=\"text-align:left\">18</td>\n<td style=\"text-align:left\">音量设置（直接设置音量值）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x0013</td>\n<td style=\"text-align:left\">19</td>\n<td style=\"text-align:left\">设备推送播放状态</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x0014</td>\n<td style=\"text-align:left\">20</td>\n<td style=\"text-align:left\">设备推送播放列表</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x0015</td>\n<td style=\"text-align:left\">21</td>\n<td style=\"text-align:left\">拖拽进度条</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"全局返回码\"><a href=\"#全局返回码\" class=\"headerlink\" title=\"全局返回码\"></a><strong>全局返回码</strong></h2><blockquote>\n<p>每次调用接口时，可能获得正确或错误的返回码，可以根据返回码信息调试接口，排查错误。</p>\n</blockquote>\n<p>####全局返回码说明如下：<br>|0|    请求成功|<br>|:—–|:—|<br>|200|    无错误|<br>|400    |不支持此接口|<br>|401    |JSON数据解析错误|</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a><strong>示例</strong></h2><h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a><strong>字符串</strong></h3><pre><code>{ \n&quot;cmd&quot;: 0x0001 ,//命令码\n&quot;code&quot;: 0,  //返回码\n&quot;msg&quot;: &quot;&quot;,  //状态消息\n&quot;data&quot;: &quot;This is string&quot;  //数据节点\n}\n</code></pre><h3 id=\"整形参数\"><a href=\"#整形参数\" class=\"headerlink\" title=\"整形参数\"></a><strong>整形参数</strong></h3><pre><code>{ \n&quot;cmd&quot;: 0x0001 ,//命令码\n&quot;code&quot;: 0,  //返回码\n&quot;msg&quot;: &quot;&quot;,  //状态消息\n&quot;data&quot;: 1  //数据节点\n}\n</code></pre><h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a><strong>对象</strong></h3><pre><code>{ \n&quot;cmd&quot;: 0x0001 ,//命令码\n&quot;code&quot;: 0,  //返回码\n&quot;msg&quot;: &quot;&quot;,  //状态消息\n&quot;data&quot;:  {\n      &quot;ssid&quot;:&quot;TP-link&quot;,  //连接的路由名称\n      &quot;password&quot;:&quot;12345678&quot;,  //路由密码,需要加密\n  }  \n}\n</code></pre><h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a><strong>数组</strong></h3><pre><code>{ \n&quot;cmd&quot;: 0x001 ,//命令码\n&quot;code&quot;: 0,  //返回码\n&quot;msg&quot;: &quot;&quot;,  //状态消息\n&quot;data&quot;:[\n  {\n        &quot;id&quot;      ：   &quot;0&quot;\n        &quot;name&quot; ： “xxxx&quot;,\n        &quot;artist&quot; ： “xxxx&quot;,\n        &quot;album_title&quot;： “xxxx&quot;,\n        &quot;cover_url_small”：“xxxx&quot;,\n        &quot;cover_url_middle&quot;:&quot;xxxx&quot;,\n        &quot;cover_url_large&quot;:&quot;xxxx&quot;,\n        &quot;url&quot;:&quot;xxxxxxxxx&quot;  {详细规格见规格说明url部分},\n  },\n  {\n        &quot;id&quot;:&quot;1&quot;\n        &quot;name&quot;:&quot;xxxx1&quot;,\n        &quot;artist&quot;:&quot;xxxx1&quot;,\n        &quot;album&quot;:&quot;xxxx1&quot;,\n        &quot;cover_url_small&quot;:&quot;xxxx&quot;,\n        &quot;cover_url_middle&quot;:&quot;xxxx&quot;,\n        &quot;cover_url_large&quot;:&quot;xxxx&quot;,\n        &quot;url&quot;:&quot;xxxxxxxxxx&quot;{详细规格见规格说明url部分},\n  }\n   ]\n}\n</code></pre><h2 id=\"指令说明\"><a href=\"#指令说明\" class=\"headerlink\" title=\"指令说明\"></a><strong>指令说明</strong></h2><h3 id=\"一、设备基础指令\"><a href=\"#一、设备基础指令\" class=\"headerlink\" title=\"一、设备基础指令\"></a><strong>一、设备基础指令</strong></h3><ol>\n<li><strong>App扫描设备</strong><br>|0x5A    |数据长度    |框架版本    |协议类型    |设备编码    |Mac地址    |数据帧序列号    |保留字    |数据类型    |数据内容    |检验码FCS|<br>|:—-|:—–|:—–|:—–|:—–|:—–|:—–|:—–|:—–|:—–|:—–|<br>|5A    |0022|    40|    01|    0000000000000000|    000000000000|    20000000|    0000000000000000    |0405|    data|    381a|</li>\n</ol>\n<ul>\n<li><font color=\"#c00\"><strong>命令字：0x0405</strong></font></li>\n<li><font color=\"#c00\"><strong>data区：NULL</strong></font>\n</li>\n</ul>\n<ol start=\"2\">\n<li><strong>设备回复自身信息</strong><br>|0x5A    |数据长度    |框架版本    |协议类型    |设备编码    |Mac地址    |数据帧序列号    |保留字    |数据类型    |数据内容    |检验码FCS|<br>|:—-|:—–|:—–|:—–|:—–|:—–|:—–|:—–|:—–|:—–|:—–|<br>|5A    |xxxx    |    40|    01|    00000199001b0300    |    d8f710e019b0    |    00000000|    0000000000000000    |0305    |    data|    xxxx|</li>\n</ol>\n<ul>\n<li><font color=\"#c00\"><strong>命令字：0x0305</strong></font></li>\n<li><font color=\"#c00\"><strong>厂商ID：0x0199</strong> </font></li>\n<li><font color=\"#c00\"><strong>大分类：0x1b</strong>  </font></li>\n<li><font color=\"#c00\"><strong>小分类：0x03</strong></font> \n</li>\n</ul>\n<ol start=\"3\">\n<li><strong>App发送心跳包</strong><br>|0x5A    |数据长度    |框架版本    |协议类型    |设备编码    |Mac地址    |数据帧序列号    |保留字    |数据类型    |数据内容    |检验码FCS|<br>|:—-|:—–|:—–|:—–|:—–|:—–|:—–|:—–|:—–|:—–|:—–|<br>|5A    |xxxx    |    40|    01|    0000000000000000|    000000000000|    20000000|    0000000000000000    |0104|    data|    xxxx|</li>\n</ol>\n<ul>\n<li><font color=\"#c00\"><strong>命令字：0x0104</strong></font> </li>\n<li><font color=\"#c00\"><strong>data区：json</strong></font> \n\n</li>\n</ul>\n<p>示例：</p>\n<pre><code>{ \n &quot;cmd&quot;: 0x400f ,//命令码\n&quot;code&quot;: 0,    //返回码\n&quot;msg&quot;: &quot;&quot;,    //状态消息\n&quot;data&quot;: ......    //数据节点\n}\n</code></pre><ol start=\"4\">\n<li><strong>设备回复心跳</strong><br>|0x5A    |数据长度    |框架版本    |协议类型    |设备编码    |Mac地址    |数据帧序列号    |保留字    |数据类型    |数据内容    |检验码FCS|<br>|:—-|:—–|:—–|:—–|:—–|:—–|:—–|:—–|:—–|:—–|:—–|<br>|5A    |xxxx    |    40|    01|    0000000000000000|    000000000000|    00000000|    0000000000000000    |0204|    data|    xxxx|</li>\n</ol>\n<ul>\n<li><font color=\"#c00\"> <strong>命令字：0x0204</strong></font> </li>\n<li><font color=\"#c00\"> <strong>data区：json</strong></font> \n\n\n</li>\n</ul>\n<p>示例：</p>\n<pre><code>{ \n &quot;cmd&quot;: 0x000f ,//命令码\n&quot;code&quot;: 0,    //返回码\n&quot;msg&quot;: &quot;&quot;,    //状态消息\n&quot;data&quot;:  {\n          &quot;deviceId&quot;: &quot;SPK设备序列号&quot;\n      }  \n}\n</code></pre><h3 id=\"二、App主动控制终端指令\"><a href=\"#二、App主动控制终端指令\" class=\"headerlink\" title=\"二、App主动控制终端指令\"></a><strong>二、App主动控制终端指令</strong></h3><p><strong>1.App控制终端</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">0x5A</th>\n<th style=\"text-align:left\">数据长度</th>\n<th style=\"text-align:left\">框架版本</th>\n<th style=\"text-align:left\">协议类型</th>\n<th style=\"text-align:left\">设备编码</th>\n<th style=\"text-align:left\">Mac地址</th>\n<th style=\"text-align:left\">数据帧序列号</th>\n<th style=\"text-align:left\">保留字</th>\n<th style=\"text-align:left\">数据类型</th>\n<th style=\"text-align:left\">数据内容</th>\n<th style=\"text-align:left\">检验码FCS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">5A</td>\n<td style=\"text-align:left\">xxxx</td>\n<td style=\"text-align:left\">40</td>\n<td style=\"text-align:left\">01</td>\n<td style=\"text-align:left\">0000000000000000</td>\n<td style=\"text-align:left\">000000000000</td>\n<td style=\"text-align:left\">00000000</td>\n<td style=\"text-align:left\">0000000000000000</td>\n<td style=\"text-align:left\">0104</td>\n<td style=\"text-align:left\">data</td>\n<td style=\"text-align:left\">xxxx</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><font color=\"#c00\"> <strong>命令字：0x0104</strong></font> </li>\n<li><font color=\"#c00\"> <strong>data区：json数据</strong></font> \n\n<p>示例：</p>\n<pre><code>{ \n &quot;cmd&quot;: 0x00xx ,//命令码\n&quot;code&quot;: 0,    //返回码\n&quot;msg&quot;: &quot;&quot;,    //状态消息\n&quot;data&quot;: ......    //数据节点\n}\n</code></pre></li>\n</ul>\n<p><strong>2.终端回复App</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">0x5A</th>\n<th style=\"text-align:left\">数据长度</th>\n<th style=\"text-align:left\">框架版本</th>\n<th style=\"text-align:left\">协议类型</th>\n<th style=\"text-align:left\">设备编码</th>\n<th style=\"text-align:left\">Mac地址</th>\n<th style=\"text-align:left\">数据帧序列号</th>\n<th style=\"text-align:left\">保留字</th>\n<th style=\"text-align:left\">数据类型</th>\n<th style=\"text-align:left\">数据内容</th>\n<th style=\"text-align:left\">检验码FCS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">5A</td>\n<td style=\"text-align:left\">xxxx</td>\n<td style=\"text-align:left\">40</td>\n<td style=\"text-align:left\">01</td>\n<td style=\"text-align:left\">0000000000000000</td>\n<td style=\"text-align:left\">000000000000</td>\n<td style=\"text-align:left\">00000000</td>\n<td style=\"text-align:left\">0000000000000000</td>\n<td style=\"text-align:left\">0204</td>\n<td style=\"text-align:left\">data</td>\n<td style=\"text-align:left\">xxxx</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><font color=\"#c00\"> <strong>命令字：0x0204</strong></font> </li>\n<li><font color=\"#c00\"> <strong>data区：json数据</strong></font> \n\n<p>示例：</p>\n<pre><code>{ \n &quot;cmd&quot;: 0x00xx ,//命令码\n&quot;code&quot;: 0,    //返回码\n&quot;msg&quot;: &quot;&quot;,    //状态消息\n&quot;data&quot;: ......    //数据节点\n}\n</code></pre></li>\n</ul>\n<h3 id=\"三、终端主动发送控制数据给App\"><a href=\"#三、终端主动发送控制数据给App\" class=\"headerlink\" title=\"三、终端主动发送控制数据给App\"></a><strong>三、终端主动发送控制数据给App</strong></h3><p><strong>1.周期上传运行数据</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">0x5A</th>\n<th style=\"text-align:left\">数据长度</th>\n<th style=\"text-align:left\">框架版本</th>\n<th style=\"text-align:left\">协议类型</th>\n<th style=\"text-align:left\">设备编码</th>\n<th style=\"text-align:left\">Mac地址</th>\n<th style=\"text-align:left\">数据帧序列号</th>\n<th style=\"text-align:left\">保留字</th>\n<th style=\"text-align:left\">数据类型</th>\n<th style=\"text-align:left\">数据内容</th>\n<th style=\"text-align:left\">检验码FCS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">5A</td>\n<td style=\"text-align:left\">xxxx</td>\n<td style=\"text-align:left\">40</td>\n<td style=\"text-align:left\">01</td>\n<td style=\"text-align:left\">0000000000000000</td>\n<td style=\"text-align:left\">000000000000</td>\n<td style=\"text-align:left\">00000000</td>\n<td style=\"text-align:left\">0000000000000000</td>\n<td style=\"text-align:left\">0105</td>\n<td style=\"text-align:left\">data</td>\n<td style=\"text-align:left\">xxxx</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><font color=\"#c00\"> <strong>命令字：0x0105</strong></font> </li>\n<li><font color=\"#c00\"> <strong>data区：json数据</strong></font> \n\n<p>示例：</p>\n<pre><code>{ \n &quot;cmd&quot;: 0x0013 ,//命令码\n&quot;code&quot;: 0,    //返回码\n&quot;msg&quot;: &quot;&quot;,    //状态消息\n&quot;data&quot;: ......    //数据节点\n}\n</code></pre></li>\n</ul>\n<h1 id=\"音箱数据模型\"><a href=\"#音箱数据模型\" class=\"headerlink\" title=\"音箱数据模型\"></a><strong>音箱数据模型</strong></h1><h2 id=\"一、歌单\"><a href=\"#一、歌单\" class=\"headerlink\" title=\"一、歌单\"></a><strong>一、歌单</strong></h2><p><strong>参数说明</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数名称</th>\n<th style=\"text-align:left\">是否必须</th>\n<th style=\"text-align:left\">字段类型</th>\n<th style=\"text-align:left\">参数说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">id</td>\n<td style=\"text-align:left\">是</td>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">歌曲ID</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">name</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">演唱者</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">artist</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">艺术家</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">album_title</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">专辑标题</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">lrc_id</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">歌词ID</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">image_url_small</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">歌曲海报1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">image_url_middle</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">歌曲海报2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">image_url_large</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">歌曲海报3</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mac</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">Mac地址</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">total_time</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">歌曲时长</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">album_id</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">专辑ID</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">utype</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">比如 虾米音乐 考虑 喜马拉雅 之类的</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">uri</td>\n<td style=\"text-align:left\">是</td>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">歌曲URL</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">downloadurl</td>\n<td style=\"text-align:left\">是</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">下载url</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"二、播放状态\"><a href=\"#二、播放状态\" class=\"headerlink\" title=\"二、播放状态\"></a><strong>二、播放状态</strong></h2><p><strong>参数说明</strong><br>|参数名称|是否必须    |字段类型|参数说明|<br>|:—-|:—–|:—–|:—–|<br>|id    是    |int|    歌曲ID|<br>|mtype    |是    |String    |虾米，百度云盘，本地音乐…|<br>|p_status|    否    |int    |“0/1/2/3/4”, //准备播放，播放,暂停,停止,播放结束(用于网络收音机)|<br>|type|    否    |String|    当前播放源(预设preset),收藏,实时推送|<br>|name    |否    |string    |演唱者|<br>|artist    |否    |String|    艺术家|<br>|album|    否    |String|    专辑|<br>|next_id|    是|    int|    下一首歌曲id|<br>|total_time|    是|    int|    歌曲总时间|<br>|current_time|    是|    int|    歌曲当前播放时间|<br>|play_mode|    否|    int|    模式（//顺序播放/随机播放列表循环/单曲循环/）|<br>|volume    |是    |int|    音量|</p>\n<h1 id=\"绑定流程\"><a href=\"#绑定流程\" class=\"headerlink\" title=\"绑定流程\"></a><strong>绑定流程</strong></h1><p><img src=\"http://img.blog.csdn.net/20160226142156953\" alt=\"这里写图片描述\"><br><strong><em><a href=\"http://img.blog.csdn.net/20160226142156953\" target=\"_blank\" rel=\"noopener\">点击看大图</a></em></strong></p>\n<p><a href=\"http://blog.csdn.net/xxl6097/article/details/50127949\" target=\"_blank\" rel=\"noopener\"><strong>[原文链接地址]http://blog.csdn.net/xxl6097/article/details/50127949</strong></a></p>\n","site":{"data":{"hint":{"new":{"selector":[".menu-reading",".menu-about"]}},"link":{"social":{"weibo":"http://weibo.com/","github":"https://github.com/xxl6097","rss":"/atom.xml"},"extern":{"raytaylorism主题作者的技术博客":"http://raytaylorlin.com/","Github地址（测试友情链接）":"https://github.com/xxl6097"}},"about":{"avatar":"http://uuxia.cn/image/icon.png","name":"你的大名","tag":"Web前端/Android/Java/C++/技术宅","desc":"在浮躁的世界安安静静地敲代码","skills":{"Javascript":8,"Python":6,"invisible-split-line-1":-1,"Node.js":4},"projects":[{"name":"你的项目A","image":"https://d13yacurqjgara.cloudfront.net/users/138819/screenshots/2578899/dribbble_800x600_01_1x.png","tags":["2016年","项目标签"],"description":"你的项目A的简介","link_text":"网站链接","link":"https://dribbble.com/"},{"name":"你的作品B","image":"https://d13yacurqjgara.cloudfront.net/users/4094/screenshots/2578885/time-lords-drib_1x.jpg","description":"你的作品B的简介","tags":["Github","设计"],"link_text":"Github地址","link":"https://github.com/"}],"reward":["http://uuxia.cn/image/wechat.png","http://uuxia.cn/image/alipay.png"]},"reading":{"define":{"readed":"已读","reading":"在读","wanted":"想读"},"contents":{"readed":[{"title":"众妙之门：网站UI设计之道","cover":"http://img3.douban.com/lpic/s23139051.jpg","review":"推荐非UI人士了解UI阅读。","score":"7","doubanLink":"http://book.douban.com/subject/20281463/"},{"title":"JavaScript模式","cover":"http://img5.douban.com/lpic/s11337059.jpg","review":"书很薄，但内容相当实用。","score":"8.5","doubanLink":"http://book.douban.com/subject/11506062/"},{"title":"JavaScript语言精粹","cover":"http://img3.douban.com/lpic/s11373174.jpg","review":"这是一本前端人员的基础书，强烈推荐阅读，而且越早看受益越多！","score":"9.5","doubanLink":"http://book.douban.com/subject/11874748/"}],"reading":[{"title":"网络游戏核心技术与实战","cover":"http://img4.douban.com/lpic/s27881888.jpg","review":"","score":null,"doubanLink":"http://book.douban.com/subject/25850090/"}],"wanted":[{"title":"计算机程序的构造和解释","cover":"http://img4.douban.com/lpic/s1113106.jpg","review":"","score":null,"doubanLink":"http://book.douban.com/subject/1148282/"}]}}}},"excerpt":"<p>喜马拉雅WiFi音响绑定及通讯协议初稿<br></p>","more":"<p></p>\n<h1 id=\"通讯协议\"><a href=\"#通讯协议\" class=\"headerlink\" title=\"通讯协议\"></a><strong>通讯协议</strong></h1><table>\n<thead>\n<tr>\n<th>0x5A</th>\n<th style=\"text-align:center\">数据长度</th>\n<th>框架版本</th>\n<th>协议类型</th>\n<th>设备编码</th>\n<th>Mac地址</th>\n<th>数据帧序列号</th>\n<th>保留字</th>\n<th>数据类型</th>\n<th>数据内容</th>\n<th>检验码FCS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1字节</td>\n<td style=\"text-align:center\">2字节</td>\n<td>1字节</td>\n<td>1字节</td>\n<td>8字节</td>\n<td>6字节</td>\n<td>4字节</td>\n<td>8字节</td>\n<td>2字节</td>\n<td>N字节</td>\n<td>2字节</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"通讯Json格式：\"><a href=\"#通讯Json格式：\" class=\"headerlink\" title=\"通讯Json格式：\"></a><strong>通讯Json格式</strong>：</h1><pre><code>{ \n &quot;cmd&quot;: 0 ,//命令码\n&quot;code&quot;: 0,    //返回码\n&quot;msg&quot;: &quot;&quot;,    //状态消息\n&quot;data&quot;: ......    //数据节点\n}\n</code></pre><h2 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a><strong>参数说明</strong></h2><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数名称</th>\n<th style=\"text-align:left\">是否必须</th>\n<th style=\"text-align:left\">字段类型</th>\n<th style=\"text-align:left\">参数说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">cmd</td>\n<td style=\"text-align:left\">YES</td>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">命令码</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">code</td>\n<td style=\"text-align:left\">NO</td>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">返回码</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">msg</td>\n<td style=\"text-align:left\">NO</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">状态消息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">data</td>\n<td style=\"text-align:left\">NO</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">数据节点</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"全局命令码\"><a href=\"#全局命令码\" class=\"headerlink\" title=\"全局命令码\"></a><strong>全局命令码</strong></h2><blockquote>\n<p>每一种操作对用一个命令码，用作标识指令。</p>\n</blockquote>\n<h4 id=\"全局命令码说明如下：\"><a href=\"#全局命令码说明如下：\" class=\"headerlink\" title=\"全局命令码说明如下：\"></a>全局命令码说明如下：</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令码（十六进制）</th>\n<th style=\"text-align:left\">十进制</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">0x0001</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">添加歌曲</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x0002</td>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">App查询歌曲列表</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x0003</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">升级操作</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x0004</td>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">播放</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x0005</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">关机</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x0006</td>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\">静音/解除静音</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x0007</td>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:left\">音量+</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x0008</td>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\">音量-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x0009</td>\n<td style=\"text-align:left\">9</td>\n<td style=\"text-align:left\">切换aux状态</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x000a</td>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">下一曲</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x000b</td>\n<td style=\"text-align:left\">11</td>\n<td style=\"text-align:left\">上一曲</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x000c</td>\n<td style=\"text-align:left\">12</td>\n<td style=\"text-align:left\">暂停</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x000d</td>\n<td style=\"text-align:left\">13</td>\n<td style=\"text-align:left\">App查询播放状态</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x000e</td>\n<td style=\"text-align:left\">14</td>\n<td style=\"text-align:left\">WIFI 无线简易连接</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x000f</td>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\">设备回复心跳</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x400f</td>\n<td style=\"text-align:left\">16399</td>\n<td style=\"text-align:left\">App发送心跳</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x0011</td>\n<td style=\"text-align:left\">17</td>\n<td style=\"text-align:left\">palyMode(顺序播放/随机播放/列表循环/单曲循环/)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x0012</td>\n<td style=\"text-align:left\">18</td>\n<td style=\"text-align:left\">音量设置（直接设置音量值）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x0013</td>\n<td style=\"text-align:left\">19</td>\n<td style=\"text-align:left\">设备推送播放状态</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x0014</td>\n<td style=\"text-align:left\">20</td>\n<td style=\"text-align:left\">设备推送播放列表</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x0015</td>\n<td style=\"text-align:left\">21</td>\n<td style=\"text-align:left\">拖拽进度条</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"全局返回码\"><a href=\"#全局返回码\" class=\"headerlink\" title=\"全局返回码\"></a><strong>全局返回码</strong></h2><blockquote>\n<p>每次调用接口时，可能获得正确或错误的返回码，可以根据返回码信息调试接口，排查错误。</p>\n</blockquote>\n<p>####全局返回码说明如下：<br>|0|    请求成功|<br>|:—–|:—|<br>|200|    无错误|<br>|400    |不支持此接口|<br>|401    |JSON数据解析错误|</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a><strong>示例</strong></h2><h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a><strong>字符串</strong></h3><pre><code>{ \n&quot;cmd&quot;: 0x0001 ,//命令码\n&quot;code&quot;: 0,  //返回码\n&quot;msg&quot;: &quot;&quot;,  //状态消息\n&quot;data&quot;: &quot;This is string&quot;  //数据节点\n}\n</code></pre><h3 id=\"整形参数\"><a href=\"#整形参数\" class=\"headerlink\" title=\"整形参数\"></a><strong>整形参数</strong></h3><pre><code>{ \n&quot;cmd&quot;: 0x0001 ,//命令码\n&quot;code&quot;: 0,  //返回码\n&quot;msg&quot;: &quot;&quot;,  //状态消息\n&quot;data&quot;: 1  //数据节点\n}\n</code></pre><h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a><strong>对象</strong></h3><pre><code>{ \n&quot;cmd&quot;: 0x0001 ,//命令码\n&quot;code&quot;: 0,  //返回码\n&quot;msg&quot;: &quot;&quot;,  //状态消息\n&quot;data&quot;:  {\n      &quot;ssid&quot;:&quot;TP-link&quot;,  //连接的路由名称\n      &quot;password&quot;:&quot;12345678&quot;,  //路由密码,需要加密\n  }  \n}\n</code></pre><h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a><strong>数组</strong></h3><pre><code>{ \n&quot;cmd&quot;: 0x001 ,//命令码\n&quot;code&quot;: 0,  //返回码\n&quot;msg&quot;: &quot;&quot;,  //状态消息\n&quot;data&quot;:[\n  {\n        &quot;id&quot;      ：   &quot;0&quot;\n        &quot;name&quot; ： “xxxx&quot;,\n        &quot;artist&quot; ： “xxxx&quot;,\n        &quot;album_title&quot;： “xxxx&quot;,\n        &quot;cover_url_small”：“xxxx&quot;,\n        &quot;cover_url_middle&quot;:&quot;xxxx&quot;,\n        &quot;cover_url_large&quot;:&quot;xxxx&quot;,\n        &quot;url&quot;:&quot;xxxxxxxxx&quot;  {详细规格见规格说明url部分},\n  },\n  {\n        &quot;id&quot;:&quot;1&quot;\n        &quot;name&quot;:&quot;xxxx1&quot;,\n        &quot;artist&quot;:&quot;xxxx1&quot;,\n        &quot;album&quot;:&quot;xxxx1&quot;,\n        &quot;cover_url_small&quot;:&quot;xxxx&quot;,\n        &quot;cover_url_middle&quot;:&quot;xxxx&quot;,\n        &quot;cover_url_large&quot;:&quot;xxxx&quot;,\n        &quot;url&quot;:&quot;xxxxxxxxxx&quot;{详细规格见规格说明url部分},\n  }\n   ]\n}\n</code></pre><h2 id=\"指令说明\"><a href=\"#指令说明\" class=\"headerlink\" title=\"指令说明\"></a><strong>指令说明</strong></h2><h3 id=\"一、设备基础指令\"><a href=\"#一、设备基础指令\" class=\"headerlink\" title=\"一、设备基础指令\"></a><strong>一、设备基础指令</strong></h3><ol>\n<li><strong>App扫描设备</strong><br>|0x5A    |数据长度    |框架版本    |协议类型    |设备编码    |Mac地址    |数据帧序列号    |保留字    |数据类型    |数据内容    |检验码FCS|<br>|:—-|:—–|:—–|:—–|:—–|:—–|:—–|:—–|:—–|:—–|:—–|<br>|5A    |0022|    40|    01|    0000000000000000|    000000000000|    20000000|    0000000000000000    |0405|    data|    381a|</li>\n</ol>\n<ul>\n<li><font color=\"#c00\"><strong>命令字：0x0405</strong></font></li>\n<li><font color=\"#c00\"><strong>data区：NULL</strong></font>\n</li>\n</ul>\n<ol start=\"2\">\n<li><strong>设备回复自身信息</strong><br>|0x5A    |数据长度    |框架版本    |协议类型    |设备编码    |Mac地址    |数据帧序列号    |保留字    |数据类型    |数据内容    |检验码FCS|<br>|:—-|:—–|:—–|:—–|:—–|:—–|:—–|:—–|:—–|:—–|:—–|<br>|5A    |xxxx    |    40|    01|    00000199001b0300    |    d8f710e019b0    |    00000000|    0000000000000000    |0305    |    data|    xxxx|</li>\n</ol>\n<ul>\n<li><font color=\"#c00\"><strong>命令字：0x0305</strong></font></li>\n<li><font color=\"#c00\"><strong>厂商ID：0x0199</strong> </font></li>\n<li><font color=\"#c00\"><strong>大分类：0x1b</strong>  </font></li>\n<li><font color=\"#c00\"><strong>小分类：0x03</strong></font> \n</li>\n</ul>\n<ol start=\"3\">\n<li><strong>App发送心跳包</strong><br>|0x5A    |数据长度    |框架版本    |协议类型    |设备编码    |Mac地址    |数据帧序列号    |保留字    |数据类型    |数据内容    |检验码FCS|<br>|:—-|:—–|:—–|:—–|:—–|:—–|:—–|:—–|:—–|:—–|:—–|<br>|5A    |xxxx    |    40|    01|    0000000000000000|    000000000000|    20000000|    0000000000000000    |0104|    data|    xxxx|</li>\n</ol>\n<ul>\n<li><font color=\"#c00\"><strong>命令字：0x0104</strong></font> </li>\n<li><font color=\"#c00\"><strong>data区：json</strong></font> \n\n</li>\n</ul>\n<p>示例：</p>\n<pre><code>{ \n &quot;cmd&quot;: 0x400f ,//命令码\n&quot;code&quot;: 0,    //返回码\n&quot;msg&quot;: &quot;&quot;,    //状态消息\n&quot;data&quot;: ......    //数据节点\n}\n</code></pre><ol start=\"4\">\n<li><strong>设备回复心跳</strong><br>|0x5A    |数据长度    |框架版本    |协议类型    |设备编码    |Mac地址    |数据帧序列号    |保留字    |数据类型    |数据内容    |检验码FCS|<br>|:—-|:—–|:—–|:—–|:—–|:—–|:—–|:—–|:—–|:—–|:—–|<br>|5A    |xxxx    |    40|    01|    0000000000000000|    000000000000|    00000000|    0000000000000000    |0204|    data|    xxxx|</li>\n</ol>\n<ul>\n<li><font color=\"#c00\"> <strong>命令字：0x0204</strong></font> </li>\n<li><font color=\"#c00\"> <strong>data区：json</strong></font> \n\n\n</li>\n</ul>\n<p>示例：</p>\n<pre><code>{ \n &quot;cmd&quot;: 0x000f ,//命令码\n&quot;code&quot;: 0,    //返回码\n&quot;msg&quot;: &quot;&quot;,    //状态消息\n&quot;data&quot;:  {\n          &quot;deviceId&quot;: &quot;SPK设备序列号&quot;\n      }  \n}\n</code></pre><h3 id=\"二、App主动控制终端指令\"><a href=\"#二、App主动控制终端指令\" class=\"headerlink\" title=\"二、App主动控制终端指令\"></a><strong>二、App主动控制终端指令</strong></h3><p><strong>1.App控制终端</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">0x5A</th>\n<th style=\"text-align:left\">数据长度</th>\n<th style=\"text-align:left\">框架版本</th>\n<th style=\"text-align:left\">协议类型</th>\n<th style=\"text-align:left\">设备编码</th>\n<th style=\"text-align:left\">Mac地址</th>\n<th style=\"text-align:left\">数据帧序列号</th>\n<th style=\"text-align:left\">保留字</th>\n<th style=\"text-align:left\">数据类型</th>\n<th style=\"text-align:left\">数据内容</th>\n<th style=\"text-align:left\">检验码FCS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">5A</td>\n<td style=\"text-align:left\">xxxx</td>\n<td style=\"text-align:left\">40</td>\n<td style=\"text-align:left\">01</td>\n<td style=\"text-align:left\">0000000000000000</td>\n<td style=\"text-align:left\">000000000000</td>\n<td style=\"text-align:left\">00000000</td>\n<td style=\"text-align:left\">0000000000000000</td>\n<td style=\"text-align:left\">0104</td>\n<td style=\"text-align:left\">data</td>\n<td style=\"text-align:left\">xxxx</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><font color=\"#c00\"> <strong>命令字：0x0104</strong></font> </li>\n<li><font color=\"#c00\"> <strong>data区：json数据</strong></font> \n\n<p>示例：</p>\n<pre><code>{ \n &quot;cmd&quot;: 0x00xx ,//命令码\n&quot;code&quot;: 0,    //返回码\n&quot;msg&quot;: &quot;&quot;,    //状态消息\n&quot;data&quot;: ......    //数据节点\n}\n</code></pre></li>\n</ul>\n<p><strong>2.终端回复App</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">0x5A</th>\n<th style=\"text-align:left\">数据长度</th>\n<th style=\"text-align:left\">框架版本</th>\n<th style=\"text-align:left\">协议类型</th>\n<th style=\"text-align:left\">设备编码</th>\n<th style=\"text-align:left\">Mac地址</th>\n<th style=\"text-align:left\">数据帧序列号</th>\n<th style=\"text-align:left\">保留字</th>\n<th style=\"text-align:left\">数据类型</th>\n<th style=\"text-align:left\">数据内容</th>\n<th style=\"text-align:left\">检验码FCS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">5A</td>\n<td style=\"text-align:left\">xxxx</td>\n<td style=\"text-align:left\">40</td>\n<td style=\"text-align:left\">01</td>\n<td style=\"text-align:left\">0000000000000000</td>\n<td style=\"text-align:left\">000000000000</td>\n<td style=\"text-align:left\">00000000</td>\n<td style=\"text-align:left\">0000000000000000</td>\n<td style=\"text-align:left\">0204</td>\n<td style=\"text-align:left\">data</td>\n<td style=\"text-align:left\">xxxx</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><font color=\"#c00\"> <strong>命令字：0x0204</strong></font> </li>\n<li><font color=\"#c00\"> <strong>data区：json数据</strong></font> \n\n<p>示例：</p>\n<pre><code>{ \n &quot;cmd&quot;: 0x00xx ,//命令码\n&quot;code&quot;: 0,    //返回码\n&quot;msg&quot;: &quot;&quot;,    //状态消息\n&quot;data&quot;: ......    //数据节点\n}\n</code></pre></li>\n</ul>\n<h3 id=\"三、终端主动发送控制数据给App\"><a href=\"#三、终端主动发送控制数据给App\" class=\"headerlink\" title=\"三、终端主动发送控制数据给App\"></a><strong>三、终端主动发送控制数据给App</strong></h3><p><strong>1.周期上传运行数据</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">0x5A</th>\n<th style=\"text-align:left\">数据长度</th>\n<th style=\"text-align:left\">框架版本</th>\n<th style=\"text-align:left\">协议类型</th>\n<th style=\"text-align:left\">设备编码</th>\n<th style=\"text-align:left\">Mac地址</th>\n<th style=\"text-align:left\">数据帧序列号</th>\n<th style=\"text-align:left\">保留字</th>\n<th style=\"text-align:left\">数据类型</th>\n<th style=\"text-align:left\">数据内容</th>\n<th style=\"text-align:left\">检验码FCS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">5A</td>\n<td style=\"text-align:left\">xxxx</td>\n<td style=\"text-align:left\">40</td>\n<td style=\"text-align:left\">01</td>\n<td style=\"text-align:left\">0000000000000000</td>\n<td style=\"text-align:left\">000000000000</td>\n<td style=\"text-align:left\">00000000</td>\n<td style=\"text-align:left\">0000000000000000</td>\n<td style=\"text-align:left\">0105</td>\n<td style=\"text-align:left\">data</td>\n<td style=\"text-align:left\">xxxx</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><font color=\"#c00\"> <strong>命令字：0x0105</strong></font> </li>\n<li><font color=\"#c00\"> <strong>data区：json数据</strong></font> \n\n<p>示例：</p>\n<pre><code>{ \n &quot;cmd&quot;: 0x0013 ,//命令码\n&quot;code&quot;: 0,    //返回码\n&quot;msg&quot;: &quot;&quot;,    //状态消息\n&quot;data&quot;: ......    //数据节点\n}\n</code></pre></li>\n</ul>\n<h1 id=\"音箱数据模型\"><a href=\"#音箱数据模型\" class=\"headerlink\" title=\"音箱数据模型\"></a><strong>音箱数据模型</strong></h1><h2 id=\"一、歌单\"><a href=\"#一、歌单\" class=\"headerlink\" title=\"一、歌单\"></a><strong>一、歌单</strong></h2><p><strong>参数说明</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数名称</th>\n<th style=\"text-align:left\">是否必须</th>\n<th style=\"text-align:left\">字段类型</th>\n<th style=\"text-align:left\">参数说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">id</td>\n<td style=\"text-align:left\">是</td>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">歌曲ID</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">name</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">演唱者</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">artist</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">艺术家</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">album_title</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">专辑标题</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">lrc_id</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">歌词ID</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">image_url_small</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">歌曲海报1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">image_url_middle</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">歌曲海报2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">image_url_large</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">歌曲海报3</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mac</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">Mac地址</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">total_time</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">歌曲时长</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">album_id</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">专辑ID</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">utype</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">比如 虾米音乐 考虑 喜马拉雅 之类的</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">uri</td>\n<td style=\"text-align:left\">是</td>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">歌曲URL</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">downloadurl</td>\n<td style=\"text-align:left\">是</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">下载url</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"二、播放状态\"><a href=\"#二、播放状态\" class=\"headerlink\" title=\"二、播放状态\"></a><strong>二、播放状态</strong></h2><p><strong>参数说明</strong><br>|参数名称|是否必须    |字段类型|参数说明|<br>|:—-|:—–|:—–|:—–|<br>|id    是    |int|    歌曲ID|<br>|mtype    |是    |String    |虾米，百度云盘，本地音乐…|<br>|p_status|    否    |int    |“0/1/2/3/4”, //准备播放，播放,暂停,停止,播放结束(用于网络收音机)|<br>|type|    否    |String|    当前播放源(预设preset),收藏,实时推送|<br>|name    |否    |string    |演唱者|<br>|artist    |否    |String|    艺术家|<br>|album|    否    |String|    专辑|<br>|next_id|    是|    int|    下一首歌曲id|<br>|total_time|    是|    int|    歌曲总时间|<br>|current_time|    是|    int|    歌曲当前播放时间|<br>|play_mode|    否|    int|    模式（//顺序播放/随机播放列表循环/单曲循环/）|<br>|volume    |是    |int|    音量|</p>\n<h1 id=\"绑定流程\"><a href=\"#绑定流程\" class=\"headerlink\" title=\"绑定流程\"></a><strong>绑定流程</strong></h1><p><img src=\"http://img.blog.csdn.net/20160226142156953\" alt=\"这里写图片描述\"><br><strong><em><a href=\"http://img.blog.csdn.net/20160226142156953\" target=\"_blank\" rel=\"noopener\">点击看大图</a></em></strong></p>\n<p><a href=\"http://blog.csdn.net/xxl6097/article/details/50127949\" target=\"_blank\" rel=\"noopener\"><strong>[原文链接地址]http://blog.csdn.net/xxl6097/article/details/50127949</strong></a></p>"}],"PostAsset":[{"_id":"source/_posts/public-bind/values.png","slug":"values.png","post":"cjfjja6pp001764v4xoiyfzf2","modified":0,"renderable":0},{"_id":"source/_posts/public-bind/scanning.png","slug":"scanning.png","post":"cjfjja6pp001764v4xoiyfzf2","modified":0,"renderable":0},{"_id":"source/_posts/android-ndk-so-a/img1.png","slug":"img1.png","post":"cjfjja6p6000464v4k3om3i5m","modified":0,"renderable":0},{"_id":"source/_posts/public-bind/H&TV02_2015-10-14.pdf","slug":"H&TV02_2015-10-14.pdf","post":"cjfjja6pp001764v4xoiyfzf2","modified":0,"renderable":0},{"_id":"source/_posts/public-bind/HET-15015A20160510_open.pdf","slug":"HET-15015A20160510_open.pdf","post":"cjfjja6pp001764v4xoiyfzf2","modified":0,"renderable":0},{"_id":"source/_posts/public-bind/bouding.png","slug":"bouding.png","post":"cjfjja6pp001764v4xoiyfzf2","modified":0,"renderable":0},{"_id":"source/_posts/public-bind/droplist.png","slug":"droplist.png","post":"cjfjja6pp001764v4xoiyfzf2","modified":0,"renderable":0},{"_id":"source/_posts/public-bind/failed.png","slug":"failed.png","post":"cjfjja6pp001764v4xoiyfzf2","modified":0,"renderable":0},{"_id":"source/_posts/public-bind/loading.png","slug":"loading.png","post":"cjfjja6pp001764v4xoiyfzf2","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjfjja6ox000064v48y819z1y","category_id":"cjfjja6p4000264v4rf69p2yy","_id":"cjfjja6pa000964v4phy6rglx"},{"post_id":"cjfjja6p2000164v4tzvq7l7p","category_id":"cjfjja6p9000764v4tm7sttst","_id":"cjfjja6pb000e64v4mewyoyhk"},{"post_id":"cjfjja6p6000464v4k3om3i5m","category_id":"cjfjja6pa000a64v4217x7346","_id":"cjfjja6pc000h64v467j8upn5"},{"post_id":"cjfjja6p7000564v410mqj7i6","category_id":"cjfjja6pc000f64v443iqyuk2","_id":"cjfjja6pd000m64v4ws6zru6k"},{"post_id":"cjfjja6p8000664v43bqdb3x0","category_id":"cjfjja6pc000i64v44ibk9946","_id":"cjfjja6pe000o64v4i1fboxxg"},{"post_id":"cjfjja6pk001164v4uoj0wc0f","category_id":"cjfjja6pp001564v411l02zqr","_id":"cjfjja6pv001c64v4gw87wh0d"},{"post_id":"cjfjja6pm001364v43zzkk2on","category_id":"cjfjja6pu001964v40llo736e","_id":"cjfjja6pw001f64v4nzl7p581"},{"post_id":"cjfjja6pp001764v4xoiyfzf2","category_id":"cjfjja6pv001d64v4o26a0o56","_id":"cjfjja6px001k64v4wc39hdax"},{"post_id":"cjfjja6ps001864v4fj0i8glm","category_id":"cjfjja6pw001g64v42v6n2oa7","_id":"cjfjja6px001m64v459wwje45"},{"post_id":"cjfjja6q0001t64v41jjxznep","category_id":"cjfjja6pv001d64v4o26a0o56","_id":"cjfjja6q4001v64v47jai54cm"}],"PostTag":[{"post_id":"cjfjja6ox000064v48y819z1y","tag_id":"cjfjja6p5000364v42lldy1ty","_id":"cjfjja6pb000c64v4lkuhezkz"},{"post_id":"cjfjja6ox000064v48y819z1y","tag_id":"cjfjja6p9000864v4i4lyzigv","_id":"cjfjja6pb000d64v41sysg0c8"},{"post_id":"cjfjja6p2000164v4tzvq7l7p","tag_id":"cjfjja6pa000b64v4d8cil197","_id":"cjfjja6pd000k64v48hkjketf"},{"post_id":"cjfjja6p2000164v4tzvq7l7p","tag_id":"cjfjja6pc000g64v4n5tijlpw","_id":"cjfjja6pd000l64v4ya4f6c4q"},{"post_id":"cjfjja6p6000464v4k3om3i5m","tag_id":"cjfjja6pc000j64v49whbvw8g","_id":"cjfjja6pe000s64v4ip1w0pwf"},{"post_id":"cjfjja6p6000464v4k3om3i5m","tag_id":"cjfjja6pd000n64v4e10362yf","_id":"cjfjja6pe000t64v4555ta29z"},{"post_id":"cjfjja6p6000464v4k3om3i5m","tag_id":"cjfjja6pe000p64v49tkth2c2","_id":"cjfjja6pf000v64v4ad2p3lwo"},{"post_id":"cjfjja6p6000464v4k3om3i5m","tag_id":"cjfjja6pe000q64v4gpifids0","_id":"cjfjja6pg000w64v4lja8vq2z"},{"post_id":"cjfjja6p7000564v410mqj7i6","tag_id":"cjfjja6pe000r64v4vpzlkqw5","_id":"cjfjja6ph000y64v4dlldyupz"},{"post_id":"cjfjja6p7000564v410mqj7i6","tag_id":"cjfjja6pa000b64v4d8cil197","_id":"cjfjja6ph000z64v4g6eskmgb"},{"post_id":"cjfjja6p8000664v43bqdb3x0","tag_id":"cjfjja6pg000x64v48zhxj0o5","_id":"cjfjja6ph001064v42akxr5nk"},{"post_id":"cjfjja6pk001164v4uoj0wc0f","tag_id":"cjfjja6pp001664v443id5oow","_id":"cjfjja6pv001b64v4ujgp76si"},{"post_id":"cjfjja6pm001364v43zzkk2on","tag_id":"cjfjja6pu001a64v484lccbx4","_id":"cjfjja6px001i64v47s01xmnt"},{"post_id":"cjfjja6pm001364v43zzkk2on","tag_id":"cjfjja6pw001e64v4x1kms19e","_id":"cjfjja6px001j64v4rzakmyie"},{"post_id":"cjfjja6pp001764v4xoiyfzf2","tag_id":"cjfjja6pw001h64v439a5jpgf","_id":"cjfjja6py001o64v4e78a4t4q"},{"post_id":"cjfjja6pp001764v4xoiyfzf2","tag_id":"cjfjja6px001l64v4wx4ln9kb","_id":"cjfjja6py001p64v4uq3ktgp6"},{"post_id":"cjfjja6ps001864v4fj0i8glm","tag_id":"cjfjja6px001n64v4va7wefho","_id":"cjfjja6py001r64v4hn95emv9"},{"post_id":"cjfjja6ps001864v4fj0i8glm","tag_id":"cjfjja6py001q64v4hqhc5wzc","_id":"cjfjja6py001s64v4v07swyok"},{"post_id":"cjfjja6q0001t64v41jjxznep","tag_id":"cjfjja6px001l64v4wx4ln9kb","_id":"cjfjja6q4001w64v4kkc43m4c"},{"post_id":"cjfjja6q0001t64v41jjxznep","tag_id":"cjfjja6q2001u64v4qaccn8nc","_id":"cjfjja6q4001x64v4bsjn26fc"},{"post_id":"cjfjja6q0001t64v41jjxznep","tag_id":"cjfjja6pc000j64v49whbvw8g","_id":"cjfjja6q4001y64v4zeeh81pb"}],"Tag":[{"name":"Android","_id":"cjfjja6p5000364v42lldy1ty"},{"name":"Service","_id":"cjfjja6p9000864v4i4lyzigv"},{"name":"shadowsocks","_id":"cjfjja6pa000b64v4d8cil197"},{"name":"翻墙","_id":"cjfjja6pc000g64v4n5tijlpw"},{"name":"Andorid","_id":"cjfjja6pc000j64v49whbvw8g"},{"name":"ndk","_id":"cjfjja6pd000n64v4e10362yf"},{"name":"so","_id":"cjfjja6pe000p64v49tkth2c2"},{"name":"a","_id":"cjfjja6pe000q64v4gpifids0"},{"name":"vpn","_id":"cjfjja6pe000r64v4vpzlkqw5"},{"name":"驱蚊  life","_id":"cjfjja6pg000x64v48zhxj0o5"},{"name":"ios","_id":"cjfjja6pp001664v443id5oow"},{"name":"迅雷","_id":"cjfjja6pu001a64v484lccbx4"},{"name":"centos","_id":"cjfjja6pw001e64v4x1kms19e"},{"name":"het","_id":"cjfjja6pw001h64v439a5jpgf"},{"name":"智能家居","_id":"cjfjja6px001l64v4wx4ln9kb"},{"name":"okhttp","_id":"cjfjja6px001n64v4va7wefho"},{"name":"android","_id":"cjfjja6py001q64v4hqhc5wzc"},{"name":"喜马拉雅","_id":"cjfjja6q2001u64v4qaccn8nc"}]}}